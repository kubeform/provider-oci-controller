// Copyright (c) 2016, 2018, 2021, Oracle and/or its affiliates.  All rights reserved.
// This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
// Code generated. DO NOT EDIT.

// Scanning API
//
// Use the Vulnerability Scanning Service (VSS) APIs to manage scan recipes, targets, and reports.
//

package vulnerabilityscanning

import (
	"encoding/json"
	"github.com/oracle/oci-go-sdk/v50/common"
)

// UpdateContainerScanTargetDetails The information to update an existing container scan target
type UpdateContainerScanTargetDetails struct {

	// User friendly name of container scan target
	DisplayName *string `mandatory:"false" json:"displayName"`

	// Target description.
	Description *string `mandatory:"false" json:"description"`

	TargetRegistry UpdateContainerScanRegistryDetails `mandatory:"false" json:"targetRegistry"`

	// ID of the container scan recipe this target applies.
	ContainerScanRecipeId *string `mandatory:"false" json:"containerScanRecipeId"`

	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
	// Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `mandatory:"false" json:"freeformTags"`

	// Defined tags for this resource. Each key is predefined and scoped to a namespace.
	// Example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags map[string]map[string]interface{} `mandatory:"false" json:"definedTags"`
}

func (m UpdateContainerScanTargetDetails) String() string {
	return common.PointerString(m)
}

// UnmarshalJSON unmarshals from json
func (m *UpdateContainerScanTargetDetails) UnmarshalJSON(data []byte) (e error) {
	model := struct {
		DisplayName           *string                            `json:"displayName"`
		Description           *string                            `json:"description"`
		TargetRegistry        updatecontainerscanregistrydetails `json:"targetRegistry"`
		ContainerScanRecipeId *string                            `json:"containerScanRecipeId"`
		FreeformTags          map[string]string                  `json:"freeformTags"`
		DefinedTags           map[string]map[string]interface{}  `json:"definedTags"`
	}{}

	e = json.Unmarshal(data, &model)
	if e != nil {
		return
	}
	var nn interface{}
	m.DisplayName = model.DisplayName

	m.Description = model.Description

	nn, e = model.TargetRegistry.UnmarshalPolymorphicJSON(model.TargetRegistry.JsonData)
	if e != nil {
		return
	}
	if nn != nil {
		m.TargetRegistry = nn.(UpdateContainerScanRegistryDetails)
	} else {
		m.TargetRegistry = nil
	}

	m.ContainerScanRecipeId = model.ContainerScanRecipeId

	m.FreeformTags = model.FreeformTags

	m.DefinedTags = model.DefinedTags

	return
}
