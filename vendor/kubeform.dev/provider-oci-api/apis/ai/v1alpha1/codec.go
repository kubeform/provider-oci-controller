/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionDataAssetSpecDataSourceDetails{}).Type1()):                       AnomalyDetectionDataAssetSpecDataSourceDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails{}).Type1()): AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionModelSpecModelTrainingDetails{}).Type1()):                        AnomalyDetectionModelSpecModelTrainingDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionModelSpecModelTrainingResults{}).Type1()):                        AnomalyDetectionModelSpecModelTrainingResultsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails{}).Type1()):     AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetailsCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionDataAssetSpecDataSourceDetails{}).Type1()):                       AnomalyDetectionDataAssetSpecDataSourceDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails{}).Type1()): AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionModelSpecModelTrainingDetails{}).Type1()):                        AnomalyDetectionModelSpecModelTrainingDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionModelSpecModelTrainingResults{}).Type1()):                        AnomalyDetectionModelSpecModelTrainingResultsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails{}).Type1()):     AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetailsCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type AnomalyDetectionDataAssetSpecDataSourceDetailsCodec struct {
}

func (AnomalyDetectionDataAssetSpecDataSourceDetailsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomalyDetectionDataAssetSpecDataSourceDetails)(ptr) == nil
}

func (AnomalyDetectionDataAssetSpecDataSourceDetailsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomalyDetectionDataAssetSpecDataSourceDetails)(ptr)
	var objs []AnomalyDetectionDataAssetSpecDataSourceDetails
	if obj != nil {
		objs = []AnomalyDetectionDataAssetSpecDataSourceDetails{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionDataAssetSpecDataSourceDetails{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomalyDetectionDataAssetSpecDataSourceDetailsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomalyDetectionDataAssetSpecDataSourceDetails)(ptr) = AnomalyDetectionDataAssetSpecDataSourceDetails{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomalyDetectionDataAssetSpecDataSourceDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionDataAssetSpecDataSourceDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomalyDetectionDataAssetSpecDataSourceDetails)(ptr) = objs[0]
			} else {
				*(*AnomalyDetectionDataAssetSpecDataSourceDetails)(ptr) = AnomalyDetectionDataAssetSpecDataSourceDetails{}
			}
		} else {
			*(*AnomalyDetectionDataAssetSpecDataSourceDetails)(ptr) = AnomalyDetectionDataAssetSpecDataSourceDetails{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomalyDetectionDataAssetSpecDataSourceDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionDataAssetSpecDataSourceDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomalyDetectionDataAssetSpecDataSourceDetails)(ptr) = obj
		} else {
			*(*AnomalyDetectionDataAssetSpecDataSourceDetails)(ptr) = AnomalyDetectionDataAssetSpecDataSourceDetails{}
		}
	default:
		iter.ReportError("decode AnomalyDetectionDataAssetSpecDataSourceDetails", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetailsCodec struct {
}

func (AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetailsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails)(ptr) == nil
}

func (AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetailsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails)(ptr)
	var objs []AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails
	if obj != nil {
		objs = []AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetailsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails)(ptr) = AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails)(ptr) = objs[0]
			} else {
				*(*AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails)(ptr) = AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails{}
			}
		} else {
			*(*AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails)(ptr) = AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails)(ptr) = obj
		} else {
			*(*AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails)(ptr) = AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails{}
		}
	default:
		iter.ReportError("decode AnomalyDetectionDataAssetSpecDataSourceDetailsVersionSpecificDetails", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnomalyDetectionModelSpecModelTrainingDetailsCodec struct {
}

func (AnomalyDetectionModelSpecModelTrainingDetailsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomalyDetectionModelSpecModelTrainingDetails)(ptr) == nil
}

func (AnomalyDetectionModelSpecModelTrainingDetailsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomalyDetectionModelSpecModelTrainingDetails)(ptr)
	var objs []AnomalyDetectionModelSpecModelTrainingDetails
	if obj != nil {
		objs = []AnomalyDetectionModelSpecModelTrainingDetails{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionModelSpecModelTrainingDetails{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomalyDetectionModelSpecModelTrainingDetailsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomalyDetectionModelSpecModelTrainingDetails)(ptr) = AnomalyDetectionModelSpecModelTrainingDetails{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomalyDetectionModelSpecModelTrainingDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionModelSpecModelTrainingDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomalyDetectionModelSpecModelTrainingDetails)(ptr) = objs[0]
			} else {
				*(*AnomalyDetectionModelSpecModelTrainingDetails)(ptr) = AnomalyDetectionModelSpecModelTrainingDetails{}
			}
		} else {
			*(*AnomalyDetectionModelSpecModelTrainingDetails)(ptr) = AnomalyDetectionModelSpecModelTrainingDetails{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomalyDetectionModelSpecModelTrainingDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionModelSpecModelTrainingDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomalyDetectionModelSpecModelTrainingDetails)(ptr) = obj
		} else {
			*(*AnomalyDetectionModelSpecModelTrainingDetails)(ptr) = AnomalyDetectionModelSpecModelTrainingDetails{}
		}
	default:
		iter.ReportError("decode AnomalyDetectionModelSpecModelTrainingDetails", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnomalyDetectionModelSpecModelTrainingResultsCodec struct {
}

func (AnomalyDetectionModelSpecModelTrainingResultsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomalyDetectionModelSpecModelTrainingResults)(ptr) == nil
}

func (AnomalyDetectionModelSpecModelTrainingResultsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomalyDetectionModelSpecModelTrainingResults)(ptr)
	var objs []AnomalyDetectionModelSpecModelTrainingResults
	if obj != nil {
		objs = []AnomalyDetectionModelSpecModelTrainingResults{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionModelSpecModelTrainingResults{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomalyDetectionModelSpecModelTrainingResultsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomalyDetectionModelSpecModelTrainingResults)(ptr) = AnomalyDetectionModelSpecModelTrainingResults{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomalyDetectionModelSpecModelTrainingResults

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionModelSpecModelTrainingResults{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomalyDetectionModelSpecModelTrainingResults)(ptr) = objs[0]
			} else {
				*(*AnomalyDetectionModelSpecModelTrainingResults)(ptr) = AnomalyDetectionModelSpecModelTrainingResults{}
			}
		} else {
			*(*AnomalyDetectionModelSpecModelTrainingResults)(ptr) = AnomalyDetectionModelSpecModelTrainingResults{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomalyDetectionModelSpecModelTrainingResults

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionModelSpecModelTrainingResults{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomalyDetectionModelSpecModelTrainingResults)(ptr) = obj
		} else {
			*(*AnomalyDetectionModelSpecModelTrainingResults)(ptr) = AnomalyDetectionModelSpecModelTrainingResults{}
		}
	default:
		iter.ReportError("decode AnomalyDetectionModelSpecModelTrainingResults", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetailsCodec struct {
}

func (AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetailsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails)(ptr) == nil
}

func (AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetailsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails)(ptr)
	var objs []AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails
	if obj != nil {
		objs = []AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetailsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails)(ptr) = AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails)(ptr) = objs[0]
			} else {
				*(*AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails)(ptr) = AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails{}
			}
		} else {
			*(*AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails)(ptr) = AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails)(ptr) = obj
		} else {
			*(*AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails)(ptr) = AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails{}
		}
	default:
		iter.ReportError("decode AnomalyDetectionModelSpecModelTrainingResultsRowReductionDetails", "unexpected JSON type")
	}
}
