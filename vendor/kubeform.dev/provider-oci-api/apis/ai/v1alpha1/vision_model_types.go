/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type VisionModel struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VisionModelSpec   `json:"spec,omitempty"`
	Status            VisionModelStatus `json:"status,omitempty"`
}

type VisionModelSpecTestingDataset struct {
	// +optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket"`
	// +optional
	DatasetID   *string `json:"datasetID,omitempty" tf:"dataset_id"`
	DatasetType *string `json:"datasetType" tf:"dataset_type"`
	// +optional
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name"`
	// +optional
	Object *string `json:"object,omitempty" tf:"object"`
}

type VisionModelSpecTrainingDataset struct {
	// +optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket"`
	// +optional
	DatasetID   *string `json:"datasetID,omitempty" tf:"dataset_id"`
	DatasetType *string `json:"datasetType" tf:"dataset_type"`
	// +optional
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name"`
	// +optional
	Object *string `json:"object,omitempty" tf:"object"`
}

type VisionModelSpecValidationDataset struct {
	// +optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket"`
	// +optional
	DatasetID   *string `json:"datasetID,omitempty" tf:"dataset_id"`
	DatasetType *string `json:"datasetType" tf:"dataset_type"`
	// +optional
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name"`
	// +optional
	Object *string `json:"object,omitempty" tf:"object"`
}

type VisionModelSpec struct {
	State *VisionModelSpecResource `json:"state,omitempty" tf:"-"`

	Resource VisionModelSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type VisionModelSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AveragePrecision *float64 `json:"averagePrecision,omitempty" tf:"average_precision"`
	CompartmentID    *string  `json:"compartmentID" tf:"compartment_id"`
	// +optional
	ConfidenceThreshold *float64 `json:"confidenceThreshold,omitempty" tf:"confidence_threshold"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	IsQuickMode *bool `json:"isQuickMode,omitempty" tf:"is_quick_mode"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	// +optional
	MaxTrainingDurationInHours *float64 `json:"maxTrainingDurationInHours,omitempty" tf:"max_training_duration_in_hours"`
	// +optional
	Metrics   *string `json:"metrics,omitempty" tf:"metrics"`
	ModelType *string `json:"modelType" tf:"model_type"`
	// +optional
	ModelVersion *string `json:"modelVersion,omitempty" tf:"model_version"`
	// +optional
	Precision *float64 `json:"precision,omitempty" tf:"precision"`
	ProjectID *string  `json:"projectID" tf:"project_id"`
	// +optional
	Recall *float64 `json:"recall,omitempty" tf:"recall"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	SystemTags map[string]string `json:"systemTags,omitempty" tf:"system_tags"`
	// +optional
	TestImageCount *int64 `json:"testImageCount,omitempty" tf:"test_image_count"`
	// +optional
	TestingDataset *VisionModelSpecTestingDataset `json:"testingDataset,omitempty" tf:"testing_dataset"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated"`
	// +optional
	TotalImageCount *int64 `json:"totalImageCount,omitempty" tf:"total_image_count"`
	// +optional
	TrainedDurationInHours *float64                        `json:"trainedDurationInHours,omitempty" tf:"trained_duration_in_hours"`
	TrainingDataset        *VisionModelSpecTrainingDataset `json:"trainingDataset" tf:"training_dataset"`
	// +optional
	ValidationDataset *VisionModelSpecValidationDataset `json:"validationDataset,omitempty" tf:"validation_dataset"`
}

type VisionModelStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// VisionModelList is a list of VisionModels
type VisionModelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of VisionModel CRD objects
	Items []VisionModel `json:"items,omitempty"`
}
