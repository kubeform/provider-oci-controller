/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type AnalyticsInstance struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AnalyticsInstanceSpec   `json:"spec,omitempty"`
	Status            AnalyticsInstanceStatus `json:"status,omitempty"`
}

type AnalyticsInstanceSpecCapacity struct {
	CapacityType  *string `json:"capacityType" tf:"capacity_type"`
	CapacityValue *int64  `json:"capacityValue" tf:"capacity_value"`
}

type AnalyticsInstanceSpecNetworkEndpointDetailsWhitelistedVcns struct {
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	WhitelistedIPS []string `json:"whitelistedIPS,omitempty" tf:"whitelisted_ips"`
}

type AnalyticsInstanceSpecNetworkEndpointDetails struct {
	NetworkEndpointType *string `json:"networkEndpointType" tf:"network_endpoint_type"`
	// +optional
	SubnetID *string `json:"subnetID,omitempty" tf:"subnet_id"`
	// +optional
	VcnID *string `json:"vcnID,omitempty" tf:"vcn_id"`
	// +optional
	WhitelistedIPS []string `json:"whitelistedIPS,omitempty" tf:"whitelisted_ips"`
	// +optional
	WhitelistedVcns []AnalyticsInstanceSpecNetworkEndpointDetailsWhitelistedVcns `json:"whitelistedVcns,omitempty" tf:"whitelisted_vcns"`
}

type AnalyticsInstanceSpec struct {
	State *AnalyticsInstanceSpecResource `json:"state,omitempty" tf:"-"`

	Resource AnalyticsInstanceSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type AnalyticsInstanceSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	Capacity      *AnalyticsInstanceSpecCapacity `json:"capacity" tf:"capacity"`
	CompartmentID *string                        `json:"compartmentID" tf:"compartment_id"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	EmailNotification *string `json:"emailNotification,omitempty" tf:"email_notification"`
	FeatureSet        *string `json:"featureSet" tf:"feature_set"`
	// +optional
	FreeformTags    map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	IdcsAccessToken *string           `json:"-" sensitive:"true" tf:"idcs_access_token"`
	LicenseType     *string           `json:"licenseType" tf:"license_type"`
	Name            *string           `json:"name" tf:"name"`
	// +optional
	NetworkEndpointDetails *AnalyticsInstanceSpecNetworkEndpointDetails `json:"networkEndpointDetails,omitempty" tf:"network_endpoint_details"`
	// +optional
	PrivateAccessChannels map[string]string `json:"privateAccessChannels,omitempty" tf:"private_access_channels"`
	// +optional
	ServiceURL *string `json:"serviceURL,omitempty" tf:"service_url"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated"`
	// +optional
	VanityURLDetails map[string]string `json:"vanityURLDetails,omitempty" tf:"vanity_url_details"`
}

type AnalyticsInstanceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AnalyticsInstanceList is a list of AnalyticsInstances
type AnalyticsInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of AnalyticsInstance CRD objects
	Items []AnalyticsInstance `json:"items,omitempty"`
}
