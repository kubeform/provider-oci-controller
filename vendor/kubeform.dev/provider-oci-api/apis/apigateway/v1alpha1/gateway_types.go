/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Gateway struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewaySpec   `json:"spec,omitempty"`
	Status            GatewayStatus `json:"status,omitempty"`
}

type GatewaySpecIpAddresses struct {
	// +optional
	IpAddress *string `json:"ipAddress,omitempty" tf:"ip_address"`
}

type GatewaySpecResponseCacheDetailsServers struct {
	// +optional
	Host *string `json:"host,omitempty" tf:"host"`
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
}

type GatewaySpecResponseCacheDetails struct {
	// +optional
	AuthenticationSecretID *string `json:"authenticationSecretID,omitempty" tf:"authentication_secret_id"`
	// +optional
	AuthenticationSecretVersionNumber *string `json:"authenticationSecretVersionNumber,omitempty" tf:"authentication_secret_version_number"`
	// +optional
	ConnectTimeoutInMs *int64 `json:"connectTimeoutInMs,omitempty" tf:"connect_timeout_in_ms"`
	// +optional
	IsSslEnabled *bool `json:"isSslEnabled,omitempty" tf:"is_ssl_enabled"`
	// +optional
	IsSslVerifyDisabled *bool `json:"isSslVerifyDisabled,omitempty" tf:"is_ssl_verify_disabled"`
	// +optional
	ReadTimeoutInMs *int64 `json:"readTimeoutInMs,omitempty" tf:"read_timeout_in_ms"`
	// +optional
	SendTimeoutInMs *int64 `json:"sendTimeoutInMs,omitempty" tf:"send_timeout_in_ms"`
	// +optional
	Servers []GatewaySpecResponseCacheDetailsServers `json:"servers,omitempty" tf:"servers"`
	Type    *string                                  `json:"type" tf:"type"`
}

type GatewaySpec struct {
	State *GatewaySpecResource `json:"state,omitempty" tf:"-"`

	Resource GatewaySpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type GatewaySpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	CertificateID *string `json:"certificateID,omitempty" tf:"certificate_id"`
	CompartmentID *string `json:"compartmentID" tf:"compartment_id"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	DisplayName  *string `json:"displayName,omitempty" tf:"display_name"`
	EndpointType *string `json:"endpointType" tf:"endpoint_type"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname"`
	// +optional
	IpAddresses []GatewaySpecIpAddresses `json:"ipAddresses,omitempty" tf:"ip_addresses"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	// +optional
	ResponseCacheDetails *GatewaySpecResponseCacheDetails `json:"responseCacheDetails,omitempty" tf:"response_cache_details"`
	// +optional
	State    *string `json:"state,omitempty" tf:"state"`
	SubnetID *string `json:"subnetID" tf:"subnet_id"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated"`
}

type GatewayStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// GatewayList is a list of Gateways
type GatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Gateway CRD objects
	Items []Gateway `json:"items,omitempty"`
}
