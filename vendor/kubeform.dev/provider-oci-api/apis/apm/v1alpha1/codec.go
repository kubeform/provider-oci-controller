/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsMonitorSpecConfiguration{}).Type1()):                          SyntheticsMonitorSpecConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsMonitorSpecConfigurationReqAuthenticationDetails{}).Type1()):  SyntheticsMonitorSpecConfigurationReqAuthenticationDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsMonitorSpecScriptParametersMonitorScriptParameter{}).Type1()): SyntheticsMonitorSpecScriptParametersMonitorScriptParameterCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsScriptSpecMonitorStatusCountMap{}).Type1()):                   SyntheticsScriptSpecMonitorStatusCountMapCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsScriptSpecParametersScriptParameter{}).Type1()):               SyntheticsScriptSpecParametersScriptParameterCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsMonitorSpecConfiguration{}).Type1()):                          SyntheticsMonitorSpecConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsMonitorSpecConfigurationReqAuthenticationDetails{}).Type1()):  SyntheticsMonitorSpecConfigurationReqAuthenticationDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsMonitorSpecScriptParametersMonitorScriptParameter{}).Type1()): SyntheticsMonitorSpecScriptParametersMonitorScriptParameterCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsScriptSpecMonitorStatusCountMap{}).Type1()):                   SyntheticsScriptSpecMonitorStatusCountMapCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsScriptSpecParametersScriptParameter{}).Type1()):               SyntheticsScriptSpecParametersScriptParameterCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type SyntheticsMonitorSpecConfigurationCodec struct {
}

func (SyntheticsMonitorSpecConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticsMonitorSpecConfiguration)(ptr) == nil
}

func (SyntheticsMonitorSpecConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticsMonitorSpecConfiguration)(ptr)
	var objs []SyntheticsMonitorSpecConfiguration
	if obj != nil {
		objs = []SyntheticsMonitorSpecConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsMonitorSpecConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticsMonitorSpecConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticsMonitorSpecConfiguration)(ptr) = SyntheticsMonitorSpecConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticsMonitorSpecConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsMonitorSpecConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticsMonitorSpecConfiguration)(ptr) = objs[0]
			} else {
				*(*SyntheticsMonitorSpecConfiguration)(ptr) = SyntheticsMonitorSpecConfiguration{}
			}
		} else {
			*(*SyntheticsMonitorSpecConfiguration)(ptr) = SyntheticsMonitorSpecConfiguration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticsMonitorSpecConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsMonitorSpecConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticsMonitorSpecConfiguration)(ptr) = obj
		} else {
			*(*SyntheticsMonitorSpecConfiguration)(ptr) = SyntheticsMonitorSpecConfiguration{}
		}
	default:
		iter.ReportError("decode SyntheticsMonitorSpecConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SyntheticsMonitorSpecConfigurationReqAuthenticationDetailsCodec struct {
}

func (SyntheticsMonitorSpecConfigurationReqAuthenticationDetailsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticsMonitorSpecConfigurationReqAuthenticationDetails)(ptr) == nil
}

func (SyntheticsMonitorSpecConfigurationReqAuthenticationDetailsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticsMonitorSpecConfigurationReqAuthenticationDetails)(ptr)
	var objs []SyntheticsMonitorSpecConfigurationReqAuthenticationDetails
	if obj != nil {
		objs = []SyntheticsMonitorSpecConfigurationReqAuthenticationDetails{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsMonitorSpecConfigurationReqAuthenticationDetails{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticsMonitorSpecConfigurationReqAuthenticationDetailsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticsMonitorSpecConfigurationReqAuthenticationDetails)(ptr) = SyntheticsMonitorSpecConfigurationReqAuthenticationDetails{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticsMonitorSpecConfigurationReqAuthenticationDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsMonitorSpecConfigurationReqAuthenticationDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticsMonitorSpecConfigurationReqAuthenticationDetails)(ptr) = objs[0]
			} else {
				*(*SyntheticsMonitorSpecConfigurationReqAuthenticationDetails)(ptr) = SyntheticsMonitorSpecConfigurationReqAuthenticationDetails{}
			}
		} else {
			*(*SyntheticsMonitorSpecConfigurationReqAuthenticationDetails)(ptr) = SyntheticsMonitorSpecConfigurationReqAuthenticationDetails{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticsMonitorSpecConfigurationReqAuthenticationDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsMonitorSpecConfigurationReqAuthenticationDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticsMonitorSpecConfigurationReqAuthenticationDetails)(ptr) = obj
		} else {
			*(*SyntheticsMonitorSpecConfigurationReqAuthenticationDetails)(ptr) = SyntheticsMonitorSpecConfigurationReqAuthenticationDetails{}
		}
	default:
		iter.ReportError("decode SyntheticsMonitorSpecConfigurationReqAuthenticationDetails", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SyntheticsMonitorSpecScriptParametersMonitorScriptParameterCodec struct {
}

func (SyntheticsMonitorSpecScriptParametersMonitorScriptParameterCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticsMonitorSpecScriptParametersMonitorScriptParameter)(ptr) == nil
}

func (SyntheticsMonitorSpecScriptParametersMonitorScriptParameterCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticsMonitorSpecScriptParametersMonitorScriptParameter)(ptr)
	var objs []SyntheticsMonitorSpecScriptParametersMonitorScriptParameter
	if obj != nil {
		objs = []SyntheticsMonitorSpecScriptParametersMonitorScriptParameter{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsMonitorSpecScriptParametersMonitorScriptParameter{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticsMonitorSpecScriptParametersMonitorScriptParameterCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticsMonitorSpecScriptParametersMonitorScriptParameter)(ptr) = SyntheticsMonitorSpecScriptParametersMonitorScriptParameter{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticsMonitorSpecScriptParametersMonitorScriptParameter

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsMonitorSpecScriptParametersMonitorScriptParameter{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticsMonitorSpecScriptParametersMonitorScriptParameter)(ptr) = objs[0]
			} else {
				*(*SyntheticsMonitorSpecScriptParametersMonitorScriptParameter)(ptr) = SyntheticsMonitorSpecScriptParametersMonitorScriptParameter{}
			}
		} else {
			*(*SyntheticsMonitorSpecScriptParametersMonitorScriptParameter)(ptr) = SyntheticsMonitorSpecScriptParametersMonitorScriptParameter{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticsMonitorSpecScriptParametersMonitorScriptParameter

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsMonitorSpecScriptParametersMonitorScriptParameter{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticsMonitorSpecScriptParametersMonitorScriptParameter)(ptr) = obj
		} else {
			*(*SyntheticsMonitorSpecScriptParametersMonitorScriptParameter)(ptr) = SyntheticsMonitorSpecScriptParametersMonitorScriptParameter{}
		}
	default:
		iter.ReportError("decode SyntheticsMonitorSpecScriptParametersMonitorScriptParameter", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SyntheticsScriptSpecMonitorStatusCountMapCodec struct {
}

func (SyntheticsScriptSpecMonitorStatusCountMapCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticsScriptSpecMonitorStatusCountMap)(ptr) == nil
}

func (SyntheticsScriptSpecMonitorStatusCountMapCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticsScriptSpecMonitorStatusCountMap)(ptr)
	var objs []SyntheticsScriptSpecMonitorStatusCountMap
	if obj != nil {
		objs = []SyntheticsScriptSpecMonitorStatusCountMap{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsScriptSpecMonitorStatusCountMap{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticsScriptSpecMonitorStatusCountMapCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticsScriptSpecMonitorStatusCountMap)(ptr) = SyntheticsScriptSpecMonitorStatusCountMap{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticsScriptSpecMonitorStatusCountMap

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsScriptSpecMonitorStatusCountMap{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticsScriptSpecMonitorStatusCountMap)(ptr) = objs[0]
			} else {
				*(*SyntheticsScriptSpecMonitorStatusCountMap)(ptr) = SyntheticsScriptSpecMonitorStatusCountMap{}
			}
		} else {
			*(*SyntheticsScriptSpecMonitorStatusCountMap)(ptr) = SyntheticsScriptSpecMonitorStatusCountMap{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticsScriptSpecMonitorStatusCountMap

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsScriptSpecMonitorStatusCountMap{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticsScriptSpecMonitorStatusCountMap)(ptr) = obj
		} else {
			*(*SyntheticsScriptSpecMonitorStatusCountMap)(ptr) = SyntheticsScriptSpecMonitorStatusCountMap{}
		}
	default:
		iter.ReportError("decode SyntheticsScriptSpecMonitorStatusCountMap", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SyntheticsScriptSpecParametersScriptParameterCodec struct {
}

func (SyntheticsScriptSpecParametersScriptParameterCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SyntheticsScriptSpecParametersScriptParameter)(ptr) == nil
}

func (SyntheticsScriptSpecParametersScriptParameterCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SyntheticsScriptSpecParametersScriptParameter)(ptr)
	var objs []SyntheticsScriptSpecParametersScriptParameter
	if obj != nil {
		objs = []SyntheticsScriptSpecParametersScriptParameter{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsScriptSpecParametersScriptParameter{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SyntheticsScriptSpecParametersScriptParameterCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SyntheticsScriptSpecParametersScriptParameter)(ptr) = SyntheticsScriptSpecParametersScriptParameter{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SyntheticsScriptSpecParametersScriptParameter

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsScriptSpecParametersScriptParameter{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SyntheticsScriptSpecParametersScriptParameter)(ptr) = objs[0]
			} else {
				*(*SyntheticsScriptSpecParametersScriptParameter)(ptr) = SyntheticsScriptSpecParametersScriptParameter{}
			}
		} else {
			*(*SyntheticsScriptSpecParametersScriptParameter)(ptr) = SyntheticsScriptSpecParametersScriptParameter{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SyntheticsScriptSpecParametersScriptParameter

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SyntheticsScriptSpecParametersScriptParameter{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SyntheticsScriptSpecParametersScriptParameter)(ptr) = obj
		} else {
			*(*SyntheticsScriptSpecParametersScriptParameter)(ptr) = SyntheticsScriptSpecParametersScriptParameter{}
		}
	default:
		iter.ReportError("decode SyntheticsScriptSpecParametersScriptParameter", "unexpected JSON type")
	}
}
