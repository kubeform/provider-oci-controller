/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ContainerRepository struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ContainerRepositorySpec   `json:"spec,omitempty"`
	Status            ContainerRepositoryStatus `json:"status,omitempty"`
}

type ContainerRepositorySpecReadme struct {
	Content *string `json:"content" tf:"content"`
	Format  *string `json:"format" tf:"format"`
}

type ContainerRepositorySpec struct {
	State *ContainerRepositorySpecResource `json:"state,omitempty" tf:"-"`

	Resource ContainerRepositorySpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ContainerRepositorySpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	BillableSizeInGbs *string `json:"billableSizeInGbs,omitempty" tf:"billable_size_in_gbs"`
	CompartmentID     *string `json:"compartmentID" tf:"compartment_id"`
	// +optional
	CreatedBy   *string `json:"createdBy,omitempty" tf:"created_by"`
	DisplayName *string `json:"displayName" tf:"display_name"`
	// +optional
	ImageCount *int64 `json:"imageCount,omitempty" tf:"image_count"`
	// +optional
	IsImmutable *bool `json:"isImmutable,omitempty" tf:"is_immutable"`
	// +optional
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public"`
	// +optional
	LayerCount *int64 `json:"layerCount,omitempty" tf:"layer_count"`
	// +optional
	LayersSizeInBytes *string `json:"layersSizeInBytes,omitempty" tf:"layers_size_in_bytes"`
	// +optional
	Readme *ContainerRepositorySpecReadme `json:"readme,omitempty" tf:"readme"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeLastPushed *string `json:"timeLastPushed,omitempty" tf:"time_last_pushed"`
}

type ContainerRepositoryStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ContainerRepositoryList is a list of ContainerRepositorys
type ContainerRepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ContainerRepository CRD objects
	Items []ContainerRepository `json:"items,omitempty"`
}
