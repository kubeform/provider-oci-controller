/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(GuardDataMaskRuleSpecTargetSelected{}).Type1()):                                 GuardDataMaskRuleSpecTargetSelectedCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GuardDetectorRecipeSpecDetectorRulesDetails{}).Type1()):                         GuardDetectorRecipeSpecDetectorRulesDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GuardDetectorRecipeSpecEffectiveDetectorRulesDetails{}).Type1()):                GuardDetectorRecipeSpecEffectiveDetectorRulesDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GuardResponderRecipeSpecEffectiveResponderRulesDetails{}).Type1()):              GuardResponderRecipeSpecEffectiveResponderRulesDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GuardResponderRecipeSpecResponderRulesDetails{}).Type1()):                       GuardResponderRecipeSpecResponderRulesDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails{}).Type1()):            GuardTargetSpecTargetDetectorRecipesDetectorRulesDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails{}).Type1()):   GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails{}).Type1()): GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GuardTargetSpecTargetResponderRecipesResponderRulesDetails{}).Type1()):          GuardTargetSpecTargetResponderRecipesResponderRulesDetailsCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(GuardDataMaskRuleSpecTargetSelected{}).Type1()):                                 GuardDataMaskRuleSpecTargetSelectedCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GuardDetectorRecipeSpecDetectorRulesDetails{}).Type1()):                         GuardDetectorRecipeSpecDetectorRulesDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GuardDetectorRecipeSpecEffectiveDetectorRulesDetails{}).Type1()):                GuardDetectorRecipeSpecEffectiveDetectorRulesDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GuardResponderRecipeSpecEffectiveResponderRulesDetails{}).Type1()):              GuardResponderRecipeSpecEffectiveResponderRulesDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GuardResponderRecipeSpecResponderRulesDetails{}).Type1()):                       GuardResponderRecipeSpecResponderRulesDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails{}).Type1()):            GuardTargetSpecTargetDetectorRecipesDetectorRulesDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails{}).Type1()):   GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails{}).Type1()): GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GuardTargetSpecTargetResponderRecipesResponderRulesDetails{}).Type1()):          GuardTargetSpecTargetResponderRecipesResponderRulesDetailsCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type GuardDataMaskRuleSpecTargetSelectedCodec struct {
}

func (GuardDataMaskRuleSpecTargetSelectedCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GuardDataMaskRuleSpecTargetSelected)(ptr) == nil
}

func (GuardDataMaskRuleSpecTargetSelectedCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GuardDataMaskRuleSpecTargetSelected)(ptr)
	var objs []GuardDataMaskRuleSpecTargetSelected
	if obj != nil {
		objs = []GuardDataMaskRuleSpecTargetSelected{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardDataMaskRuleSpecTargetSelected{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GuardDataMaskRuleSpecTargetSelectedCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GuardDataMaskRuleSpecTargetSelected)(ptr) = GuardDataMaskRuleSpecTargetSelected{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GuardDataMaskRuleSpecTargetSelected

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardDataMaskRuleSpecTargetSelected{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GuardDataMaskRuleSpecTargetSelected)(ptr) = objs[0]
			} else {
				*(*GuardDataMaskRuleSpecTargetSelected)(ptr) = GuardDataMaskRuleSpecTargetSelected{}
			}
		} else {
			*(*GuardDataMaskRuleSpecTargetSelected)(ptr) = GuardDataMaskRuleSpecTargetSelected{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GuardDataMaskRuleSpecTargetSelected

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardDataMaskRuleSpecTargetSelected{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GuardDataMaskRuleSpecTargetSelected)(ptr) = obj
		} else {
			*(*GuardDataMaskRuleSpecTargetSelected)(ptr) = GuardDataMaskRuleSpecTargetSelected{}
		}
	default:
		iter.ReportError("decode GuardDataMaskRuleSpecTargetSelected", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GuardDetectorRecipeSpecDetectorRulesDetailsCodec struct {
}

func (GuardDetectorRecipeSpecDetectorRulesDetailsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GuardDetectorRecipeSpecDetectorRulesDetails)(ptr) == nil
}

func (GuardDetectorRecipeSpecDetectorRulesDetailsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GuardDetectorRecipeSpecDetectorRulesDetails)(ptr)
	var objs []GuardDetectorRecipeSpecDetectorRulesDetails
	if obj != nil {
		objs = []GuardDetectorRecipeSpecDetectorRulesDetails{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardDetectorRecipeSpecDetectorRulesDetails{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GuardDetectorRecipeSpecDetectorRulesDetailsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GuardDetectorRecipeSpecDetectorRulesDetails)(ptr) = GuardDetectorRecipeSpecDetectorRulesDetails{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GuardDetectorRecipeSpecDetectorRulesDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardDetectorRecipeSpecDetectorRulesDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GuardDetectorRecipeSpecDetectorRulesDetails)(ptr) = objs[0]
			} else {
				*(*GuardDetectorRecipeSpecDetectorRulesDetails)(ptr) = GuardDetectorRecipeSpecDetectorRulesDetails{}
			}
		} else {
			*(*GuardDetectorRecipeSpecDetectorRulesDetails)(ptr) = GuardDetectorRecipeSpecDetectorRulesDetails{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GuardDetectorRecipeSpecDetectorRulesDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardDetectorRecipeSpecDetectorRulesDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GuardDetectorRecipeSpecDetectorRulesDetails)(ptr) = obj
		} else {
			*(*GuardDetectorRecipeSpecDetectorRulesDetails)(ptr) = GuardDetectorRecipeSpecDetectorRulesDetails{}
		}
	default:
		iter.ReportError("decode GuardDetectorRecipeSpecDetectorRulesDetails", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GuardDetectorRecipeSpecEffectiveDetectorRulesDetailsCodec struct {
}

func (GuardDetectorRecipeSpecEffectiveDetectorRulesDetailsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GuardDetectorRecipeSpecEffectiveDetectorRulesDetails)(ptr) == nil
}

func (GuardDetectorRecipeSpecEffectiveDetectorRulesDetailsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GuardDetectorRecipeSpecEffectiveDetectorRulesDetails)(ptr)
	var objs []GuardDetectorRecipeSpecEffectiveDetectorRulesDetails
	if obj != nil {
		objs = []GuardDetectorRecipeSpecEffectiveDetectorRulesDetails{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardDetectorRecipeSpecEffectiveDetectorRulesDetails{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GuardDetectorRecipeSpecEffectiveDetectorRulesDetailsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GuardDetectorRecipeSpecEffectiveDetectorRulesDetails)(ptr) = GuardDetectorRecipeSpecEffectiveDetectorRulesDetails{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GuardDetectorRecipeSpecEffectiveDetectorRulesDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardDetectorRecipeSpecEffectiveDetectorRulesDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GuardDetectorRecipeSpecEffectiveDetectorRulesDetails)(ptr) = objs[0]
			} else {
				*(*GuardDetectorRecipeSpecEffectiveDetectorRulesDetails)(ptr) = GuardDetectorRecipeSpecEffectiveDetectorRulesDetails{}
			}
		} else {
			*(*GuardDetectorRecipeSpecEffectiveDetectorRulesDetails)(ptr) = GuardDetectorRecipeSpecEffectiveDetectorRulesDetails{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GuardDetectorRecipeSpecEffectiveDetectorRulesDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardDetectorRecipeSpecEffectiveDetectorRulesDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GuardDetectorRecipeSpecEffectiveDetectorRulesDetails)(ptr) = obj
		} else {
			*(*GuardDetectorRecipeSpecEffectiveDetectorRulesDetails)(ptr) = GuardDetectorRecipeSpecEffectiveDetectorRulesDetails{}
		}
	default:
		iter.ReportError("decode GuardDetectorRecipeSpecEffectiveDetectorRulesDetails", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GuardResponderRecipeSpecEffectiveResponderRulesDetailsCodec struct {
}

func (GuardResponderRecipeSpecEffectiveResponderRulesDetailsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GuardResponderRecipeSpecEffectiveResponderRulesDetails)(ptr) == nil
}

func (GuardResponderRecipeSpecEffectiveResponderRulesDetailsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GuardResponderRecipeSpecEffectiveResponderRulesDetails)(ptr)
	var objs []GuardResponderRecipeSpecEffectiveResponderRulesDetails
	if obj != nil {
		objs = []GuardResponderRecipeSpecEffectiveResponderRulesDetails{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardResponderRecipeSpecEffectiveResponderRulesDetails{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GuardResponderRecipeSpecEffectiveResponderRulesDetailsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GuardResponderRecipeSpecEffectiveResponderRulesDetails)(ptr) = GuardResponderRecipeSpecEffectiveResponderRulesDetails{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GuardResponderRecipeSpecEffectiveResponderRulesDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardResponderRecipeSpecEffectiveResponderRulesDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GuardResponderRecipeSpecEffectiveResponderRulesDetails)(ptr) = objs[0]
			} else {
				*(*GuardResponderRecipeSpecEffectiveResponderRulesDetails)(ptr) = GuardResponderRecipeSpecEffectiveResponderRulesDetails{}
			}
		} else {
			*(*GuardResponderRecipeSpecEffectiveResponderRulesDetails)(ptr) = GuardResponderRecipeSpecEffectiveResponderRulesDetails{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GuardResponderRecipeSpecEffectiveResponderRulesDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardResponderRecipeSpecEffectiveResponderRulesDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GuardResponderRecipeSpecEffectiveResponderRulesDetails)(ptr) = obj
		} else {
			*(*GuardResponderRecipeSpecEffectiveResponderRulesDetails)(ptr) = GuardResponderRecipeSpecEffectiveResponderRulesDetails{}
		}
	default:
		iter.ReportError("decode GuardResponderRecipeSpecEffectiveResponderRulesDetails", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GuardResponderRecipeSpecResponderRulesDetailsCodec struct {
}

func (GuardResponderRecipeSpecResponderRulesDetailsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GuardResponderRecipeSpecResponderRulesDetails)(ptr) == nil
}

func (GuardResponderRecipeSpecResponderRulesDetailsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GuardResponderRecipeSpecResponderRulesDetails)(ptr)
	var objs []GuardResponderRecipeSpecResponderRulesDetails
	if obj != nil {
		objs = []GuardResponderRecipeSpecResponderRulesDetails{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardResponderRecipeSpecResponderRulesDetails{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GuardResponderRecipeSpecResponderRulesDetailsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GuardResponderRecipeSpecResponderRulesDetails)(ptr) = GuardResponderRecipeSpecResponderRulesDetails{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GuardResponderRecipeSpecResponderRulesDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardResponderRecipeSpecResponderRulesDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GuardResponderRecipeSpecResponderRulesDetails)(ptr) = objs[0]
			} else {
				*(*GuardResponderRecipeSpecResponderRulesDetails)(ptr) = GuardResponderRecipeSpecResponderRulesDetails{}
			}
		} else {
			*(*GuardResponderRecipeSpecResponderRulesDetails)(ptr) = GuardResponderRecipeSpecResponderRulesDetails{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GuardResponderRecipeSpecResponderRulesDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardResponderRecipeSpecResponderRulesDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GuardResponderRecipeSpecResponderRulesDetails)(ptr) = obj
		} else {
			*(*GuardResponderRecipeSpecResponderRulesDetails)(ptr) = GuardResponderRecipeSpecResponderRulesDetails{}
		}
	default:
		iter.ReportError("decode GuardResponderRecipeSpecResponderRulesDetails", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GuardTargetSpecTargetDetectorRecipesDetectorRulesDetailsCodec struct {
}

func (GuardTargetSpecTargetDetectorRecipesDetectorRulesDetailsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails)(ptr) == nil
}

func (GuardTargetSpecTargetDetectorRecipesDetectorRulesDetailsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails)(ptr)
	var objs []GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails
	if obj != nil {
		objs = []GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GuardTargetSpecTargetDetectorRecipesDetectorRulesDetailsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails)(ptr) = GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails)(ptr) = objs[0]
			} else {
				*(*GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails)(ptr) = GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails{}
			}
		} else {
			*(*GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails)(ptr) = GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails)(ptr) = obj
		} else {
			*(*GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails)(ptr) = GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails{}
		}
	default:
		iter.ReportError("decode GuardTargetSpecTargetDetectorRecipesDetectorRulesDetails", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetailsCodec struct {
}

func (GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetailsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails)(ptr) == nil
}

func (GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetailsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails)(ptr)
	var objs []GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails
	if obj != nil {
		objs = []GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetailsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails)(ptr) = GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails)(ptr) = objs[0]
			} else {
				*(*GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails)(ptr) = GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails{}
			}
		} else {
			*(*GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails)(ptr) = GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails)(ptr) = obj
		} else {
			*(*GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails)(ptr) = GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails{}
		}
	default:
		iter.ReportError("decode GuardTargetSpecTargetDetectorRecipesEffectiveDetectorRulesDetails", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetailsCodec struct {
}

func (GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetailsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails)(ptr) == nil
}

func (GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetailsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails)(ptr)
	var objs []GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails
	if obj != nil {
		objs = []GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetailsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails)(ptr) = GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails)(ptr) = objs[0]
			} else {
				*(*GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails)(ptr) = GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails{}
			}
		} else {
			*(*GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails)(ptr) = GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails)(ptr) = obj
		} else {
			*(*GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails)(ptr) = GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails{}
		}
	default:
		iter.ReportError("decode GuardTargetSpecTargetResponderRecipesEffectiveResponderRulesDetails", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GuardTargetSpecTargetResponderRecipesResponderRulesDetailsCodec struct {
}

func (GuardTargetSpecTargetResponderRecipesResponderRulesDetailsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GuardTargetSpecTargetResponderRecipesResponderRulesDetails)(ptr) == nil
}

func (GuardTargetSpecTargetResponderRecipesResponderRulesDetailsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GuardTargetSpecTargetResponderRecipesResponderRulesDetails)(ptr)
	var objs []GuardTargetSpecTargetResponderRecipesResponderRulesDetails
	if obj != nil {
		objs = []GuardTargetSpecTargetResponderRecipesResponderRulesDetails{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardTargetSpecTargetResponderRecipesResponderRulesDetails{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GuardTargetSpecTargetResponderRecipesResponderRulesDetailsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GuardTargetSpecTargetResponderRecipesResponderRulesDetails)(ptr) = GuardTargetSpecTargetResponderRecipesResponderRulesDetails{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GuardTargetSpecTargetResponderRecipesResponderRulesDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardTargetSpecTargetResponderRecipesResponderRulesDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GuardTargetSpecTargetResponderRecipesResponderRulesDetails)(ptr) = objs[0]
			} else {
				*(*GuardTargetSpecTargetResponderRecipesResponderRulesDetails)(ptr) = GuardTargetSpecTargetResponderRecipesResponderRulesDetails{}
			}
		} else {
			*(*GuardTargetSpecTargetResponderRecipesResponderRulesDetails)(ptr) = GuardTargetSpecTargetResponderRecipesResponderRulesDetails{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GuardTargetSpecTargetResponderRecipesResponderRulesDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GuardTargetSpecTargetResponderRecipesResponderRulesDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GuardTargetSpecTargetResponderRecipesResponderRulesDetails)(ptr) = obj
		} else {
			*(*GuardTargetSpecTargetResponderRecipesResponderRulesDetails)(ptr) = GuardTargetSpecTargetResponderRecipesResponderRulesDetails{}
		}
	default:
		iter.ReportError("decode GuardTargetSpecTargetResponderRecipesResponderRulesDetails", "unexpected JSON type")
	}
}
