/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type GuardDetectorRecipe struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GuardDetectorRecipeSpec   `json:"spec,omitempty"`
	Status            GuardDetectorRecipeStatus `json:"status,omitempty"`
}

type GuardDetectorRecipeSpecDetectorRulesCandidateResponderRules struct {
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	IsPreferred *bool `json:"isPreferred,omitempty" tf:"is_preferred"`
}

type GuardDetectorRecipeSpecDetectorRulesDetailsConfigurationsValues struct {
	ListType        *string `json:"listType" tf:"list_type"`
	ManagedListType *string `json:"managedListType" tf:"managed_list_type"`
	Value           *string `json:"value" tf:"value"`
}

type GuardDetectorRecipeSpecDetectorRulesDetailsConfigurations struct {
	ConfigKey *string `json:"configKey" tf:"config_key"`
	// +optional
	DataType *string `json:"dataType,omitempty" tf:"data_type"`
	Name     *string `json:"name" tf:"name"`
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
	// +optional
	Values []GuardDetectorRecipeSpecDetectorRulesDetailsConfigurationsValues `json:"values,omitempty" tf:"values"`
}

type GuardDetectorRecipeSpecDetectorRulesDetails struct {
	// +optional
	Condition *string `json:"condition,omitempty" tf:"condition"`
	// +optional
	Configurations []GuardDetectorRecipeSpecDetectorRulesDetailsConfigurations `json:"configurations,omitempty" tf:"configurations"`
	// +optional
	IsConfigurationAllowed *bool `json:"isConfigurationAllowed,omitempty" tf:"is_configuration_allowed"`
	IsEnabled              *bool `json:"isEnabled" tf:"is_enabled"`
	// +optional
	Labels    []string `json:"labels,omitempty" tf:"labels"`
	RiskLevel *string  `json:"riskLevel" tf:"risk_level"`
}

type GuardDetectorRecipeSpecDetectorRules struct {
	// +optional
	CandidateResponderRules []GuardDetectorRecipeSpecDetectorRulesCandidateResponderRules `json:"candidateResponderRules,omitempty" tf:"candidate_responder_rules"`
	// +optional
	Description *string                                      `json:"description,omitempty" tf:"description"`
	Details     *GuardDetectorRecipeSpecDetectorRulesDetails `json:"details" tf:"details"`
	// +optional
	Detector       *string `json:"detector,omitempty" tf:"detector"`
	DetectorRuleID *string `json:"detectorRuleID" tf:"detector_rule_id"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	// +optional
	ManagedListTypes []string `json:"managedListTypes,omitempty" tf:"managed_list_types"`
	// +optional
	Recommendation *string `json:"recommendation,omitempty" tf:"recommendation"`
	// +optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type"`
	// +optional
	ServiceType *string `json:"serviceType,omitempty" tf:"service_type"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated"`
}

type GuardDetectorRecipeSpecEffectiveDetectorRulesCandidateResponderRules struct {
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	IsPreferred *bool `json:"isPreferred,omitempty" tf:"is_preferred"`
}

type GuardDetectorRecipeSpecEffectiveDetectorRulesDetailsConfigurationsValues struct {
	// +optional
	ListType *string `json:"listType,omitempty" tf:"list_type"`
	// +optional
	ManagedListType *string `json:"managedListType,omitempty" tf:"managed_list_type"`
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type GuardDetectorRecipeSpecEffectiveDetectorRulesDetailsConfigurations struct {
	// +optional
	ConfigKey *string `json:"configKey,omitempty" tf:"config_key"`
	// +optional
	DataType *string `json:"dataType,omitempty" tf:"data_type"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
	// +optional
	Values []GuardDetectorRecipeSpecEffectiveDetectorRulesDetailsConfigurationsValues `json:"values,omitempty" tf:"values"`
}

type GuardDetectorRecipeSpecEffectiveDetectorRulesDetails struct {
	// +optional
	Condition *string `json:"condition,omitempty" tf:"condition"`
	// +optional
	Configurations []GuardDetectorRecipeSpecEffectiveDetectorRulesDetailsConfigurations `json:"configurations,omitempty" tf:"configurations"`
	// +optional
	IsConfigurationAllowed *bool `json:"isConfigurationAllowed,omitempty" tf:"is_configuration_allowed"`
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// +optional
	Labels []string `json:"labels,omitempty" tf:"labels"`
	// +optional
	RiskLevel *string `json:"riskLevel,omitempty" tf:"risk_level"`
}

type GuardDetectorRecipeSpecEffectiveDetectorRules struct {
	// +optional
	CandidateResponderRules []GuardDetectorRecipeSpecEffectiveDetectorRulesCandidateResponderRules `json:"candidateResponderRules,omitempty" tf:"candidate_responder_rules"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	Details *GuardDetectorRecipeSpecEffectiveDetectorRulesDetails `json:"details,omitempty" tf:"details"`
	// +optional
	Detector *string `json:"detector,omitempty" tf:"detector"`
	// +optional
	DetectorRuleID *string `json:"detectorRuleID,omitempty" tf:"detector_rule_id"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	// +optional
	ManagedListTypes []string `json:"managedListTypes,omitempty" tf:"managed_list_types"`
	// +optional
	Recommendation *string `json:"recommendation,omitempty" tf:"recommendation"`
	// +optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type"`
	// +optional
	ServiceType *string `json:"serviceType,omitempty" tf:"service_type"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated"`
}

type GuardDetectorRecipeSpec struct {
	State *GuardDetectorRecipeSpecResource `json:"state,omitempty" tf:"-"`

	Resource GuardDetectorRecipeSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type GuardDetectorRecipeSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	CompartmentID *string `json:"compartmentID" tf:"compartment_id"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	Detector *string `json:"detector,omitempty" tf:"detector"`
	// +optional
	DetectorRules []GuardDetectorRecipeSpecDetectorRules `json:"detectorRules,omitempty" tf:"detector_rules"`
	DisplayName   *string                                `json:"displayName" tf:"display_name"`
	// +optional
	EffectiveDetectorRules []GuardDetectorRecipeSpecEffectiveDetectorRules `json:"effectiveDetectorRules,omitempty" tf:"effective_detector_rules"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	Owner                  *string `json:"owner,omitempty" tf:"owner"`
	SourceDetectorRecipeID *string `json:"sourceDetectorRecipeID" tf:"source_detector_recipe_id"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	SystemTags map[string]string `json:"systemTags,omitempty" tf:"system_tags"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated"`
}

type GuardDetectorRecipeStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// GuardDetectorRecipeList is a list of GuardDetectorRecipes
type GuardDetectorRecipeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of GuardDetectorRecipe CRD objects
	Items []GuardDetectorRecipe `json:"items,omitempty"`
}
