/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type GuardResponderRecipe struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GuardResponderRecipeSpec   `json:"spec,omitempty"`
	Status            GuardResponderRecipeStatus `json:"status,omitempty"`
}

type GuardResponderRecipeSpecEffectiveResponderRulesDetailsConfigurations struct {
	// +optional
	ConfigKey *string `json:"configKey,omitempty" tf:"config_key"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type GuardResponderRecipeSpecEffectiveResponderRulesDetails struct {
	// +optional
	Condition *string `json:"condition,omitempty" tf:"condition"`
	// +optional
	Configurations []GuardResponderRecipeSpecEffectiveResponderRulesDetailsConfigurations `json:"configurations,omitempty" tf:"configurations"`
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// +optional
	Mode *string `json:"mode,omitempty" tf:"mode"`
}

type GuardResponderRecipeSpecEffectiveResponderRules struct {
	// +optional
	CompartmentID *string `json:"compartmentID,omitempty" tf:"compartment_id"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	Details *GuardResponderRecipeSpecEffectiveResponderRulesDetails `json:"details,omitempty" tf:"details"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	// +optional
	Policies []string `json:"policies,omitempty" tf:"policies"`
	// +optional
	ResponderRuleID *string `json:"responderRuleID,omitempty" tf:"responder_rule_id"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	SupportedModes []string `json:"supportedModes,omitempty" tf:"supported_modes"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type GuardResponderRecipeSpecResponderRulesDetailsConfigurations struct {
	// +optional
	ConfigKey *string `json:"configKey,omitempty" tf:"config_key"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type GuardResponderRecipeSpecResponderRulesDetails struct {
	// +optional
	Condition *string `json:"condition,omitempty" tf:"condition"`
	// +optional
	Configurations []GuardResponderRecipeSpecResponderRulesDetailsConfigurations `json:"configurations,omitempty" tf:"configurations"`
	IsEnabled      *bool                                                         `json:"isEnabled" tf:"is_enabled"`
	// +optional
	Mode *string `json:"mode,omitempty" tf:"mode"`
}

type GuardResponderRecipeSpecResponderRules struct {
	// +optional
	CompartmentID *string `json:"compartmentID,omitempty" tf:"compartment_id"`
	// +optional
	Description *string                                        `json:"description,omitempty" tf:"description"`
	Details     *GuardResponderRecipeSpecResponderRulesDetails `json:"details" tf:"details"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	// +optional
	Policies        []string `json:"policies,omitempty" tf:"policies"`
	ResponderRuleID *string  `json:"responderRuleID" tf:"responder_rule_id"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	SupportedModes []string `json:"supportedModes,omitempty" tf:"supported_modes"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type GuardResponderRecipeSpec struct {
	State *GuardResponderRecipeSpecResource `json:"state,omitempty" tf:"-"`

	Resource GuardResponderRecipeSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type GuardResponderRecipeSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	CompartmentID *string `json:"compartmentID" tf:"compartment_id"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	DisplayName *string `json:"displayName" tf:"display_name"`
	// +optional
	EffectiveResponderRules []GuardResponderRecipeSpecEffectiveResponderRules `json:"effectiveResponderRules,omitempty" tf:"effective_responder_rules"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	// +optional
	Owner *string `json:"owner,omitempty" tf:"owner"`
	// +optional
	ResponderRules          []GuardResponderRecipeSpecResponderRules `json:"responderRules,omitempty" tf:"responder_rules"`
	SourceResponderRecipeID *string                                  `json:"sourceResponderRecipeID" tf:"source_responder_recipe_id"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	SystemTags map[string]string `json:"systemTags,omitempty" tf:"system_tags"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated"`
}

type GuardResponderRecipeStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// GuardResponderRecipeList is a list of GuardResponderRecipes
type GuardResponderRecipeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of GuardResponderRecipe CRD objects
	Items []GuardResponderRecipe `json:"items,omitempty"`
}
