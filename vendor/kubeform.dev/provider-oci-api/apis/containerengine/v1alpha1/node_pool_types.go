/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type NodePool struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NodePoolSpec   `json:"spec,omitempty"`
	Status            NodePoolStatus `json:"status,omitempty"`
}

type NodePoolSpecInitialNodeLabels struct {
	// +optional
	Key *string `json:"key,omitempty" tf:"key"`
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type NodePoolSpecNodeConfigDetailsPlacementConfigs struct {
	AvailabilityDomain *string `json:"availabilityDomain" tf:"availability_domain"`
	SubnetID           *string `json:"subnetID" tf:"subnet_id"`
}

type NodePoolSpecNodeConfigDetails struct {
	// +optional
	NsgIDS           []string                                        `json:"nsgIDS,omitempty" tf:"nsg_ids"`
	PlacementConfigs []NodePoolSpecNodeConfigDetailsPlacementConfigs `json:"placementConfigs" tf:"placement_configs"`
	Size             *int64                                          `json:"size" tf:"size"`
}

type NodePoolSpecNodeShapeConfig struct {
	// +optional
	MemoryInGbs *float64 `json:"memoryInGbs,omitempty" tf:"memory_in_gbs"`
	// +optional
	Ocpus *float64 `json:"ocpus,omitempty" tf:"ocpus"`
}

type NodePoolSpecNodeSource struct {
	// +optional
	ImageID *string `json:"imageID,omitempty" tf:"image_id"`
	// +optional
	SourceName *string `json:"sourceName,omitempty" tf:"source_name"`
	// +optional
	SourceType *string `json:"sourceType,omitempty" tf:"source_type"`
}

type NodePoolSpecNodeSourceDetails struct {
	// +optional
	BootVolumeSizeInGbs *string `json:"bootVolumeSizeInGbs,omitempty" tf:"boot_volume_size_in_gbs"`
	ImageID             *string `json:"imageID" tf:"image_id"`
	SourceType          *string `json:"sourceType" tf:"source_type"`
}

type NodePoolSpecNodesError struct {
	// +optional
	Code *string `json:"code,omitempty" tf:"code"`
	// +optional
	Message *string `json:"message,omitempty" tf:"message"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
}

type NodePoolSpecNodes struct {
	// +optional
	AvailabilityDomain *string `json:"availabilityDomain,omitempty" tf:"availability_domain"`
	// +optional
	Error *NodePoolSpecNodesError `json:"error,omitempty" tf:"error"`
	// +optional
	FaultDomain *string `json:"faultDomain,omitempty" tf:"fault_domain"`
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	KubernetesVersion *string `json:"kubernetesVersion,omitempty" tf:"kubernetes_version"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	NodePoolID *string `json:"nodePoolID,omitempty" tf:"node_pool_id"`
	// +optional
	PrivateIP *string `json:"privateIP,omitempty" tf:"private_ip"`
	// +optional
	PublicIP *string `json:"publicIP,omitempty" tf:"public_ip"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	SubnetID *string `json:"subnetID,omitempty" tf:"subnet_id"`
}

type NodePoolSpec struct {
	State *NodePoolSpecResource `json:"state,omitempty" tf:"-"`

	Resource NodePoolSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type NodePoolSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	ClusterID     *string `json:"clusterID" tf:"cluster_id"`
	CompartmentID *string `json:"compartmentID" tf:"compartment_id"`
	// +optional
	InitialNodeLabels []NodePoolSpecInitialNodeLabels `json:"initialNodeLabels,omitempty" tf:"initial_node_labels"`
	KubernetesVersion *string                         `json:"kubernetesVersion" tf:"kubernetes_version"`
	Name              *string                         `json:"name" tf:"name"`
	// +optional
	NodeConfigDetails *NodePoolSpecNodeConfigDetails `json:"nodeConfigDetails,omitempty" tf:"node_config_details"`
	// +optional
	// Deprecated
	NodeImageID *string `json:"nodeImageID,omitempty" tf:"node_image_id"`
	// +optional
	// Deprecated
	NodeImageName *string `json:"nodeImageName,omitempty" tf:"node_image_name"`
	// +optional
	NodeMetadata map[string]string `json:"nodeMetadata,omitempty" tf:"node_metadata"`
	NodeShape    *string           `json:"nodeShape" tf:"node_shape"`
	// +optional
	NodeShapeConfig *NodePoolSpecNodeShapeConfig `json:"nodeShapeConfig,omitempty" tf:"node_shape_config"`
	// +optional
	NodeSource *NodePoolSpecNodeSource `json:"nodeSource,omitempty" tf:"node_source"`
	// +optional
	NodeSourceDetails *NodePoolSpecNodeSourceDetails `json:"nodeSourceDetails,omitempty" tf:"node_source_details"`
	// +optional
	Nodes []NodePoolSpecNodes `json:"nodes,omitempty" tf:"nodes"`
	// +optional
	QuantityPerSubnet *int64 `json:"quantityPerSubnet,omitempty" tf:"quantity_per_subnet"`
	// +optional
	SshPublicKey *string `json:"sshPublicKey,omitempty" tf:"ssh_public_key"`
	// +optional
	SubnetIDS []string `json:"subnetIDS,omitempty" tf:"subnet_ids"`
}

type NodePoolStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// NodePoolList is a list of NodePools
type NodePoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of NodePool CRD objects
	Items []NodePool `json:"items,omitempty"`
}
