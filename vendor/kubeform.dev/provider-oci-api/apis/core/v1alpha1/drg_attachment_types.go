/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DrgAttachment struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DrgAttachmentSpec   `json:"spec,omitempty"`
	Status            DrgAttachmentStatus `json:"status,omitempty"`
}

type DrgAttachmentSpecNetworkDetails struct {
	ID *string `json:"ID" tf:"id"`
	// +optional
	IpsecConnectionID *string `json:"ipsecConnectionID,omitempty" tf:"ipsec_connection_id"`
	// +optional
	RouteTableID *string `json:"routeTableID,omitempty" tf:"route_table_id"`
	Type         *string `json:"type" tf:"type"`
}

type DrgAttachmentSpec struct {
	State *DrgAttachmentSpecResource `json:"state,omitempty" tf:"-"`

	Resource DrgAttachmentSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type DrgAttachmentSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	CompartmentID *string `json:"compartmentID,omitempty" tf:"compartment_id"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	DrgID       *string `json:"drgID" tf:"drg_id"`
	// +optional
	DrgRouteTableID *string `json:"drgRouteTableID,omitempty" tf:"drg_route_table_id"`
	// +optional
	ExportDrgRouteDistributionID *string `json:"exportDrgRouteDistributionID,omitempty" tf:"export_drg_route_distribution_id"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	IsCrossTenancy *bool `json:"isCrossTenancy,omitempty" tf:"is_cross_tenancy"`
	// +optional
	NetworkDetails *DrgAttachmentSpecNetworkDetails `json:"networkDetails,omitempty" tf:"network_details"`
	// +optional
	RemoveExportDrgRouteDistributionTrigger *bool `json:"removeExportDrgRouteDistributionTrigger,omitempty" tf:"remove_export_drg_route_distribution_trigger"`
	// +optional
	RouteTableID *string `json:"routeTableID,omitempty" tf:"route_table_id"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	VcnID *string `json:"vcnID,omitempty" tf:"vcn_id"`
}

type DrgAttachmentStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DrgAttachmentList is a list of DrgAttachments
type DrgAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DrgAttachment CRD objects
	Items []DrgAttachment `json:"items,omitempty"`
}
