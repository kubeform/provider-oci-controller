/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Image struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ImageSpec   `json:"spec,omitempty"`
	Status            ImageStatus `json:"status,omitempty"`
}

type ImageSpecAgentFeatures struct {
	// +optional
	IsManagementSupported *bool `json:"isManagementSupported,omitempty" tf:"is_management_supported"`
	// +optional
	IsMonitoringSupported *bool `json:"isMonitoringSupported,omitempty" tf:"is_monitoring_supported"`
}

type ImageSpecImageSourceDetails struct {
	// +optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name"`
	// +optional
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name"`
	// +optional
	ObjectName *string `json:"objectName,omitempty" tf:"object_name"`
	// +optional
	OperatingSystem *string `json:"operatingSystem,omitempty" tf:"operating_system"`
	// +optional
	OperatingSystemVersion *string `json:"operatingSystemVersion,omitempty" tf:"operating_system_version"`
	// +optional
	SourceImageType *string `json:"sourceImageType,omitempty" tf:"source_image_type"`
	SourceType      *string `json:"sourceType" tf:"source_type"`
	// +optional
	SourceURI *string `json:"sourceURI,omitempty" tf:"source_uri"`
}

type ImageSpecLaunchOptions struct {
	// +optional
	BootVolumeType *string `json:"bootVolumeType,omitempty" tf:"boot_volume_type"`
	// +optional
	Firmware *string `json:"firmware,omitempty" tf:"firmware"`
	// +optional
	IsConsistentVolumeNamingEnabled *bool `json:"isConsistentVolumeNamingEnabled,omitempty" tf:"is_consistent_volume_naming_enabled"`
	// +optional
	IsPvEncryptionInTransitEnabled *bool `json:"isPvEncryptionInTransitEnabled,omitempty" tf:"is_pv_encryption_in_transit_enabled"`
	// +optional
	NetworkType *string `json:"networkType,omitempty" tf:"network_type"`
	// +optional
	RemoteDataVolumeType *string `json:"remoteDataVolumeType,omitempty" tf:"remote_data_volume_type"`
}

type ImageSpec struct {
	State *ImageSpecResource `json:"state,omitempty" tf:"-"`

	Resource ImageSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ImageSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AgentFeatures *ImageSpecAgentFeatures `json:"agentFeatures,omitempty" tf:"agent_features"`
	// +optional
	BaseImageID *string `json:"baseImageID,omitempty" tf:"base_image_id"`
	// +optional
	BillableSizeInGbs *string `json:"billableSizeInGbs,omitempty" tf:"billable_size_in_gbs"`
	CompartmentID     *string `json:"compartmentID" tf:"compartment_id"`
	// +optional
	CreateImageAllowed *bool `json:"createImageAllowed,omitempty" tf:"create_image_allowed"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	ImageSourceDetails *ImageSpecImageSourceDetails `json:"imageSourceDetails,omitempty" tf:"image_source_details"`
	// +optional
	InstanceID *string `json:"instanceID,omitempty" tf:"instance_id"`
	// +optional
	LaunchMode *string `json:"launchMode,omitempty" tf:"launch_mode"`
	// +optional
	LaunchOptions *ImageSpecLaunchOptions `json:"launchOptions,omitempty" tf:"launch_options"`
	// +optional
	ListingType *string `json:"listingType,omitempty" tf:"listing_type"`
	// +optional
	OperatingSystem *string `json:"operatingSystem,omitempty" tf:"operating_system"`
	// +optional
	OperatingSystemVersion *string `json:"operatingSystemVersion,omitempty" tf:"operating_system_version"`
	// +optional
	SizeInMbs *string `json:"sizeInMbs,omitempty" tf:"size_in_mbs"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
}

type ImageStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ImageList is a list of Images
type ImageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Image CRD objects
	Items []Image `json:"items,omitempty"`
}
