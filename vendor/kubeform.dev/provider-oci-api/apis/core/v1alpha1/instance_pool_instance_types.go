/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type InstancePoolInstance struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstancePoolInstanceSpec   `json:"spec,omitempty"`
	Status            InstancePoolInstanceStatus `json:"status,omitempty"`
}

type InstancePoolInstanceSpecLoadBalancerBackends struct {
	// +optional
	BackendHealthStatus *string `json:"backendHealthStatus,omitempty" tf:"backend_health_status"`
	// +optional
	BackendName *string `json:"backendName,omitempty" tf:"backend_name"`
	// +optional
	BackendSetName *string `json:"backendSetName,omitempty" tf:"backend_set_name"`
	// +optional
	LoadBalancerID *string `json:"loadBalancerID,omitempty" tf:"load_balancer_id"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
}

type InstancePoolInstanceSpec struct {
	State *InstancePoolInstanceSpecResource `json:"state,omitempty" tf:"-"`

	Resource InstancePoolInstanceSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type InstancePoolInstanceSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AutoTerminateInstanceOnDelete *bool `json:"autoTerminateInstanceOnDelete,omitempty" tf:"auto_terminate_instance_on_delete"`
	// +optional
	AvailabilityDomain *string `json:"availabilityDomain,omitempty" tf:"availability_domain"`
	// +optional
	CompartmentID *string `json:"compartmentID,omitempty" tf:"compartment_id"`
	// +optional
	DecrementSizeOnDelete *bool `json:"decrementSizeOnDelete,omitempty" tf:"decrement_size_on_delete"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	FaultDomain *string `json:"faultDomain,omitempty" tf:"fault_domain"`
	// +optional
	InstanceConfigurationID *string `json:"instanceConfigurationID,omitempty" tf:"instance_configuration_id"`
	InstanceID              *string `json:"instanceID" tf:"instance_id"`
	InstancePoolID          *string `json:"instancePoolID" tf:"instance_pool_id"`
	// +optional
	LoadBalancerBackends []InstancePoolInstanceSpecLoadBalancerBackends `json:"loadBalancerBackends,omitempty" tf:"load_balancer_backends"`
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// +optional
	Shape *string `json:"shape,omitempty" tf:"shape"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
}

type InstancePoolInstanceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// InstancePoolInstanceList is a list of InstancePoolInstances
type InstancePoolInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of InstancePoolInstance CRD objects
	Items []InstancePoolInstance `json:"items,omitempty"`
}
