/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type AutonomousDatabaseBackup struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AutonomousDatabaseBackupSpec   `json:"spec,omitempty"`
	Status            AutonomousDatabaseBackupStatus `json:"status,omitempty"`
}

type AutonomousDatabaseBackupSpec struct {
	State *AutonomousDatabaseBackupSpecResource `json:"state,omitempty" tf:"-"`

	Resource AutonomousDatabaseBackupSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type AutonomousDatabaseBackupSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	AutonomousDatabaseID *string `json:"autonomousDatabaseID" tf:"autonomous_database_id"`
	// +optional
	CompartmentID *string `json:"compartmentID,omitempty" tf:"compartment_id"`
	// +optional
	DatabaseSizeInTbs *float64 `json:"databaseSizeInTbs,omitempty" tf:"database_size_in_tbs"`
	DisplayName       *string  `json:"displayName" tf:"display_name"`
	// +optional
	IsAutomatic *bool `json:"isAutomatic,omitempty" tf:"is_automatic"`
	// +optional
	IsRestorable *bool `json:"isRestorable,omitempty" tf:"is_restorable"`
	// +optional
	KeyStoreID *string `json:"keyStoreID,omitempty" tf:"key_store_id"`
	// +optional
	KeyStoreWalletName *string `json:"keyStoreWalletName,omitempty" tf:"key_store_wallet_name"`
	// +optional
	KmsKeyID *string `json:"kmsKeyID,omitempty" tf:"kms_key_id"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeEnded *string `json:"timeEnded,omitempty" tf:"time_ended"`
	// +optional
	TimeStarted *string `json:"timeStarted,omitempty" tf:"time_started"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// +optional
	VaultID *string `json:"vaultID,omitempty" tf:"vault_id"`
}

type AutonomousDatabaseBackupStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AutonomousDatabaseBackupList is a list of AutonomousDatabaseBackups
type AutonomousDatabaseBackupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of AutonomousDatabaseBackup CRD objects
	Items []AutonomousDatabaseBackup `json:"items,omitempty"`
}
