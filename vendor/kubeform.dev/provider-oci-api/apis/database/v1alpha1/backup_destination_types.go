/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type BackupDestination struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BackupDestinationSpec   `json:"spec,omitempty"`
	Status            BackupDestinationStatus `json:"status,omitempty"`
}

type BackupDestinationSpecAssociatedDatabases struct {
	// +optional
	DbName *string `json:"dbName,omitempty" tf:"db_name"`
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
}

type BackupDestinationSpecMountTypeDetails struct {
	// +optional
	LocalMountPointPath *string `json:"localMountPointPath,omitempty" tf:"local_mount_point_path"`
	MountType           *string `json:"mountType" tf:"mount_type"`
	// +optional
	NfsServer []string `json:"nfsServer,omitempty" tf:"nfs_server"`
	// +optional
	NfsServerExport *string `json:"nfsServerExport,omitempty" tf:"nfs_server_export"`
}

type BackupDestinationSpec struct {
	State *BackupDestinationSpecResource `json:"state,omitempty" tf:"-"`

	Resource BackupDestinationSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type BackupDestinationSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AssociatedDatabases []BackupDestinationSpecAssociatedDatabases `json:"associatedDatabases,omitempty" tf:"associated_databases"`
	CompartmentID       *string                                    `json:"compartmentID" tf:"compartment_id"`
	// +optional
	ConnectionString *string `json:"connectionString,omitempty" tf:"connection_string"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	DisplayName *string           `json:"displayName" tf:"display_name"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	// +optional
	// Deprecated
	LocalMountPointPath *string `json:"localMountPointPath,omitempty" tf:"local_mount_point_path"`
	// +optional
	MountTypeDetails *BackupDestinationSpecMountTypeDetails `json:"mountTypeDetails,omitempty" tf:"mount_type_details"`
	// +optional
	NfsMountType *string `json:"nfsMountType,omitempty" tf:"nfs_mount_type"`
	// +optional
	NfsServer []string `json:"nfsServer,omitempty" tf:"nfs_server"`
	// +optional
	NfsServerExport *string `json:"nfsServerExport,omitempty" tf:"nfs_server_export"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	Type        *string `json:"type" tf:"type"`
	// +optional
	VpcUsers []string `json:"vpcUsers,omitempty" tf:"vpc_users"`
}

type BackupDestinationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// BackupDestinationList is a list of BackupDestinations
type BackupDestinationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of BackupDestination CRD objects
	Items []BackupDestination `json:"items,omitempty"`
}
