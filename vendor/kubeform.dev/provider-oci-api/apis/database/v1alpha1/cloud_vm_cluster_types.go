/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type CloudVmCluster struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudVmClusterSpec   `json:"spec,omitempty"`
	Status            CloudVmClusterStatus `json:"status,omitempty"`
}

type CloudVmClusterSpecIormConfigCacheDbPlans struct {
	// +optional
	DbName *string `json:"dbName,omitempty" tf:"db_name"`
	// +optional
	FlashCacheLimit *string `json:"flashCacheLimit,omitempty" tf:"flash_cache_limit"`
	// +optional
	Share *int64 `json:"share,omitempty" tf:"share"`
}

type CloudVmClusterSpecIormConfigCache struct {
	// +optional
	DbPlans []CloudVmClusterSpecIormConfigCacheDbPlans `json:"dbPlans,omitempty" tf:"db_plans"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	// +optional
	Objective *string `json:"objective,omitempty" tf:"objective"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
}

type CloudVmClusterSpec struct {
	State *CloudVmClusterSpecResource `json:"state,omitempty" tf:"-"`

	Resource CloudVmClusterSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type CloudVmClusterSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AvailabilityDomain *string `json:"availabilityDomain,omitempty" tf:"availability_domain"`
	// +optional
	BackupNetworkNsgIDS          []string `json:"backupNetworkNsgIDS,omitempty" tf:"backup_network_nsg_ids"`
	BackupSubnetID               *string  `json:"backupSubnetID" tf:"backup_subnet_id"`
	CloudExadataInfrastructureID *string  `json:"cloudExadataInfrastructureID" tf:"cloud_exadata_infrastructure_id"`
	// +optional
	ClusterName   *string `json:"clusterName,omitempty" tf:"cluster_name"`
	CompartmentID *string `json:"compartmentID" tf:"compartment_id"`
	CpuCoreCount  *int64  `json:"cpuCoreCount" tf:"cpu_core_count"`
	// +optional
	CreateAsync *bool `json:"createAsync,omitempty" tf:"create_async"`
	// +optional
	DataStoragePercentage *int64 `json:"dataStoragePercentage,omitempty" tf:"data_storage_percentage"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	DiskRedundancy *string `json:"diskRedundancy,omitempty" tf:"disk_redundancy"`
	DisplayName    *string `json:"displayName" tf:"display_name"`
	// +optional
	Domain *string `json:"domain,omitempty" tf:"domain"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	GiVersion    *string           `json:"giVersion" tf:"gi_version"`
	Hostname     *string           `json:"hostname" tf:"hostname"`
	// +optional
	IormConfigCache *CloudVmClusterSpecIormConfigCache `json:"iormConfigCache,omitempty" tf:"iorm_config_cache"`
	// +optional
	IsLocalBackupEnabled *bool `json:"isLocalBackupEnabled,omitempty" tf:"is_local_backup_enabled"`
	// +optional
	IsSparseDiskgroupEnabled *bool `json:"isSparseDiskgroupEnabled,omitempty" tf:"is_sparse_diskgroup_enabled"`
	// +optional
	LastUpdateHistoryEntryID *string `json:"lastUpdateHistoryEntryID,omitempty" tf:"last_update_history_entry_id"`
	// +optional
	LicenseModel *string `json:"licenseModel,omitempty" tf:"license_model"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	// +optional
	ListenerPort *string `json:"listenerPort,omitempty" tf:"listener_port"`
	// +optional
	NodeCount *int64 `json:"nodeCount,omitempty" tf:"node_count"`
	// +optional
	NsgIDS []string `json:"nsgIDS,omitempty" tf:"nsg_ids"`
	// +optional
	ScanDNSName *string `json:"scanDNSName,omitempty" tf:"scan_dns_name"`
	// +optional
	ScanDNSRecordID *string `json:"scanDNSRecordID,omitempty" tf:"scan_dns_record_id"`
	// +optional
	ScanIPIDS []string `json:"scanIPIDS,omitempty" tf:"scan_ip_ids"`
	// +optional
	Shape         *string  `json:"shape,omitempty" tf:"shape"`
	SshPublicKeys []string `json:"sshPublicKeys" tf:"ssh_public_keys"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	StorageSizeInGbs *int64  `json:"storageSizeInGbs,omitempty" tf:"storage_size_in_gbs"`
	SubnetID         *string `json:"subnetID" tf:"subnet_id"`
	// +optional
	SystemVersion *string `json:"systemVersion,omitempty" tf:"system_version"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone"`
	// +optional
	VipIDS []string `json:"vipIDS,omitempty" tf:"vip_ids"`
	// +optional
	ZoneID *string `json:"zoneID,omitempty" tf:"zone_id"`
}

type CloudVmClusterStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// CloudVmClusterList is a list of CloudVmClusters
type CloudVmClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of CloudVmCluster CRD objects
	Items []CloudVmCluster `json:"items,omitempty"`
}
