/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DatabaseSoftwareImage struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseSoftwareImageSpec   `json:"spec,omitempty"`
	Status            DatabaseSoftwareImageStatus `json:"status,omitempty"`
}

type DatabaseSoftwareImageSpec struct {
	State *DatabaseSoftwareImageSpecResource `json:"state,omitempty" tf:"-"`

	Resource DatabaseSoftwareImageSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type DatabaseSoftwareImageSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	CompartmentID *string `json:"compartmentID" tf:"compartment_id"`
	// +optional
	DatabaseSoftwareImageIncludedPatches []string `json:"databaseSoftwareImageIncludedPatches,omitempty" tf:"database_software_image_included_patches"`
	// +optional
	DatabaseSoftwareImageOneOffPatches []string `json:"databaseSoftwareImageOneOffPatches,omitempty" tf:"database_software_image_one_off_patches"`
	// +optional
	DatabaseVersion *string `json:"databaseVersion,omitempty" tf:"database_version"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	DisplayName *string           `json:"displayName" tf:"display_name"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	ImageShapeFamily *string `json:"imageShapeFamily,omitempty" tf:"image_shape_family"`
	// +optional
	ImageType *string `json:"imageType,omitempty" tf:"image_type"`
	// +optional
	IncludedPatchesSummary *string `json:"includedPatchesSummary,omitempty" tf:"included_patches_summary"`
	// +optional
	IsUpgradeSupported *bool `json:"isUpgradeSupported,omitempty" tf:"is_upgrade_supported"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	// +optional
	LsInventory *string `json:"lsInventory,omitempty" tf:"ls_inventory"`
	// +optional
	PatchSet *string `json:"patchSet,omitempty" tf:"patch_set"`
	// +optional
	SourceDbHomeID *string `json:"sourceDbHomeID,omitempty" tf:"source_db_home_id"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
}

type DatabaseSoftwareImageStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DatabaseSoftwareImageList is a list of DatabaseSoftwareImages
type DatabaseSoftwareImageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DatabaseSoftwareImage CRD objects
	Items []DatabaseSoftwareImage `json:"items,omitempty"`
}
