/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Database struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseSpec   `json:"spec,omitempty"`
	Status            DatabaseStatus `json:"status,omitempty"`
}

type DatabaseSpecConnectionStrings struct {
	// +optional
	AllConnectionStrings map[string]string `json:"allConnectionStrings,omitempty" tf:"all_connection_strings"`
	// +optional
	CdbDefault *string `json:"cdbDefault,omitempty" tf:"cdb_default"`
	// +optional
	CdbIPDefault *string `json:"cdbIPDefault,omitempty" tf:"cdb_ip_default"`
}

type DatabaseSpecDatabaseDbBackupConfigBackupDestinationDetails struct {
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// +optional
	VpcUser *string `json:"vpcUser,omitempty" tf:"vpc_user"`
}

type DatabaseSpecDatabaseDbBackupConfig struct {
	// +optional
	AutoBackupEnabled *bool `json:"autoBackupEnabled,omitempty" tf:"auto_backup_enabled"`
	// +optional
	AutoBackupWindow *string `json:"autoBackupWindow,omitempty" tf:"auto_backup_window"`
	// +optional
	BackupDestinationDetails []DatabaseSpecDatabaseDbBackupConfigBackupDestinationDetails `json:"backupDestinationDetails,omitempty" tf:"backup_destination_details"`
	// +optional
	RecoveryWindowInDays *int64 `json:"recoveryWindowInDays,omitempty" tf:"recovery_window_in_days"`
}

type DatabaseSpecDatabase struct {
	AdminPassword *string `json:"-" sensitive:"true" tf:"admin_password"`
	// +optional
	BackupID *string `json:"backupID,omitempty" tf:"backup_id"`
	// +optional
	BackupTdePassword *string `json:"-" sensitive:"true" tf:"backup_tde_password"`
	// +optional
	CharacterSet *string `json:"characterSet,omitempty" tf:"character_set"`
	// +optional
	DatabaseSoftwareImageID *string `json:"databaseSoftwareImageID,omitempty" tf:"database_software_image_id"`
	// +optional
	DbBackupConfig *DatabaseSpecDatabaseDbBackupConfig `json:"dbBackupConfig,omitempty" tf:"db_backup_config"`
	DbName         *string                             `json:"dbName" tf:"db_name"`
	// +optional
	DbUniqueName *string `json:"dbUniqueName,omitempty" tf:"db_unique_name"`
	// +optional
	DbWorkload *string `json:"dbWorkload,omitempty" tf:"db_workload"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	NcharacterSet *string `json:"ncharacterSet,omitempty" tf:"ncharacter_set"`
	// +optional
	PdbName *string `json:"pdbName,omitempty" tf:"pdb_name"`
	// +optional
	SidPrefix *string `json:"sidPrefix,omitempty" tf:"sid_prefix"`
	// +optional
	TdeWalletPassword *string `json:"-" sensitive:"true" tf:"tde_wallet_password"`
}

type DatabaseSpecDatabaseManagementConfig struct {
	// +optional
	ManagementStatus *string `json:"managementStatus,omitempty" tf:"management_status"`
	// +optional
	ManagementType *string `json:"managementType,omitempty" tf:"management_type"`
}

type DatabaseSpecDbBackupConfigBackupDestinationDetails struct {
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// +optional
	VpcUser *string `json:"vpcUser,omitempty" tf:"vpc_user"`
}

type DatabaseSpecDbBackupConfig struct {
	// +optional
	AutoBackupEnabled *bool `json:"autoBackupEnabled,omitempty" tf:"auto_backup_enabled"`
	// +optional
	AutoBackupWindow *string `json:"autoBackupWindow,omitempty" tf:"auto_backup_window"`
	// +optional
	BackupDestinationDetails []DatabaseSpecDbBackupConfigBackupDestinationDetails `json:"backupDestinationDetails,omitempty" tf:"backup_destination_details"`
	// +optional
	RecoveryWindowInDays *int64 `json:"recoveryWindowInDays,omitempty" tf:"recovery_window_in_days"`
}

type DatabaseSpec struct {
	State *DatabaseSpecResource `json:"state,omitempty" tf:"-"`

	Resource DatabaseSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type DatabaseSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	CharacterSet *string `json:"characterSet,omitempty" tf:"character_set"`
	// +optional
	CompartmentID *string `json:"compartmentID,omitempty" tf:"compartment_id"`
	// +optional
	ConnectionStrings *DatabaseSpecConnectionStrings `json:"connectionStrings,omitempty" tf:"connection_strings"`
	Database          *DatabaseSpecDatabase          `json:"database" tf:"database"`
	// +optional
	DatabaseManagementConfig *DatabaseSpecDatabaseManagementConfig `json:"databaseManagementConfig,omitempty" tf:"database_management_config"`
	// +optional
	DatabaseSoftwareImageID *string `json:"databaseSoftwareImageID,omitempty" tf:"database_software_image_id"`
	// +optional
	DbBackupConfig *DatabaseSpecDbBackupConfig `json:"dbBackupConfig,omitempty" tf:"db_backup_config"`
	DbHomeID       *string                     `json:"dbHomeID" tf:"db_home_id"`
	// +optional
	DbName *string `json:"dbName,omitempty" tf:"db_name"`
	// +optional
	DbSystemID *string `json:"dbSystemID,omitempty" tf:"db_system_id"`
	// +optional
	DbUniqueName *string `json:"dbUniqueName,omitempty" tf:"db_unique_name"`
	// +optional
	DbVersion *string `json:"dbVersion,omitempty" tf:"db_version"`
	// +optional
	DbWorkload *string `json:"dbWorkload,omitempty" tf:"db_workload"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	IsCdb *bool `json:"isCdb,omitempty" tf:"is_cdb"`
	// +optional
	KmsKeyID *string `json:"kmsKeyID,omitempty" tf:"kms_key_id"`
	// +optional
	KmsKeyMigration *bool `json:"kmsKeyMigration,omitempty" tf:"kms_key_migration"`
	// +optional
	KmsKeyRotation *int64 `json:"kmsKeyRotation,omitempty" tf:"kms_key_rotation"`
	// +optional
	KmsKeyVersionID *string `json:"kmsKeyVersionID,omitempty" tf:"kms_key_version_id"`
	// +optional
	LastBackupTimestamp *string `json:"lastBackupTimestamp,omitempty" tf:"last_backup_timestamp"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	// +optional
	NcharacterSet *string `json:"ncharacterSet,omitempty" tf:"ncharacter_set"`
	// +optional
	PdbName *string `json:"pdbName,omitempty" tf:"pdb_name"`
	// +optional
	SidPrefix *string `json:"sidPrefix,omitempty" tf:"sid_prefix"`
	Source    *string `json:"source" tf:"source"`
	// +optional
	SourceDatabasePointInTimeRecoveryTimestamp *string `json:"sourceDatabasePointInTimeRecoveryTimestamp,omitempty" tf:"source_database_point_in_time_recovery_timestamp"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	VmClusterID *string `json:"vmClusterID,omitempty" tf:"vm_cluster_id"`
}

type DatabaseStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DatabaseList is a list of Databases
type DatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Database CRD objects
	Items []Database `json:"items,omitempty"`
}
