/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type KeyStore struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeyStoreSpec   `json:"spec,omitempty"`
	Status            KeyStoreStatus `json:"status,omitempty"`
}

type KeyStoreSpecAssociatedDatabases struct {
	// +optional
	DbName *string `json:"dbName,omitempty" tf:"db_name"`
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
}

type KeyStoreSpecTypeDetails struct {
	AdminUsername *string  `json:"adminUsername" tf:"admin_username"`
	ConnectionIPS []string `json:"connectionIPS" tf:"connection_ips"`
	SecretID      *string  `json:"secretID" tf:"secret_id"`
	Type          *string  `json:"type" tf:"type"`
	VaultID       *string  `json:"vaultID" tf:"vault_id"`
}

type KeyStoreSpec struct {
	State *KeyStoreSpecResource `json:"state,omitempty" tf:"-"`

	Resource KeyStoreSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type KeyStoreSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AssociatedDatabases []KeyStoreSpecAssociatedDatabases `json:"associatedDatabases,omitempty" tf:"associated_databases"`
	CompartmentID       *string                           `json:"compartmentID" tf:"compartment_id"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	DisplayName *string           `json:"displayName" tf:"display_name"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string                  `json:"timeCreated,omitempty" tf:"time_created"`
	TypeDetails *KeyStoreSpecTypeDetails `json:"typeDetails" tf:"type_details"`
}

type KeyStoreStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// KeyStoreList is a list of KeyStores
type KeyStoreList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of KeyStore CRD objects
	Items []KeyStore `json:"items,omitempty"`
}
