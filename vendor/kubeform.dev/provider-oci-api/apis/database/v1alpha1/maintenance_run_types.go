/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type MaintenanceRun struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MaintenanceRunSpec   `json:"spec,omitempty"`
	Status            MaintenanceRunStatus `json:"status,omitempty"`
}

type MaintenanceRunSpecEstimatedPatchingTime struct {
	// +optional
	EstimatedDbServerPatchingTime *int64 `json:"estimatedDbServerPatchingTime,omitempty" tf:"estimated_db_server_patching_time"`
	// +optional
	EstimatedNetworkSwitchesPatchingTime *int64 `json:"estimatedNetworkSwitchesPatchingTime,omitempty" tf:"estimated_network_switches_patching_time"`
	// +optional
	EstimatedStorageServerPatchingTime *int64 `json:"estimatedStorageServerPatchingTime,omitempty" tf:"estimated_storage_server_patching_time"`
	// +optional
	TotalEstimatedPatchingTime *int64 `json:"totalEstimatedPatchingTime,omitempty" tf:"total_estimated_patching_time"`
}

type MaintenanceRunSpec struct {
	State *MaintenanceRunSpecResource `json:"state,omitempty" tf:"-"`

	Resource MaintenanceRunSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type MaintenanceRunSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	CompartmentID *string `json:"compartmentID,omitempty" tf:"compartment_id"`
	// +optional
	CurrentCustomActionTimeoutInMins *int64 `json:"currentCustomActionTimeoutInMins,omitempty" tf:"current_custom_action_timeout_in_mins"`
	// +optional
	CurrentPatchingComponent *string `json:"currentPatchingComponent,omitempty" tf:"current_patching_component"`
	// +optional
	CustomActionTimeoutInMins *int64 `json:"customActionTimeoutInMins,omitempty" tf:"custom_action_timeout_in_mins"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	EstimatedComponentPatchingStartTime *string `json:"estimatedComponentPatchingStartTime,omitempty" tf:"estimated_component_patching_start_time"`
	// +optional
	EstimatedPatchingTime *MaintenanceRunSpecEstimatedPatchingTime `json:"estimatedPatchingTime,omitempty" tf:"estimated_patching_time"`
	// +optional
	IsCustomActionTimeoutEnabled *bool `json:"isCustomActionTimeoutEnabled,omitempty" tf:"is_custom_action_timeout_enabled"`
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// +optional
	IsPatchNowEnabled *bool `json:"isPatchNowEnabled,omitempty" tf:"is_patch_now_enabled"`
	// +optional
	IsResumePatching *bool `json:"isResumePatching,omitempty" tf:"is_resume_patching"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	MaintenanceRunID *string `json:"maintenanceRunID" tf:"maintenance_run_id"`
	// +optional
	MaintenanceSubtype *string `json:"maintenanceSubtype,omitempty" tf:"maintenance_subtype"`
	// +optional
	MaintenanceType *string `json:"maintenanceType,omitempty" tf:"maintenance_type"`
	// +optional
	PatchFailureCount *int64 `json:"patchFailureCount,omitempty" tf:"patch_failure_count"`
	// +optional
	PatchID *string `json:"patchID,omitempty" tf:"patch_id"`
	// +optional
	PatchingEndTime *string `json:"patchingEndTime,omitempty" tf:"patching_end_time"`
	// +optional
	PatchingMode *string `json:"patchingMode,omitempty" tf:"patching_mode"`
	// +optional
	PatchingStartTime *string `json:"patchingStartTime,omitempty" tf:"patching_start_time"`
	// +optional
	PatchingStatus *string `json:"patchingStatus,omitempty" tf:"patching_status"`
	// +optional
	PeerMaintenanceRunID *string `json:"peerMaintenanceRunID,omitempty" tf:"peer_maintenance_run_id"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TargetDbServerVersion *string `json:"targetDbServerVersion,omitempty" tf:"target_db_server_version"`
	// +optional
	TargetResourceID *string `json:"targetResourceID,omitempty" tf:"target_resource_id"`
	// +optional
	TargetResourceType *string `json:"targetResourceType,omitempty" tf:"target_resource_type"`
	// +optional
	TargetStorageServerVersion *string `json:"targetStorageServerVersion,omitempty" tf:"target_storage_server_version"`
	// +optional
	TimeEnded *string `json:"timeEnded,omitempty" tf:"time_ended"`
	// +optional
	TimeScheduled *string `json:"timeScheduled,omitempty" tf:"time_scheduled"`
	// +optional
	TimeStarted *string `json:"timeStarted,omitempty" tf:"time_started"`
}

type MaintenanceRunStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// MaintenanceRunList is a list of MaintenanceRuns
type MaintenanceRunList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of MaintenanceRun CRD objects
	Items []MaintenanceRun `json:"items,omitempty"`
}
