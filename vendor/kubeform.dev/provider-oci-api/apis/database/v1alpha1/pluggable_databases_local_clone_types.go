/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type PluggableDatabasesLocalClone struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PluggableDatabasesLocalCloneSpec   `json:"spec,omitempty"`
	Status            PluggableDatabasesLocalCloneStatus `json:"status,omitempty"`
}

type PluggableDatabasesLocalCloneSpecConnectionStrings struct {
	// +optional
	AllConnectionStrings map[string]string `json:"allConnectionStrings,omitempty" tf:"all_connection_strings"`
	// +optional
	PdbDefault *string `json:"pdbDefault,omitempty" tf:"pdb_default"`
	// +optional
	PdbIPDefault *string `json:"pdbIPDefault,omitempty" tf:"pdb_ip_default"`
}

type PluggableDatabasesLocalCloneSpec struct {
	State *PluggableDatabasesLocalCloneSpecResource `json:"state,omitempty" tf:"-"`

	Resource PluggableDatabasesLocalCloneSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type PluggableDatabasesLocalCloneSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	ClonedPdbName *string `json:"clonedPdbName" tf:"cloned_pdb_name"`
	// +optional
	CompartmentID *string `json:"compartmentID,omitempty" tf:"compartment_id"`
	// +optional
	ConnectionStrings *PluggableDatabasesLocalCloneSpecConnectionStrings `json:"connectionStrings,omitempty" tf:"connection_strings"`
	// +optional
	ContainerDatabaseID *string `json:"containerDatabaseID,omitempty" tf:"container_database_id"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	IsRestricted *bool `json:"isRestricted,omitempty" tf:"is_restricted"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	// +optional
	OpenMode *string `json:"openMode,omitempty" tf:"open_mode"`
	// +optional
	PdbAdminPassword *string `json:"-" sensitive:"true" tf:"pdb_admin_password"`
	// +optional
	PdbName             *string `json:"pdbName,omitempty" tf:"pdb_name"`
	PluggableDatabaseID *string `json:"pluggableDatabaseID" tf:"pluggable_database_id"`
	// +optional
	ShouldPdbAdminAccountBeLocked *bool `json:"shouldPdbAdminAccountBeLocked,omitempty" tf:"should_pdb_admin_account_be_locked"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TargetTdeWalletPassword *string `json:"-" sensitive:"true" tf:"target_tde_wallet_password"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
}

type PluggableDatabasesLocalCloneStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// PluggableDatabasesLocalCloneList is a list of PluggableDatabasesLocalClones
type PluggableDatabasesLocalCloneList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of PluggableDatabasesLocalClone CRD objects
	Items []PluggableDatabasesLocalClone `json:"items,omitempty"`
}
