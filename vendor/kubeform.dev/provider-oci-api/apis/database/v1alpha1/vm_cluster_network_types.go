/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type VmClusterNetwork struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VmClusterNetworkSpec   `json:"spec,omitempty"`
	Status            VmClusterNetworkStatus `json:"status,omitempty"`
}

type VmClusterNetworkSpecScans struct {
	Hostname *string  `json:"hostname" tf:"hostname"`
	Ips      []string `json:"ips" tf:"ips"`
	Port     *int64   `json:"port" tf:"port"`
	// +optional
	ScanListenerPortTcp *int64 `json:"scanListenerPortTcp,omitempty" tf:"scan_listener_port_tcp"`
	// +optional
	ScanListenerPortTcpSsl *int64 `json:"scanListenerPortTcpSsl,omitempty" tf:"scan_listener_port_tcp_ssl"`
}

type VmClusterNetworkSpecVmNetworksNodes struct {
	Hostname *string `json:"hostname" tf:"hostname"`
	Ip       *string `json:"ip" tf:"ip"`
	// +optional
	Vip *string `json:"vip,omitempty" tf:"vip"`
	// +optional
	VipHostname *string `json:"vipHostname,omitempty" tf:"vip_hostname"`
}

type VmClusterNetworkSpecVmNetworks struct {
	DomainName  *string                               `json:"domainName" tf:"domain_name"`
	Gateway     *string                               `json:"gateway" tf:"gateway"`
	Netmask     *string                               `json:"netmask" tf:"netmask"`
	NetworkType *string                               `json:"networkType" tf:"network_type"`
	Nodes       []VmClusterNetworkSpecVmNetworksNodes `json:"nodes" tf:"nodes"`
	VlanID      *string                               `json:"vlanID" tf:"vlan_id"`
}

type VmClusterNetworkSpec struct {
	State *VmClusterNetworkSpecResource `json:"state,omitempty" tf:"-"`

	Resource VmClusterNetworkSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type VmClusterNetworkSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	CompartmentID *string `json:"compartmentID" tf:"compartment_id"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	DisplayName *string           `json:"displayName" tf:"display_name"`
	// +optional
	Dns                     []string `json:"dns,omitempty" tf:"dns"`
	ExadataInfrastructureID *string  `json:"exadataInfrastructureID" tf:"exadata_infrastructure_id"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	// +optional
	Ntp   []string                    `json:"ntp,omitempty" tf:"ntp"`
	Scans []VmClusterNetworkSpecScans `json:"scans" tf:"scans"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	ValidateVmClusterNetwork *bool `json:"validateVmClusterNetwork,omitempty" tf:"validate_vm_cluster_network"`
	// +optional
	VmClusterID *string                          `json:"vmClusterID,omitempty" tf:"vm_cluster_id"`
	VmNetworks  []VmClusterNetworkSpecVmNetworks `json:"vmNetworks" tf:"vm_networks"`
}

type VmClusterNetworkStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// VmClusterNetworkList is a list of VmClusterNetworks
type VmClusterNetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of VmClusterNetwork CRD objects
	Items []VmClusterNetwork `json:"items,omitempty"`
}
