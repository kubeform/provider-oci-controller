/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Application struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApplicationSpec   `json:"spec,omitempty"`
	Status            ApplicationStatus `json:"status,omitempty"`
}

type ApplicationSpecParameters struct {
	Name  *string `json:"name" tf:"name"`
	Value *string `json:"value" tf:"value"`
}

type ApplicationSpec struct {
	State *ApplicationSpecResource `json:"state,omitempty" tf:"-"`

	Resource ApplicationSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type ApplicationSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	ArchiveURI *string `json:"archiveURI,omitempty" tf:"archive_uri"`
	// +optional
	Arguments []string `json:"arguments,omitempty" tf:"arguments"`
	// +optional
	ClassName     *string `json:"className,omitempty" tf:"class_name"`
	CompartmentID *string `json:"compartmentID" tf:"compartment_id"`
	// +optional
	Configuration map[string]string `json:"configuration,omitempty" tf:"configuration"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	DisplayName *string `json:"displayName" tf:"display_name"`
	DriverShape *string `json:"driverShape" tf:"driver_shape"`
	// +optional
	Execute       *string `json:"execute,omitempty" tf:"execute"`
	ExecutorShape *string `json:"executorShape" tf:"executor_shape"`
	FileURI       *string `json:"fileURI" tf:"file_uri"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	Language     *string           `json:"language" tf:"language"`
	// +optional
	LogsBucketURI *string `json:"logsBucketURI,omitempty" tf:"logs_bucket_uri"`
	NumExecutors  *int64  `json:"numExecutors" tf:"num_executors"`
	// +optional
	OwnerPrincipalID *string `json:"ownerPrincipalID,omitempty" tf:"owner_principal_id"`
	// +optional
	OwnerUserName *string `json:"ownerUserName,omitempty" tf:"owner_user_name"`
	// +optional
	Parameters []ApplicationSpecParameters `json:"parameters,omitempty" tf:"parameters"`
	// +optional
	PrivateEndpointID *string `json:"privateEndpointID,omitempty" tf:"private_endpoint_id"`
	SparkVersion      *string `json:"sparkVersion" tf:"spark_version"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated"`
	// +optional
	WarehouseBucketURI *string `json:"warehouseBucketURI,omitempty" tf:"warehouse_bucket_uri"`
}

type ApplicationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ApplicationList is a list of Applications
type ApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Application CRD objects
	Items []Application `json:"items,omitempty"`
}
