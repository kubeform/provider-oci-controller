/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ModelDeployment struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ModelDeploymentSpec   `json:"spec,omitempty"`
	Status            ModelDeploymentStatus `json:"status,omitempty"`
}

type ModelDeploymentSpecCategoryLogDetailsAccess struct {
	LogGroupID *string `json:"logGroupID" tf:"log_group_id"`
	LogID      *string `json:"logID" tf:"log_id"`
}

type ModelDeploymentSpecCategoryLogDetailsPredict struct {
	LogGroupID *string `json:"logGroupID" tf:"log_group_id"`
	LogID      *string `json:"logID" tf:"log_id"`
}

type ModelDeploymentSpecCategoryLogDetails struct {
	// +optional
	Access *ModelDeploymentSpecCategoryLogDetailsAccess `json:"access,omitempty" tf:"access"`
	// +optional
	Predict *ModelDeploymentSpecCategoryLogDetailsPredict `json:"predict,omitempty" tf:"predict"`
}

type ModelDeploymentSpecModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration struct {
	InstanceShapeName *string `json:"instanceShapeName" tf:"instance_shape_name"`
}

type ModelDeploymentSpecModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy struct {
	InstanceCount *int64  `json:"instanceCount" tf:"instance_count"`
	PolicyType    *string `json:"policyType" tf:"policy_type"`
}

type ModelDeploymentSpecModelDeploymentConfigurationDetailsModelConfigurationDetails struct {
	// +optional
	BandwidthMbps         *int64                                                                                                `json:"bandwidthMbps,omitempty" tf:"bandwidth_mbps"`
	InstanceConfiguration *ModelDeploymentSpecModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration `json:"instanceConfiguration" tf:"instance_configuration"`
	ModelID               *string                                                                                               `json:"modelID" tf:"model_id"`
	// +optional
	ScalingPolicy *ModelDeploymentSpecModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy `json:"scalingPolicy,omitempty" tf:"scaling_policy"`
}

type ModelDeploymentSpecModelDeploymentConfigurationDetails struct {
	DeploymentType            *string                                                                          `json:"deploymentType" tf:"deployment_type"`
	ModelConfigurationDetails *ModelDeploymentSpecModelDeploymentConfigurationDetailsModelConfigurationDetails `json:"modelConfigurationDetails" tf:"model_configuration_details"`
}

type ModelDeploymentSpec struct {
	State *ModelDeploymentSpecResource `json:"state,omitempty" tf:"-"`

	Resource ModelDeploymentSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ModelDeploymentSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	CategoryLogDetails *ModelDeploymentSpecCategoryLogDetails `json:"categoryLogDetails,omitempty" tf:"category_log_details"`
	CompartmentID      *string                                `json:"compartmentID" tf:"compartment_id"`
	// +optional
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	LifecycleDetails                    *string                                                 `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	ModelDeploymentConfigurationDetails *ModelDeploymentSpecModelDeploymentConfigurationDetails `json:"modelDeploymentConfigurationDetails" tf:"model_deployment_configuration_details"`
	// +optional
	ModelDeploymentURL *string `json:"modelDeploymentURL,omitempty" tf:"model_deployment_url"`
	ProjectID          *string `json:"projectID" tf:"project_id"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
}

type ModelDeploymentStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ModelDeploymentList is a list of ModelDeployments
type ModelDeploymentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ModelDeployment CRD objects
	Items []ModelDeployment `json:"items,omitempty"`
}
