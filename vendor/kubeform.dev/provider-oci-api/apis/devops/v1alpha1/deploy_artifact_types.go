/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DeployArtifact struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeployArtifactSpec   `json:"spec,omitempty"`
	Status            DeployArtifactStatus `json:"status,omitempty"`
}

type DeployArtifactSpecDeployArtifactSource struct {
	// +optional
	Base64encodedContent *string `json:"base64encodedContent,omitempty" tf:"base64encoded_content"`
	// +optional
	DeployArtifactPath       *string `json:"deployArtifactPath,omitempty" tf:"deploy_artifact_path"`
	DeployArtifactSourceType *string `json:"deployArtifactSourceType" tf:"deploy_artifact_source_type"`
	// +optional
	DeployArtifactVersion *string `json:"deployArtifactVersion,omitempty" tf:"deploy_artifact_version"`
	// +optional
	ImageDigest *string `json:"imageDigest,omitempty" tf:"image_digest"`
	// +optional
	ImageURI *string `json:"imageURI,omitempty" tf:"image_uri"`
	// +optional
	RepositoryID *string `json:"repositoryID,omitempty" tf:"repository_id"`
}

type DeployArtifactSpec struct {
	State *DeployArtifactSpecResource `json:"state,omitempty" tf:"-"`

	Resource DeployArtifactSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type DeployArtifactSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	ArgumentSubstitutionMode *string `json:"argumentSubstitutionMode" tf:"argument_substitution_mode"`
	// +optional
	CompartmentID *string `json:"compartmentID,omitempty" tf:"compartment_id"`
	// +optional
	DefinedTags          map[string]string                       `json:"definedTags,omitempty" tf:"defined_tags"`
	DeployArtifactSource *DeployArtifactSpecDeployArtifactSource `json:"deployArtifactSource" tf:"deploy_artifact_source"`
	DeployArtifactType   *string                                 `json:"deployArtifactType" tf:"deploy_artifact_type"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	ProjectID        *string `json:"projectID" tf:"project_id"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	SystemTags map[string]string `json:"systemTags,omitempty" tf:"system_tags"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated"`
}

type DeployArtifactStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DeployArtifactList is a list of DeployArtifacts
type DeployArtifactList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DeployArtifact CRD objects
	Items []DeployArtifact `json:"items,omitempty"`
}
