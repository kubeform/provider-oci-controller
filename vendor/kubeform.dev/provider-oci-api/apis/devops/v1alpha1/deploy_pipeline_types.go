/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DeployPipeline struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeployPipelineSpec   `json:"spec,omitempty"`
	Status            DeployPipelineStatus `json:"status,omitempty"`
}

type DeployPipelineSpecDeployPipelineArtifactsItemsDeployPipelineStagesItems struct {
	// +optional
	DeployStageID *string `json:"deployStageID,omitempty" tf:"deploy_stage_id"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
}

type DeployPipelineSpecDeployPipelineArtifactsItemsDeployPipelineStages struct {
	// +optional
	Items []DeployPipelineSpecDeployPipelineArtifactsItemsDeployPipelineStagesItems `json:"items,omitempty" tf:"items"`
}

type DeployPipelineSpecDeployPipelineArtifactsItems struct {
	// +optional
	DeployArtifactID *string `json:"deployArtifactID,omitempty" tf:"deploy_artifact_id"`
	// +optional
	DeployPipelineStages *DeployPipelineSpecDeployPipelineArtifactsItemsDeployPipelineStages `json:"deployPipelineStages,omitempty" tf:"deploy_pipeline_stages"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
}

type DeployPipelineSpecDeployPipelineArtifacts struct {
	// +optional
	Items []DeployPipelineSpecDeployPipelineArtifactsItems `json:"items,omitempty" tf:"items"`
}

type DeployPipelineSpecDeployPipelineEnvironmentsItemsDeployPipelineStagesItems struct {
	// +optional
	DeployStageID *string `json:"deployStageID,omitempty" tf:"deploy_stage_id"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
}

type DeployPipelineSpecDeployPipelineEnvironmentsItemsDeployPipelineStages struct {
	// +optional
	Items []DeployPipelineSpecDeployPipelineEnvironmentsItemsDeployPipelineStagesItems `json:"items,omitempty" tf:"items"`
}

type DeployPipelineSpecDeployPipelineEnvironmentsItems struct {
	// +optional
	DeployEnvironmentID *string `json:"deployEnvironmentID,omitempty" tf:"deploy_environment_id"`
	// +optional
	DeployPipelineStages *DeployPipelineSpecDeployPipelineEnvironmentsItemsDeployPipelineStages `json:"deployPipelineStages,omitempty" tf:"deploy_pipeline_stages"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
}

type DeployPipelineSpecDeployPipelineEnvironments struct {
	// +optional
	Items []DeployPipelineSpecDeployPipelineEnvironmentsItems `json:"items,omitempty" tf:"items"`
}

type DeployPipelineSpecDeployPipelineParametersItems struct {
	// +optional
	DefaultValue *string `json:"defaultValue,omitempty" tf:"default_value"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	Name        *string `json:"name" tf:"name"`
}

type DeployPipelineSpecDeployPipelineParameters struct {
	Items []DeployPipelineSpecDeployPipelineParametersItems `json:"items" tf:"items"`
}

type DeployPipelineSpec struct {
	State *DeployPipelineSpecResource `json:"state,omitempty" tf:"-"`

	Resource DeployPipelineSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type DeployPipelineSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	CompartmentID *string `json:"compartmentID,omitempty" tf:"compartment_id"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	DeployPipelineArtifacts *DeployPipelineSpecDeployPipelineArtifacts `json:"deployPipelineArtifacts,omitempty" tf:"deploy_pipeline_artifacts"`
	// +optional
	DeployPipelineEnvironments *DeployPipelineSpecDeployPipelineEnvironments `json:"deployPipelineEnvironments,omitempty" tf:"deploy_pipeline_environments"`
	// +optional
	DeployPipelineParameters *DeployPipelineSpecDeployPipelineParameters `json:"deployPipelineParameters,omitempty" tf:"deploy_pipeline_parameters"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	ProjectID        *string `json:"projectID" tf:"project_id"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	SystemTags map[string]string `json:"systemTags,omitempty" tf:"system_tags"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated"`
}

type DeployPipelineStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DeployPipelineList is a list of DeployPipelines
type DeployPipelineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DeployPipeline CRD objects
	Items []DeployPipeline `json:"items,omitempty"`
}
