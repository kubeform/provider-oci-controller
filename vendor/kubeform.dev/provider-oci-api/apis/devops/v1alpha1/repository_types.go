/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Repository struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RepositorySpec   `json:"spec,omitempty"`
	Status            RepositoryStatus `json:"status,omitempty"`
}

type RepositorySpecMirrorRepositoryConfigTriggerSchedule struct {
	// +optional
	CustomSchedule *string `json:"customSchedule,omitempty" tf:"custom_schedule"`
	ScheduleType   *string `json:"scheduleType" tf:"schedule_type"`
}

type RepositorySpecMirrorRepositoryConfig struct {
	// +optional
	ConnectorID *string `json:"connectorID,omitempty" tf:"connector_id"`
	// +optional
	RepositoryURL *string `json:"repositoryURL,omitempty" tf:"repository_url"`
	// +optional
	TriggerSchedule *RepositorySpecMirrorRepositoryConfigTriggerSchedule `json:"triggerSchedule,omitempty" tf:"trigger_schedule"`
}

type RepositorySpec struct {
	State *RepositorySpecResource `json:"state,omitempty" tf:"-"`

	Resource RepositorySpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type RepositorySpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	BranchCount *int64 `json:"branchCount,omitempty" tf:"branch_count"`
	// +optional
	CommitCount *int64 `json:"commitCount,omitempty" tf:"commit_count"`
	// +optional
	CompartmentID *string `json:"compartmentID,omitempty" tf:"compartment_id"`
	// +optional
	DefaultBranch *string `json:"defaultBranch,omitempty" tf:"default_branch"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	HttpURL *string `json:"httpURL,omitempty" tf:"http_url"`
	// +optional
	LifecyleDetails *string `json:"lifecyleDetails,omitempty" tf:"lifecyle_details"`
	// +optional
	MirrorRepositoryConfig *RepositorySpecMirrorRepositoryConfig `json:"mirrorRepositoryConfig,omitempty" tf:"mirror_repository_config"`
	Name                   *string                               `json:"name" tf:"name"`
	// +optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace"`
	ProjectID *string `json:"projectID" tf:"project_id"`
	// +optional
	ProjectName *string `json:"projectName,omitempty" tf:"project_name"`
	// +optional
	RepositoryType *string `json:"repositoryType,omitempty" tf:"repository_type"`
	// +optional
	SizeInBytes *string `json:"sizeInBytes,omitempty" tf:"size_in_bytes"`
	// +optional
	SshURL *string `json:"sshURL,omitempty" tf:"ssh_url"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	SystemTags map[string]string `json:"systemTags,omitempty" tf:"system_tags"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated"`
	// +optional
	TriggerBuildEvents []string `json:"triggerBuildEvents,omitempty" tf:"trigger_build_events"`
}

type RepositoryStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// RepositoryList is a list of Repositorys
type RepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Repository CRD objects
	Items []Repository `json:"items,omitempty"`
}
