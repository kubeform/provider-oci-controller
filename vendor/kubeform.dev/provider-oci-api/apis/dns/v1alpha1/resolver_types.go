/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Resolver struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ResolverSpec   `json:"spec,omitempty"`
	Status            ResolverStatus `json:"status,omitempty"`
}

type ResolverSpecAttachedViews struct {
	ViewID *string `json:"viewID" tf:"view_id"`
}

type ResolverSpecEndpoints struct {
	// +optional
	CompartmentID *string `json:"compartmentID,omitempty" tf:"compartment_id"`
	// +optional
	EndpointType *string `json:"endpointType,omitempty" tf:"endpoint_type"`
	// +optional
	ForwardingAddress *string `json:"forwardingAddress,omitempty" tf:"forwarding_address"`
	// +optional
	IsForwarding *bool `json:"isForwarding,omitempty" tf:"is_forwarding"`
	// +optional
	IsListening *bool `json:"isListening,omitempty" tf:"is_listening"`
	// +optional
	ListeningAddress *string `json:"listeningAddress,omitempty" tf:"listening_address"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Self *string `json:"self,omitempty" tf:"self"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	SubnetID *string `json:"subnetID,omitempty" tf:"subnet_id"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated"`
}

type ResolverSpecRules struct {
	Action *string `json:"action" tf:"action"`
	// +optional
	ClientAddressConditions []string `json:"clientAddressConditions,omitempty" tf:"client_address_conditions"`
	DestinationAddresses    []string `json:"destinationAddresses" tf:"destination_addresses"`
	// +optional
	QnameCoverConditions []string `json:"qnameCoverConditions,omitempty" tf:"qname_cover_conditions"`
	SourceEndpointName   *string  `json:"sourceEndpointName" tf:"source_endpoint_name"`
}

type ResolverSpec struct {
	State *ResolverSpecResource `json:"state,omitempty" tf:"-"`

	Resource ResolverSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type ResolverSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AttachedVcnID *string `json:"attachedVcnID,omitempty" tf:"attached_vcn_id"`
	// +optional
	AttachedViews []ResolverSpecAttachedViews `json:"attachedViews,omitempty" tf:"attached_views"`
	// +optional
	CompartmentID *string `json:"compartmentID,omitempty" tf:"compartment_id"`
	// +optional
	DefaultViewID *string `json:"defaultViewID,omitempty" tf:"default_view_id"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	Endpoints []ResolverSpecEndpoints `json:"endpoints,omitempty" tf:"endpoints"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	IsProtected *bool   `json:"isProtected,omitempty" tf:"is_protected"`
	ResolverID  *string `json:"resolverID" tf:"resolver_id"`
	// +optional
	Rules []ResolverSpecRules `json:"rules,omitempty" tf:"rules"`
	Scope *string             `json:"scope" tf:"scope"`
	// +optional
	Self *string `json:"self,omitempty" tf:"self"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated"`
}

type ResolverStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ResolverList is a list of Resolvers
type ResolverList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Resolver CRD objects
	Items []Resolver `json:"items,omitempty"`
}
