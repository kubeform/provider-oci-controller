/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Rrset struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RrsetSpec   `json:"spec,omitempty"`
	Status            RrsetStatus `json:"status,omitempty"`
}

type RrsetSpecItems struct {
	Domain *string `json:"domain" tf:"domain"`
	// +optional
	IsProtected *bool   `json:"isProtected,omitempty" tf:"is_protected"`
	Rdata       *string `json:"rdata" tf:"rdata"`
	// +optional
	RecordHash *string `json:"recordHash,omitempty" tf:"record_hash"`
	// +optional
	RrsetVersion *string `json:"rrsetVersion,omitempty" tf:"rrset_version"`
	Rtype        *string `json:"rtype" tf:"rtype"`
	Ttl          *int64  `json:"ttl" tf:"ttl"`
}

type RrsetSpec struct {
	State *RrsetSpecResource `json:"state,omitempty" tf:"-"`

	Resource RrsetSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type RrsetSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	CompartmentID *string `json:"compartmentID,omitempty" tf:"compartment_id"`
	Domain        *string `json:"domain" tf:"domain"`
	// +optional
	Items []RrsetSpecItems `json:"items,omitempty" tf:"items"`
	Rtype *string          `json:"rtype" tf:"rtype"`
	// +optional
	Scope *string `json:"scope,omitempty" tf:"scope"`
	// +optional
	ViewID       *string `json:"viewID,omitempty" tf:"view_id"`
	ZoneNameOrID *string `json:"zoneNameOrID" tf:"zone_name_or_id"`
}

type RrsetStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// RrsetList is a list of Rrsets
type RrsetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Rrset CRD objects
	Items []Rrset `json:"items,omitempty"`
}
