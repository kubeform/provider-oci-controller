/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type SteeringPolicy struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SteeringPolicySpec   `json:"spec,omitempty"`
	Status            SteeringPolicyStatus `json:"status,omitempty"`
}

type SteeringPolicySpecAnswers struct {
	// +optional
	IsDisabled *bool   `json:"isDisabled,omitempty" tf:"is_disabled"`
	Name       *string `json:"name" tf:"name"`
	// +optional
	Pool  *string `json:"pool,omitempty" tf:"pool"`
	Rdata *string `json:"rdata" tf:"rdata"`
	Rtype *string `json:"rtype" tf:"rtype"`
}

type SteeringPolicySpecRulesCasesAnswerData struct {
	// +optional
	AnswerCondition *string `json:"answerCondition,omitempty" tf:"answer_condition"`
	// +optional
	ShouldKeep *bool `json:"shouldKeep,omitempty" tf:"should_keep"`
	// +optional
	Value *int64 `json:"value,omitempty" tf:"value"`
}

type SteeringPolicySpecRulesCases struct {
	// +optional
	AnswerData []SteeringPolicySpecRulesCasesAnswerData `json:"answerData,omitempty" tf:"answer_data"`
	// +optional
	CaseCondition *string `json:"caseCondition,omitempty" tf:"case_condition"`
	// +optional
	Count *int64 `json:"count,omitempty" tf:"count"`
}

type SteeringPolicySpecRulesDefaultAnswerData struct {
	// +optional
	AnswerCondition *string `json:"answerCondition,omitempty" tf:"answer_condition"`
	// +optional
	ShouldKeep *bool `json:"shouldKeep,omitempty" tf:"should_keep"`
	// +optional
	Value *int64 `json:"value,omitempty" tf:"value"`
}

type SteeringPolicySpecRules struct {
	// +optional
	Cases []SteeringPolicySpecRulesCases `json:"cases,omitempty" tf:"cases"`
	// +optional
	DefaultAnswerData []SteeringPolicySpecRulesDefaultAnswerData `json:"defaultAnswerData,omitempty" tf:"default_answer_data"`
	// +optional
	DefaultCount *int64 `json:"defaultCount,omitempty" tf:"default_count"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	RuleType    *string `json:"ruleType" tf:"rule_type"`
}

type SteeringPolicySpec struct {
	State *SteeringPolicySpecResource `json:"state,omitempty" tf:"-"`

	Resource SteeringPolicySpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type SteeringPolicySpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Answers       []SteeringPolicySpecAnswers `json:"answers,omitempty" tf:"answers"`
	CompartmentID *string                     `json:"compartmentID" tf:"compartment_id"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	DisplayName *string           `json:"displayName" tf:"display_name"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	HealthCheckMonitorID *string `json:"healthCheckMonitorID,omitempty" tf:"health_check_monitor_id"`
	// +optional
	Rules []SteeringPolicySpecRules `json:"rules,omitempty" tf:"rules"`
	// +optional
	Self *string `json:"self,omitempty" tf:"self"`
	// +optional
	State    *string `json:"state,omitempty" tf:"state"`
	Template *string `json:"template" tf:"template"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	Ttl *int64 `json:"ttl,omitempty" tf:"ttl"`
}

type SteeringPolicyStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// SteeringPolicyList is a list of SteeringPolicys
type SteeringPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of SteeringPolicy CRD objects
	Items []SteeringPolicy `json:"items,omitempty"`
}
