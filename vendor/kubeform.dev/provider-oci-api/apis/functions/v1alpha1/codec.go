/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ApplicationSpecImagePolicyConfig{}).Type1()): ApplicationSpecImagePolicyConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ApplicationSpecTraceConfig{}).Type1()):       ApplicationSpecTraceConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FunctionSpecTraceConfig{}).Type1()):          FunctionSpecTraceConfigCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ApplicationSpecImagePolicyConfig{}).Type1()): ApplicationSpecImagePolicyConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ApplicationSpecTraceConfig{}).Type1()):       ApplicationSpecTraceConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FunctionSpecTraceConfig{}).Type1()):          FunctionSpecTraceConfigCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type ApplicationSpecImagePolicyConfigCodec struct {
}

func (ApplicationSpecImagePolicyConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ApplicationSpecImagePolicyConfig)(ptr) == nil
}

func (ApplicationSpecImagePolicyConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ApplicationSpecImagePolicyConfig)(ptr)
	var objs []ApplicationSpecImagePolicyConfig
	if obj != nil {
		objs = []ApplicationSpecImagePolicyConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApplicationSpecImagePolicyConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ApplicationSpecImagePolicyConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ApplicationSpecImagePolicyConfig)(ptr) = ApplicationSpecImagePolicyConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ApplicationSpecImagePolicyConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApplicationSpecImagePolicyConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ApplicationSpecImagePolicyConfig)(ptr) = objs[0]
			} else {
				*(*ApplicationSpecImagePolicyConfig)(ptr) = ApplicationSpecImagePolicyConfig{}
			}
		} else {
			*(*ApplicationSpecImagePolicyConfig)(ptr) = ApplicationSpecImagePolicyConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ApplicationSpecImagePolicyConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApplicationSpecImagePolicyConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ApplicationSpecImagePolicyConfig)(ptr) = obj
		} else {
			*(*ApplicationSpecImagePolicyConfig)(ptr) = ApplicationSpecImagePolicyConfig{}
		}
	default:
		iter.ReportError("decode ApplicationSpecImagePolicyConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ApplicationSpecTraceConfigCodec struct {
}

func (ApplicationSpecTraceConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ApplicationSpecTraceConfig)(ptr) == nil
}

func (ApplicationSpecTraceConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ApplicationSpecTraceConfig)(ptr)
	var objs []ApplicationSpecTraceConfig
	if obj != nil {
		objs = []ApplicationSpecTraceConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApplicationSpecTraceConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ApplicationSpecTraceConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ApplicationSpecTraceConfig)(ptr) = ApplicationSpecTraceConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ApplicationSpecTraceConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApplicationSpecTraceConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ApplicationSpecTraceConfig)(ptr) = objs[0]
			} else {
				*(*ApplicationSpecTraceConfig)(ptr) = ApplicationSpecTraceConfig{}
			}
		} else {
			*(*ApplicationSpecTraceConfig)(ptr) = ApplicationSpecTraceConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ApplicationSpecTraceConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApplicationSpecTraceConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ApplicationSpecTraceConfig)(ptr) = obj
		} else {
			*(*ApplicationSpecTraceConfig)(ptr) = ApplicationSpecTraceConfig{}
		}
	default:
		iter.ReportError("decode ApplicationSpecTraceConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FunctionSpecTraceConfigCodec struct {
}

func (FunctionSpecTraceConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FunctionSpecTraceConfig)(ptr) == nil
}

func (FunctionSpecTraceConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FunctionSpecTraceConfig)(ptr)
	var objs []FunctionSpecTraceConfig
	if obj != nil {
		objs = []FunctionSpecTraceConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FunctionSpecTraceConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FunctionSpecTraceConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FunctionSpecTraceConfig)(ptr) = FunctionSpecTraceConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FunctionSpecTraceConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FunctionSpecTraceConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FunctionSpecTraceConfig)(ptr) = objs[0]
			} else {
				*(*FunctionSpecTraceConfig)(ptr) = FunctionSpecTraceConfig{}
			}
		} else {
			*(*FunctionSpecTraceConfig)(ptr) = FunctionSpecTraceConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj FunctionSpecTraceConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FunctionSpecTraceConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*FunctionSpecTraceConfig)(ptr) = obj
		} else {
			*(*FunctionSpecTraceConfig)(ptr) = FunctionSpecTraceConfig{}
		}
	default:
		iter.ReportError("decode FunctionSpecTraceConfig", "unexpected JSON type")
	}
}
