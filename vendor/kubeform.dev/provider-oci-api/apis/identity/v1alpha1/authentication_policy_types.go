/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type AuthenticationPolicy struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AuthenticationPolicySpec   `json:"spec,omitempty"`
	Status            AuthenticationPolicyStatus `json:"status,omitempty"`
}

type AuthenticationPolicySpecNetworkPolicy struct {
	// +optional
	NetworkSourceIDS []string `json:"networkSourceIDS,omitempty" tf:"network_source_ids"`
}

type AuthenticationPolicySpecPasswordPolicy struct {
	// +optional
	IsLowercaseCharactersRequired *bool `json:"isLowercaseCharactersRequired,omitempty" tf:"is_lowercase_characters_required"`
	// +optional
	IsNumericCharactersRequired *bool `json:"isNumericCharactersRequired,omitempty" tf:"is_numeric_characters_required"`
	// +optional
	IsSpecialCharactersRequired *bool `json:"isSpecialCharactersRequired,omitempty" tf:"is_special_characters_required"`
	// +optional
	IsUppercaseCharactersRequired *bool `json:"isUppercaseCharactersRequired,omitempty" tf:"is_uppercase_characters_required"`
	// +optional
	IsUsernameContainmentAllowed *bool `json:"isUsernameContainmentAllowed,omitempty" tf:"is_username_containment_allowed"`
	// +optional
	MinimumPasswordLength *int64 `json:"minimumPasswordLength,omitempty" tf:"minimum_password_length"`
}

type AuthenticationPolicySpec struct {
	State *AuthenticationPolicySpecResource `json:"state,omitempty" tf:"-"`

	Resource AuthenticationPolicySpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type AuthenticationPolicySpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	CompartmentID *string `json:"compartmentID" tf:"compartment_id"`
	// +optional
	NetworkPolicy *AuthenticationPolicySpecNetworkPolicy `json:"networkPolicy,omitempty" tf:"network_policy"`
	// +optional
	PasswordPolicy *AuthenticationPolicySpecPasswordPolicy `json:"passwordPolicy,omitempty" tf:"password_policy"`
}

type AuthenticationPolicyStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AuthenticationPolicyList is a list of AuthenticationPolicys
type AuthenticationPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of AuthenticationPolicy CRD objects
	Items []AuthenticationPolicy `json:"items,omitempty"`
}
