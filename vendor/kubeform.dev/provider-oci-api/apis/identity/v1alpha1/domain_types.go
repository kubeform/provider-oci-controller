/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Domain struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainSpec   `json:"spec,omitempty"`
	Status            DomainStatus `json:"status,omitempty"`
}

type DomainSpecReplicaRegions struct {
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
}

type DomainSpec struct {
	State *DomainSpecResource `json:"state,omitempty" tf:"-"`

	Resource DomainSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type DomainSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AdminEmail *string `json:"adminEmail,omitempty" tf:"admin_email"`
	// +optional
	AdminFirstName *string `json:"adminFirstName,omitempty" tf:"admin_first_name"`
	// +optional
	AdminLastName *string `json:"adminLastName,omitempty" tf:"admin_last_name"`
	// +optional
	AdminUserName *string `json:"adminUserName,omitempty" tf:"admin_user_name"`
	CompartmentID *string `json:"compartmentID" tf:"compartment_id"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	Description *string           `json:"description" tf:"description"`
	DisplayName *string           `json:"displayName" tf:"display_name"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	HomeRegion   *string           `json:"homeRegion" tf:"home_region"`
	// +optional
	HomeRegionURL *string `json:"homeRegionURL,omitempty" tf:"home_region_url"`
	// +optional
	IsHiddenOnLogin *bool `json:"isHiddenOnLogin,omitempty" tf:"is_hidden_on_login"`
	// +optional
	IsNotificationBypassed *bool `json:"isNotificationBypassed,omitempty" tf:"is_notification_bypassed"`
	// +optional
	IsPrimaryEmailRequired *bool   `json:"isPrimaryEmailRequired,omitempty" tf:"is_primary_email_required"`
	LicenseType            *string `json:"licenseType" tf:"license_type"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	// +optional
	ReplicaRegions []DomainSpecReplicaRegions `json:"replicaRegions,omitempty" tf:"replica_regions"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
}

type DomainStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DomainList is a list of Domains
type DomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Domain CRD objects
	Items []Domain `json:"items,omitempty"`
}
