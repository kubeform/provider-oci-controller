/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type User struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserSpec   `json:"spec,omitempty"`
	Status            UserStatus `json:"status,omitempty"`
}

type UserSpecCapabilities struct {
	// +optional
	CanUseAPIKeys *bool `json:"canUseAPIKeys,omitempty" tf:"can_use_api_keys"`
	// +optional
	CanUseAuthTokens *bool `json:"canUseAuthTokens,omitempty" tf:"can_use_auth_tokens"`
	// +optional
	CanUseConsolePassword *bool `json:"canUseConsolePassword,omitempty" tf:"can_use_console_password"`
	// +optional
	CanUseCustomerSecretKeys *bool `json:"canUseCustomerSecretKeys,omitempty" tf:"can_use_customer_secret_keys"`
	// +optional
	CanUseOauth2clientCredentials *bool `json:"canUseOauth2clientCredentials,omitempty" tf:"can_use_oauth2client_credentials"`
	// +optional
	CanUseSMTPCredentials *bool `json:"canUseSMTPCredentials,omitempty" tf:"can_use_smtp_credentials"`
}

type UserSpec struct {
	State *UserSpecResource `json:"state,omitempty" tf:"-"`

	Resource UserSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type UserSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Capabilities *UserSpecCapabilities `json:"capabilities,omitempty" tf:"capabilities"`
	// +optional
	CompartmentID *string `json:"compartmentID,omitempty" tf:"compartment_id"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	Description *string           `json:"description" tf:"description"`
	// +optional
	Email *string `json:"email,omitempty" tf:"email"`
	// +optional
	EmailVerified *bool `json:"emailVerified,omitempty" tf:"email_verified"`
	// +optional
	ExternalIdentifier *string `json:"externalIdentifier,omitempty" tf:"external_identifier"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	IdentityProviderID *string `json:"identityProviderID,omitempty" tf:"identity_provider_id"`
	// +optional
	InactiveState *string `json:"inactiveState,omitempty" tf:"inactive_state"`
	// +optional
	LastSuccessfulLoginTime *string `json:"lastSuccessfulLoginTime,omitempty" tf:"last_successful_login_time"`
	Name                    *string `json:"name" tf:"name"`
	// +optional
	PreviousSuccessfulLoginTime *string `json:"previousSuccessfulLoginTime,omitempty" tf:"previous_successful_login_time"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
}

type UserStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// UserList is a list of Users
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of User CRD objects
	Items []User `json:"items,omitempty"`
}
