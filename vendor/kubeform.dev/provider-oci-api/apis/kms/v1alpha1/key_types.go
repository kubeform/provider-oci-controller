/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Key struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeySpec   `json:"spec,omitempty"`
	Status            KeyStatus `json:"status,omitempty"`
}

type KeySpecKeyShape struct {
	Algorithm *string `json:"algorithm" tf:"algorithm"`
	// +optional
	CurveID *string `json:"curveID,omitempty" tf:"curve_id"`
	Length  *int64  `json:"length" tf:"length"`
}

type KeySpecReplicaDetails struct {
	// +optional
	ReplicationID *string `json:"replicationID,omitempty" tf:"replication_id"`
}

type KeySpecRestoreFromFile struct {
	ContentLength *string `json:"contentLength" tf:"content_length"`
	// +optional
	ContentMd5                *string `json:"contentMd5,omitempty" tf:"content_md5"`
	RestoreKeyFromFileDetails *string `json:"restoreKeyFromFileDetails" tf:"restore_key_from_file_details"`
}

type KeySpecRestoreFromObjectStore struct {
	// +optional
	Bucket      *string `json:"bucket,omitempty" tf:"bucket"`
	Destination *string `json:"destination" tf:"destination"`
	// +optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace"`
	// +optional
	Object *string `json:"object,omitempty" tf:"object"`
	// +optional
	Uri *string `json:"uri,omitempty" tf:"uri"`
}

type KeySpec struct {
	State *KeySpecResource `json:"state,omitempty" tf:"-"`

	Resource KeySpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type KeySpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	CompartmentID *string `json:"compartmentID" tf:"compartment_id"`
	// +optional
	CurrentKeyVersion *string `json:"currentKeyVersion,omitempty" tf:"current_key_version"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	DesiredState *string `json:"desiredState,omitempty" tf:"desired_state"`
	DisplayName  *string `json:"displayName" tf:"display_name"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	IsPrimary          *bool            `json:"isPrimary,omitempty" tf:"is_primary"`
	KeyShape           *KeySpecKeyShape `json:"keyShape" tf:"key_shape"`
	ManagementEndpoint *string          `json:"managementEndpoint" tf:"management_endpoint"`
	// +optional
	ProtectionMode *string `json:"protectionMode,omitempty" tf:"protection_mode"`
	// +optional
	ReplicaDetails *KeySpecReplicaDetails `json:"replicaDetails,omitempty" tf:"replica_details"`
	// +optional
	RestoreFromFile *KeySpecRestoreFromFile `json:"restoreFromFile,omitempty" tf:"restore_from_file"`
	// +optional
	RestoreFromObjectStore *KeySpecRestoreFromObjectStore `json:"restoreFromObjectStore,omitempty" tf:"restore_from_object_store"`
	// +optional
	RestoreTrigger *bool `json:"restoreTrigger,omitempty" tf:"restore_trigger"`
	// +optional
	RestoredFromKeyID *string `json:"restoredFromKeyID,omitempty" tf:"restored_from_key_id"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeOfDeletion *string `json:"timeOfDeletion,omitempty" tf:"time_of_deletion"`
	// +optional
	VaultID *string `json:"vaultID,omitempty" tf:"vault_id"`
}

type KeyStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// KeyList is a list of Keys
type KeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Key CRD objects
	Items []Key `json:"items,omitempty"`
}
