/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type KeyVersion struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeyVersionSpec   `json:"spec,omitempty"`
	Status            KeyVersionStatus `json:"status,omitempty"`
}

type KeyVersionSpecReplicaDetails struct {
	// +optional
	ReplicationID *string `json:"replicationID,omitempty" tf:"replication_id"`
}

type KeyVersionSpec struct {
	State *KeyVersionSpecResource `json:"state,omitempty" tf:"-"`

	Resource KeyVersionSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type KeyVersionSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	CompartmentID *string `json:"compartmentID,omitempty" tf:"compartment_id"`
	// +optional
	IsPrimary *bool   `json:"isPrimary,omitempty" tf:"is_primary"`
	KeyID     *string `json:"keyID" tf:"key_id"`
	// +optional
	KeyVersionID       *string `json:"keyVersionID,omitempty" tf:"key_version_id"`
	ManagementEndpoint *string `json:"managementEndpoint" tf:"management_endpoint"`
	// +optional
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key"`
	// +optional
	ReplicaDetails *KeyVersionSpecReplicaDetails `json:"replicaDetails,omitempty" tf:"replica_details"`
	// +optional
	RestoredFromKeyID *string `json:"restoredFromKeyID,omitempty" tf:"restored_from_key_id"`
	// +optional
	RestoredFromKeyVersionID *string `json:"restoredFromKeyVersionID,omitempty" tf:"restored_from_key_version_id"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeOfDeletion *string `json:"timeOfDeletion,omitempty" tf:"time_of_deletion"`
	// +optional
	VaultID *string `json:"vaultID,omitempty" tf:"vault_id"`
}

type KeyVersionStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// KeyVersionList is a list of KeyVersions
type KeyVersionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of KeyVersion CRD objects
	Items []KeyVersion `json:"items,omitempty"`
}
