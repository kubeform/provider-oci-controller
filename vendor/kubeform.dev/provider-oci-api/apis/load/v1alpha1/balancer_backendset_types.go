/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type BalancerBackendset struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BalancerBackendsetSpec   `json:"spec,omitempty"`
	Status            BalancerBackendsetStatus `json:"status,omitempty"`
}

type BalancerBackendsetSpecBackend struct {
	// +optional
	Backup *bool `json:"backup,omitempty" tf:"backup"`
	// +optional
	Drain     *bool   `json:"drain,omitempty" tf:"drain"`
	IpAddress *string `json:"ipAddress" tf:"ip_address"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Offline *bool  `json:"offline,omitempty" tf:"offline"`
	Port    *int64 `json:"port" tf:"port"`
	// +optional
	Weight *int64 `json:"weight,omitempty" tf:"weight"`
}

type BalancerBackendsetSpecHealthChecker struct {
	// +optional
	IntervalMs *int64 `json:"intervalMs,omitempty" tf:"interval_ms"`
	// +optional
	Port     *int64  `json:"port,omitempty" tf:"port"`
	Protocol *string `json:"protocol" tf:"protocol"`
	// +optional
	ResponseBodyRegex *string `json:"responseBodyRegex,omitempty" tf:"response_body_regex"`
	// +optional
	Retries *int64 `json:"retries,omitempty" tf:"retries"`
	// +optional
	ReturnCode *int64 `json:"returnCode,omitempty" tf:"return_code"`
	// +optional
	TimeoutInMillis *int64 `json:"timeoutInMillis,omitempty" tf:"timeout_in_millis"`
	// +optional
	UrlPath *string `json:"urlPath,omitempty" tf:"url_path"`
}

type BalancerBackendsetSpecLbCookieSessionPersistenceConfiguration struct {
	// +optional
	CookieName *string `json:"cookieName,omitempty" tf:"cookie_name"`
	// +optional
	DisableFallback *bool `json:"disableFallback,omitempty" tf:"disable_fallback"`
	// +optional
	Domain *string `json:"domain,omitempty" tf:"domain"`
	// +optional
	IsHTTPOnly *bool `json:"isHTTPOnly,omitempty" tf:"is_http_only"`
	// +optional
	IsSecure *bool `json:"isSecure,omitempty" tf:"is_secure"`
	// +optional
	MaxAgeInSeconds *int64 `json:"maxAgeInSeconds,omitempty" tf:"max_age_in_seconds"`
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
}

type BalancerBackendsetSpecSessionPersistenceConfiguration struct {
	CookieName *string `json:"cookieName" tf:"cookie_name"`
	// +optional
	DisableFallback *bool `json:"disableFallback,omitempty" tf:"disable_fallback"`
}

type BalancerBackendsetSpecSslConfiguration struct {
	CertificateName *string `json:"certificateName" tf:"certificate_name"`
	// +optional
	CipherSuiteName *string `json:"cipherSuiteName,omitempty" tf:"cipher_suite_name"`
	// +optional
	Protocols []string `json:"protocols,omitempty" tf:"protocols"`
	// +optional
	ServerOrderPreference *string `json:"serverOrderPreference,omitempty" tf:"server_order_preference"`
	// +optional
	VerifyDepth *int64 `json:"verifyDepth,omitempty" tf:"verify_depth"`
	// +optional
	VerifyPeerCertificate *bool `json:"verifyPeerCertificate,omitempty" tf:"verify_peer_certificate"`
}

type BalancerBackendsetSpec struct {
	State *BalancerBackendsetSpecResource `json:"state,omitempty" tf:"-"`

	Resource BalancerBackendsetSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type BalancerBackendsetSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Backend       []BalancerBackendsetSpecBackend      `json:"backend,omitempty" tf:"backend"`
	HealthChecker *BalancerBackendsetSpecHealthChecker `json:"healthChecker" tf:"health_checker"`
	// +optional
	LbCookieSessionPersistenceConfiguration *BalancerBackendsetSpecLbCookieSessionPersistenceConfiguration `json:"lbCookieSessionPersistenceConfiguration,omitempty" tf:"lb_cookie_session_persistence_configuration"`
	LoadBalancerID                          *string                                                        `json:"loadBalancerID" tf:"load_balancer_id"`
	Name                                    *string                                                        `json:"name" tf:"name"`
	Policy                                  *string                                                        `json:"policy" tf:"policy"`
	// +optional
	SessionPersistenceConfiguration *BalancerBackendsetSpecSessionPersistenceConfiguration `json:"sessionPersistenceConfiguration,omitempty" tf:"session_persistence_configuration"`
	// +optional
	SslConfiguration *BalancerBackendsetSpecSslConfiguration `json:"sslConfiguration,omitempty" tf:"ssl_configuration"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
}

type BalancerBackendsetStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// BalancerBackendsetList is a list of BalancerBackendsets
type BalancerBackendsetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of BalancerBackendset CRD objects
	Items []BalancerBackendset `json:"items,omitempty"`
}
