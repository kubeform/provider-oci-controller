/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(LogSpecConfiguration{}).Type1()):                                           LogSpecConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(LogSpecConfigurationSource{}).Type1()):                                     LogSpecConfigurationSourceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UnifiedAgentConfigurationSpecGroupAssociation{}).Type1()):                  UnifiedAgentConfigurationSpecGroupAssociationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UnifiedAgentConfigurationSpecServiceConfiguration{}).Type1()):              UnifiedAgentConfigurationSpecServiceConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UnifiedAgentConfigurationSpecServiceConfigurationDestination{}).Type1()):   UnifiedAgentConfigurationSpecServiceConfigurationDestinationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser{}).Type1()): UnifiedAgentConfigurationSpecServiceConfigurationSourcesParserCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(LogSpecConfiguration{}).Type1()):                                           LogSpecConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(LogSpecConfigurationSource{}).Type1()):                                     LogSpecConfigurationSourceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UnifiedAgentConfigurationSpecGroupAssociation{}).Type1()):                  UnifiedAgentConfigurationSpecGroupAssociationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UnifiedAgentConfigurationSpecServiceConfiguration{}).Type1()):              UnifiedAgentConfigurationSpecServiceConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UnifiedAgentConfigurationSpecServiceConfigurationDestination{}).Type1()):   UnifiedAgentConfigurationSpecServiceConfigurationDestinationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser{}).Type1()): UnifiedAgentConfigurationSpecServiceConfigurationSourcesParserCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type LogSpecConfigurationCodec struct {
}

func (LogSpecConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*LogSpecConfiguration)(ptr) == nil
}

func (LogSpecConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*LogSpecConfiguration)(ptr)
	var objs []LogSpecConfiguration
	if obj != nil {
		objs = []LogSpecConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LogSpecConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (LogSpecConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*LogSpecConfiguration)(ptr) = LogSpecConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []LogSpecConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LogSpecConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*LogSpecConfiguration)(ptr) = objs[0]
			} else {
				*(*LogSpecConfiguration)(ptr) = LogSpecConfiguration{}
			}
		} else {
			*(*LogSpecConfiguration)(ptr) = LogSpecConfiguration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj LogSpecConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LogSpecConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*LogSpecConfiguration)(ptr) = obj
		} else {
			*(*LogSpecConfiguration)(ptr) = LogSpecConfiguration{}
		}
	default:
		iter.ReportError("decode LogSpecConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type LogSpecConfigurationSourceCodec struct {
}

func (LogSpecConfigurationSourceCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*LogSpecConfigurationSource)(ptr) == nil
}

func (LogSpecConfigurationSourceCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*LogSpecConfigurationSource)(ptr)
	var objs []LogSpecConfigurationSource
	if obj != nil {
		objs = []LogSpecConfigurationSource{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LogSpecConfigurationSource{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (LogSpecConfigurationSourceCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*LogSpecConfigurationSource)(ptr) = LogSpecConfigurationSource{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []LogSpecConfigurationSource

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LogSpecConfigurationSource{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*LogSpecConfigurationSource)(ptr) = objs[0]
			} else {
				*(*LogSpecConfigurationSource)(ptr) = LogSpecConfigurationSource{}
			}
		} else {
			*(*LogSpecConfigurationSource)(ptr) = LogSpecConfigurationSource{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj LogSpecConfigurationSource

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LogSpecConfigurationSource{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*LogSpecConfigurationSource)(ptr) = obj
		} else {
			*(*LogSpecConfigurationSource)(ptr) = LogSpecConfigurationSource{}
		}
	default:
		iter.ReportError("decode LogSpecConfigurationSource", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UnifiedAgentConfigurationSpecGroupAssociationCodec struct {
}

func (UnifiedAgentConfigurationSpecGroupAssociationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UnifiedAgentConfigurationSpecGroupAssociation)(ptr) == nil
}

func (UnifiedAgentConfigurationSpecGroupAssociationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UnifiedAgentConfigurationSpecGroupAssociation)(ptr)
	var objs []UnifiedAgentConfigurationSpecGroupAssociation
	if obj != nil {
		objs = []UnifiedAgentConfigurationSpecGroupAssociation{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UnifiedAgentConfigurationSpecGroupAssociation{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UnifiedAgentConfigurationSpecGroupAssociationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UnifiedAgentConfigurationSpecGroupAssociation)(ptr) = UnifiedAgentConfigurationSpecGroupAssociation{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UnifiedAgentConfigurationSpecGroupAssociation

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UnifiedAgentConfigurationSpecGroupAssociation{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UnifiedAgentConfigurationSpecGroupAssociation)(ptr) = objs[0]
			} else {
				*(*UnifiedAgentConfigurationSpecGroupAssociation)(ptr) = UnifiedAgentConfigurationSpecGroupAssociation{}
			}
		} else {
			*(*UnifiedAgentConfigurationSpecGroupAssociation)(ptr) = UnifiedAgentConfigurationSpecGroupAssociation{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj UnifiedAgentConfigurationSpecGroupAssociation

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UnifiedAgentConfigurationSpecGroupAssociation{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*UnifiedAgentConfigurationSpecGroupAssociation)(ptr) = obj
		} else {
			*(*UnifiedAgentConfigurationSpecGroupAssociation)(ptr) = UnifiedAgentConfigurationSpecGroupAssociation{}
		}
	default:
		iter.ReportError("decode UnifiedAgentConfigurationSpecGroupAssociation", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UnifiedAgentConfigurationSpecServiceConfigurationCodec struct {
}

func (UnifiedAgentConfigurationSpecServiceConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UnifiedAgentConfigurationSpecServiceConfiguration)(ptr) == nil
}

func (UnifiedAgentConfigurationSpecServiceConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UnifiedAgentConfigurationSpecServiceConfiguration)(ptr)
	var objs []UnifiedAgentConfigurationSpecServiceConfiguration
	if obj != nil {
		objs = []UnifiedAgentConfigurationSpecServiceConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UnifiedAgentConfigurationSpecServiceConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UnifiedAgentConfigurationSpecServiceConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UnifiedAgentConfigurationSpecServiceConfiguration)(ptr) = UnifiedAgentConfigurationSpecServiceConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UnifiedAgentConfigurationSpecServiceConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UnifiedAgentConfigurationSpecServiceConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UnifiedAgentConfigurationSpecServiceConfiguration)(ptr) = objs[0]
			} else {
				*(*UnifiedAgentConfigurationSpecServiceConfiguration)(ptr) = UnifiedAgentConfigurationSpecServiceConfiguration{}
			}
		} else {
			*(*UnifiedAgentConfigurationSpecServiceConfiguration)(ptr) = UnifiedAgentConfigurationSpecServiceConfiguration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj UnifiedAgentConfigurationSpecServiceConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UnifiedAgentConfigurationSpecServiceConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*UnifiedAgentConfigurationSpecServiceConfiguration)(ptr) = obj
		} else {
			*(*UnifiedAgentConfigurationSpecServiceConfiguration)(ptr) = UnifiedAgentConfigurationSpecServiceConfiguration{}
		}
	default:
		iter.ReportError("decode UnifiedAgentConfigurationSpecServiceConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UnifiedAgentConfigurationSpecServiceConfigurationDestinationCodec struct {
}

func (UnifiedAgentConfigurationSpecServiceConfigurationDestinationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UnifiedAgentConfigurationSpecServiceConfigurationDestination)(ptr) == nil
}

func (UnifiedAgentConfigurationSpecServiceConfigurationDestinationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UnifiedAgentConfigurationSpecServiceConfigurationDestination)(ptr)
	var objs []UnifiedAgentConfigurationSpecServiceConfigurationDestination
	if obj != nil {
		objs = []UnifiedAgentConfigurationSpecServiceConfigurationDestination{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UnifiedAgentConfigurationSpecServiceConfigurationDestination{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UnifiedAgentConfigurationSpecServiceConfigurationDestinationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UnifiedAgentConfigurationSpecServiceConfigurationDestination)(ptr) = UnifiedAgentConfigurationSpecServiceConfigurationDestination{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UnifiedAgentConfigurationSpecServiceConfigurationDestination

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UnifiedAgentConfigurationSpecServiceConfigurationDestination{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UnifiedAgentConfigurationSpecServiceConfigurationDestination)(ptr) = objs[0]
			} else {
				*(*UnifiedAgentConfigurationSpecServiceConfigurationDestination)(ptr) = UnifiedAgentConfigurationSpecServiceConfigurationDestination{}
			}
		} else {
			*(*UnifiedAgentConfigurationSpecServiceConfigurationDestination)(ptr) = UnifiedAgentConfigurationSpecServiceConfigurationDestination{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj UnifiedAgentConfigurationSpecServiceConfigurationDestination

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UnifiedAgentConfigurationSpecServiceConfigurationDestination{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*UnifiedAgentConfigurationSpecServiceConfigurationDestination)(ptr) = obj
		} else {
			*(*UnifiedAgentConfigurationSpecServiceConfigurationDestination)(ptr) = UnifiedAgentConfigurationSpecServiceConfigurationDestination{}
		}
	default:
		iter.ReportError("decode UnifiedAgentConfigurationSpecServiceConfigurationDestination", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UnifiedAgentConfigurationSpecServiceConfigurationSourcesParserCodec struct {
}

func (UnifiedAgentConfigurationSpecServiceConfigurationSourcesParserCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser)(ptr) == nil
}

func (UnifiedAgentConfigurationSpecServiceConfigurationSourcesParserCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser)(ptr)
	var objs []UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser
	if obj != nil {
		objs = []UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UnifiedAgentConfigurationSpecServiceConfigurationSourcesParserCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser)(ptr) = UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser)(ptr) = objs[0]
			} else {
				*(*UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser)(ptr) = UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser{}
			}
		} else {
			*(*UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser)(ptr) = UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser)(ptr) = obj
		} else {
			*(*UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser)(ptr) = UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser{}
		}
	default:
		iter.ReportError("decode UnifiedAgentConfigurationSpecServiceConfigurationSourcesParser", "unexpected JSON type")
	}
}
