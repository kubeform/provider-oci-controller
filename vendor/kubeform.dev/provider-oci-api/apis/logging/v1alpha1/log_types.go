/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Log struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LogSpec   `json:"spec,omitempty"`
	Status            LogStatus `json:"status,omitempty"`
}

type LogSpecConfigurationSource struct {
	Category   *string `json:"category" tf:"category"`
	Resource   *string `json:"resource" tf:"resource"`
	Service    *string `json:"service" tf:"service"`
	SourceType *string `json:"sourceType" tf:"source_type"`
}

type LogSpecConfiguration struct {
	// +optional
	CompartmentID *string                     `json:"compartmentID,omitempty" tf:"compartment_id"`
	Source        *LogSpecConfigurationSource `json:"source" tf:"source"`
}

type LogSpec struct {
	State *LogSpecResource `json:"state,omitempty" tf:"-"`

	Resource LogSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type LogSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	CompartmentID *string `json:"compartmentID,omitempty" tf:"compartment_id"`
	// +optional
	Configuration *LogSpecConfiguration `json:"configuration,omitempty" tf:"configuration"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	DisplayName *string           `json:"displayName" tf:"display_name"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	IsEnabled  *bool   `json:"isEnabled,omitempty" tf:"is_enabled"`
	LogGroupID *string `json:"logGroupID" tf:"log_group_id"`
	LogType    *string `json:"logType" tf:"log_type"`
	// +optional
	RetentionDuration *int64 `json:"retentionDuration,omitempty" tf:"retention_duration"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TenancyID *string `json:"tenancyID,omitempty" tf:"tenancy_id"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeLastModified *string `json:"timeLastModified,omitempty" tf:"time_last_modified"`
}

type LogStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// LogList is a list of Logs
type LogList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Log CRD objects
	Items []Log `json:"items,omitempty"`
}
