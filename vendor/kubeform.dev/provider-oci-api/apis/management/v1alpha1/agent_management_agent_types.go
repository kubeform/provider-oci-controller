/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type AgentManagementAgent struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AgentManagementAgentSpec   `json:"spec,omitempty"`
	Status            AgentManagementAgentStatus `json:"status,omitempty"`
}

type AgentManagementAgentSpecPluginList struct {
	// +optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled"`
	// +optional
	PluginDisplayName *string `json:"pluginDisplayName,omitempty" tf:"plugin_display_name"`
	// +optional
	PluginID *string `json:"pluginID,omitempty" tf:"plugin_id"`
	// +optional
	PluginName *string `json:"pluginName,omitempty" tf:"plugin_name"`
	// +optional
	PluginVersion *string `json:"pluginVersion,omitempty" tf:"plugin_version"`
}

type AgentManagementAgentSpec struct {
	State *AgentManagementAgentSpecResource `json:"state,omitempty" tf:"-"`

	Resource AgentManagementAgentSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type AgentManagementAgentSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AvailabilityStatus *string `json:"availabilityStatus,omitempty" tf:"availability_status"`
	// +optional
	CompartmentID *string `json:"compartmentID,omitempty" tf:"compartment_id"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	DeployPluginsID []string `json:"deployPluginsID,omitempty" tf:"deploy_plugins_id"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	Host *string `json:"host,omitempty" tf:"host"`
	// +optional
	HostID *string `json:"hostID,omitempty" tf:"host_id"`
	// +optional
	InstallKeyID *string `json:"installKeyID,omitempty" tf:"install_key_id"`
	// +optional
	InstallPath *string `json:"installPath,omitempty" tf:"install_path"`
	// +optional
	InstallType *string `json:"installType,omitempty" tf:"install_type"`
	// +optional
	IsAgentAutoUpgradable *bool `json:"isAgentAutoUpgradable,omitempty" tf:"is_agent_auto_upgradable"`
	// +optional
	IsCustomerDeployed *bool `json:"isCustomerDeployed,omitempty" tf:"is_customer_deployed"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	ManagedAgentID   *string `json:"managedAgentID" tf:"managed_agent_id"`
	// +optional
	PlatformName *string `json:"platformName,omitempty" tf:"platform_name"`
	// +optional
	PlatformType *string `json:"platformType,omitempty" tf:"platform_type"`
	// +optional
	PlatformVersion *string `json:"platformVersion,omitempty" tf:"platform_version"`
	// +optional
	PluginList []AgentManagementAgentSpecPluginList `json:"pluginList,omitempty" tf:"plugin_list"`
	// +optional
	ResourceArtifactVersion *string `json:"resourceArtifactVersion,omitempty" tf:"resource_artifact_version"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeLastHeartbeat *string `json:"timeLastHeartbeat,omitempty" tf:"time_last_heartbeat"`
	// +optional
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated"`
	// +optional
	Version *string `json:"version,omitempty" tf:"version"`
}

type AgentManagementAgentStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AgentManagementAgentList is a list of AgentManagementAgents
type AgentManagementAgentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of AgentManagementAgent CRD objects
	Items []AgentManagementAgent `json:"items,omitempty"`
}
