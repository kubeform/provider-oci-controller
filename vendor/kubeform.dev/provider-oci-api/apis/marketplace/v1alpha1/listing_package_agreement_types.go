/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ListingPackageAgreement struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ListingPackageAgreementSpec   `json:"spec,omitempty"`
	Status            ListingPackageAgreementStatus `json:"status,omitempty"`
}

type ListingPackageAgreementSpec struct {
	State *ListingPackageAgreementSpecResource `json:"state,omitempty" tf:"-"`

	Resource ListingPackageAgreementSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type ListingPackageAgreementSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	AgreementID *string `json:"agreementID" tf:"agreement_id"`
	// +optional
	Author *string `json:"author,omitempty" tf:"author"`
	// +optional
	CompartmentID *string `json:"compartmentID,omitempty" tf:"compartment_id"`
	// +optional
	ContentURL     *string `json:"contentURL,omitempty" tf:"content_url"`
	ListingID      *string `json:"listingID" tf:"listing_id"`
	PackageVersion *string `json:"packageVersion" tf:"package_version"`
	// +optional
	Prompt *string `json:"prompt,omitempty" tf:"prompt"`
	// +optional
	Signature *string `json:"signature,omitempty" tf:"signature"`
}

type ListingPackageAgreementStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ListingPackageAgreementList is a list of ListingPackageAgreements
type ListingPackageAgreementList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ListingPackageAgreement CRD objects
	Items []ListingPackageAgreement `json:"items,omitempty"`
}
