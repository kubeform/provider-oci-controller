/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Publication struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PublicationSpec   `json:"spec,omitempty"`
	Status            PublicationStatus `json:"status,omitempty"`
}

type PublicationSpecIcon struct {
	// +optional
	ContentURL *string `json:"contentURL,omitempty" tf:"content_url"`
	// +optional
	FileExtension *string `json:"fileExtension,omitempty" tf:"file_extension"`
	// +optional
	MimeType *string `json:"mimeType,omitempty" tf:"mime_type"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
}

type PublicationSpecPackageDetailsEula struct {
	EulaType *string `json:"eulaType" tf:"eula_type"`
	// +optional
	LicenseText *string `json:"licenseText,omitempty" tf:"license_text"`
}

type PublicationSpecPackageDetailsOperatingSystem struct {
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
}

type PublicationSpecPackageDetails struct {
	Eula []PublicationSpecPackageDetailsEula `json:"eula" tf:"eula"`
	// +optional
	ImageID         *string                                       `json:"imageID,omitempty" tf:"image_id"`
	OperatingSystem *PublicationSpecPackageDetailsOperatingSystem `json:"operatingSystem" tf:"operating_system"`
	PackageType     *string                                       `json:"packageType" tf:"package_type"`
	PackageVersion  *string                                       `json:"packageVersion" tf:"package_version"`
}

type PublicationSpecSupportContacts struct {
	// +optional
	Email *string `json:"email,omitempty" tf:"email"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Phone *string `json:"phone,omitempty" tf:"phone"`
	// +optional
	Subject *string `json:"subject,omitempty" tf:"subject"`
}

type PublicationSpecSupportedOperatingSystems struct {
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
}

type PublicationSpec struct {
	State *PublicationSpecResource `json:"state,omitempty" tf:"-"`

	Resource PublicationSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type PublicationSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	CompartmentID *string `json:"compartmentID" tf:"compartment_id"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	Icon                    *PublicationSpecIcon `json:"icon,omitempty" tf:"icon"`
	IsAgreementAcknowledged *bool                `json:"isAgreementAcknowledged" tf:"is_agreement_acknowledged"`
	ListingType             *string              `json:"listingType" tf:"listing_type"`
	// +optional
	LongDescription *string                        `json:"longDescription,omitempty" tf:"long_description"`
	Name            *string                        `json:"name" tf:"name"`
	PackageDetails  *PublicationSpecPackageDetails `json:"packageDetails" tf:"package_details"`
	// +optional
	PackageType      *string `json:"packageType,omitempty" tf:"package_type"`
	ShortDescription *string `json:"shortDescription" tf:"short_description"`
	// +optional
	State           *string                          `json:"state,omitempty" tf:"state"`
	SupportContacts []PublicationSpecSupportContacts `json:"supportContacts" tf:"support_contacts"`
	// +optional
	SupportedOperatingSystems []PublicationSpecSupportedOperatingSystems `json:"supportedOperatingSystems,omitempty" tf:"supported_operating_systems"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
}

type PublicationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// PublicationList is a list of Publications
type PublicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Publication CRD objects
	Items []Publication `json:"items,omitempty"`
}
