/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ComputationCustomTableSpecSavedCustomTable{}).Type1()):             ComputationCustomTableSpecSavedCustomTableCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ComputationQuerySpecQueryDefinition{}).Type1()):                    ComputationQuerySpecQueryDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ComputationQuerySpecQueryDefinitionCostAnalysisUi{}).Type1()):      ComputationQuerySpecQueryDefinitionCostAnalysisUiCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ComputationQuerySpecQueryDefinitionReportQuery{}).Type1()):         ComputationQuerySpecQueryDefinitionReportQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ComputationQuerySpecQueryDefinitionReportQueryForecast{}).Type1()): ComputationQuerySpecQueryDefinitionReportQueryForecastCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ComputationUsageSpecForecast{}).Type1()):                           ComputationUsageSpecForecastCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ComputationCustomTableSpecSavedCustomTable{}).Type1()):             ComputationCustomTableSpecSavedCustomTableCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ComputationQuerySpecQueryDefinition{}).Type1()):                    ComputationQuerySpecQueryDefinitionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ComputationQuerySpecQueryDefinitionCostAnalysisUi{}).Type1()):      ComputationQuerySpecQueryDefinitionCostAnalysisUiCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ComputationQuerySpecQueryDefinitionReportQuery{}).Type1()):         ComputationQuerySpecQueryDefinitionReportQueryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ComputationQuerySpecQueryDefinitionReportQueryForecast{}).Type1()): ComputationQuerySpecQueryDefinitionReportQueryForecastCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ComputationUsageSpecForecast{}).Type1()):                           ComputationUsageSpecForecastCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type ComputationCustomTableSpecSavedCustomTableCodec struct {
}

func (ComputationCustomTableSpecSavedCustomTableCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ComputationCustomTableSpecSavedCustomTable)(ptr) == nil
}

func (ComputationCustomTableSpecSavedCustomTableCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ComputationCustomTableSpecSavedCustomTable)(ptr)
	var objs []ComputationCustomTableSpecSavedCustomTable
	if obj != nil {
		objs = []ComputationCustomTableSpecSavedCustomTable{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ComputationCustomTableSpecSavedCustomTable{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ComputationCustomTableSpecSavedCustomTableCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ComputationCustomTableSpecSavedCustomTable)(ptr) = ComputationCustomTableSpecSavedCustomTable{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ComputationCustomTableSpecSavedCustomTable

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ComputationCustomTableSpecSavedCustomTable{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ComputationCustomTableSpecSavedCustomTable)(ptr) = objs[0]
			} else {
				*(*ComputationCustomTableSpecSavedCustomTable)(ptr) = ComputationCustomTableSpecSavedCustomTable{}
			}
		} else {
			*(*ComputationCustomTableSpecSavedCustomTable)(ptr) = ComputationCustomTableSpecSavedCustomTable{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ComputationCustomTableSpecSavedCustomTable

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ComputationCustomTableSpecSavedCustomTable{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ComputationCustomTableSpecSavedCustomTable)(ptr) = obj
		} else {
			*(*ComputationCustomTableSpecSavedCustomTable)(ptr) = ComputationCustomTableSpecSavedCustomTable{}
		}
	default:
		iter.ReportError("decode ComputationCustomTableSpecSavedCustomTable", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ComputationQuerySpecQueryDefinitionCodec struct {
}

func (ComputationQuerySpecQueryDefinitionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ComputationQuerySpecQueryDefinition)(ptr) == nil
}

func (ComputationQuerySpecQueryDefinitionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ComputationQuerySpecQueryDefinition)(ptr)
	var objs []ComputationQuerySpecQueryDefinition
	if obj != nil {
		objs = []ComputationQuerySpecQueryDefinition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ComputationQuerySpecQueryDefinition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ComputationQuerySpecQueryDefinitionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ComputationQuerySpecQueryDefinition)(ptr) = ComputationQuerySpecQueryDefinition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ComputationQuerySpecQueryDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ComputationQuerySpecQueryDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ComputationQuerySpecQueryDefinition)(ptr) = objs[0]
			} else {
				*(*ComputationQuerySpecQueryDefinition)(ptr) = ComputationQuerySpecQueryDefinition{}
			}
		} else {
			*(*ComputationQuerySpecQueryDefinition)(ptr) = ComputationQuerySpecQueryDefinition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ComputationQuerySpecQueryDefinition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ComputationQuerySpecQueryDefinition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ComputationQuerySpecQueryDefinition)(ptr) = obj
		} else {
			*(*ComputationQuerySpecQueryDefinition)(ptr) = ComputationQuerySpecQueryDefinition{}
		}
	default:
		iter.ReportError("decode ComputationQuerySpecQueryDefinition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ComputationQuerySpecQueryDefinitionCostAnalysisUiCodec struct {
}

func (ComputationQuerySpecQueryDefinitionCostAnalysisUiCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ComputationQuerySpecQueryDefinitionCostAnalysisUi)(ptr) == nil
}

func (ComputationQuerySpecQueryDefinitionCostAnalysisUiCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ComputationQuerySpecQueryDefinitionCostAnalysisUi)(ptr)
	var objs []ComputationQuerySpecQueryDefinitionCostAnalysisUi
	if obj != nil {
		objs = []ComputationQuerySpecQueryDefinitionCostAnalysisUi{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ComputationQuerySpecQueryDefinitionCostAnalysisUi{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ComputationQuerySpecQueryDefinitionCostAnalysisUiCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ComputationQuerySpecQueryDefinitionCostAnalysisUi)(ptr) = ComputationQuerySpecQueryDefinitionCostAnalysisUi{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ComputationQuerySpecQueryDefinitionCostAnalysisUi

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ComputationQuerySpecQueryDefinitionCostAnalysisUi{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ComputationQuerySpecQueryDefinitionCostAnalysisUi)(ptr) = objs[0]
			} else {
				*(*ComputationQuerySpecQueryDefinitionCostAnalysisUi)(ptr) = ComputationQuerySpecQueryDefinitionCostAnalysisUi{}
			}
		} else {
			*(*ComputationQuerySpecQueryDefinitionCostAnalysisUi)(ptr) = ComputationQuerySpecQueryDefinitionCostAnalysisUi{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ComputationQuerySpecQueryDefinitionCostAnalysisUi

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ComputationQuerySpecQueryDefinitionCostAnalysisUi{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ComputationQuerySpecQueryDefinitionCostAnalysisUi)(ptr) = obj
		} else {
			*(*ComputationQuerySpecQueryDefinitionCostAnalysisUi)(ptr) = ComputationQuerySpecQueryDefinitionCostAnalysisUi{}
		}
	default:
		iter.ReportError("decode ComputationQuerySpecQueryDefinitionCostAnalysisUi", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ComputationQuerySpecQueryDefinitionReportQueryCodec struct {
}

func (ComputationQuerySpecQueryDefinitionReportQueryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ComputationQuerySpecQueryDefinitionReportQuery)(ptr) == nil
}

func (ComputationQuerySpecQueryDefinitionReportQueryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ComputationQuerySpecQueryDefinitionReportQuery)(ptr)
	var objs []ComputationQuerySpecQueryDefinitionReportQuery
	if obj != nil {
		objs = []ComputationQuerySpecQueryDefinitionReportQuery{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ComputationQuerySpecQueryDefinitionReportQuery{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ComputationQuerySpecQueryDefinitionReportQueryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ComputationQuerySpecQueryDefinitionReportQuery)(ptr) = ComputationQuerySpecQueryDefinitionReportQuery{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ComputationQuerySpecQueryDefinitionReportQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ComputationQuerySpecQueryDefinitionReportQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ComputationQuerySpecQueryDefinitionReportQuery)(ptr) = objs[0]
			} else {
				*(*ComputationQuerySpecQueryDefinitionReportQuery)(ptr) = ComputationQuerySpecQueryDefinitionReportQuery{}
			}
		} else {
			*(*ComputationQuerySpecQueryDefinitionReportQuery)(ptr) = ComputationQuerySpecQueryDefinitionReportQuery{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ComputationQuerySpecQueryDefinitionReportQuery

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ComputationQuerySpecQueryDefinitionReportQuery{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ComputationQuerySpecQueryDefinitionReportQuery)(ptr) = obj
		} else {
			*(*ComputationQuerySpecQueryDefinitionReportQuery)(ptr) = ComputationQuerySpecQueryDefinitionReportQuery{}
		}
	default:
		iter.ReportError("decode ComputationQuerySpecQueryDefinitionReportQuery", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ComputationQuerySpecQueryDefinitionReportQueryForecastCodec struct {
}

func (ComputationQuerySpecQueryDefinitionReportQueryForecastCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ComputationQuerySpecQueryDefinitionReportQueryForecast)(ptr) == nil
}

func (ComputationQuerySpecQueryDefinitionReportQueryForecastCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ComputationQuerySpecQueryDefinitionReportQueryForecast)(ptr)
	var objs []ComputationQuerySpecQueryDefinitionReportQueryForecast
	if obj != nil {
		objs = []ComputationQuerySpecQueryDefinitionReportQueryForecast{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ComputationQuerySpecQueryDefinitionReportQueryForecast{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ComputationQuerySpecQueryDefinitionReportQueryForecastCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ComputationQuerySpecQueryDefinitionReportQueryForecast)(ptr) = ComputationQuerySpecQueryDefinitionReportQueryForecast{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ComputationQuerySpecQueryDefinitionReportQueryForecast

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ComputationQuerySpecQueryDefinitionReportQueryForecast{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ComputationQuerySpecQueryDefinitionReportQueryForecast)(ptr) = objs[0]
			} else {
				*(*ComputationQuerySpecQueryDefinitionReportQueryForecast)(ptr) = ComputationQuerySpecQueryDefinitionReportQueryForecast{}
			}
		} else {
			*(*ComputationQuerySpecQueryDefinitionReportQueryForecast)(ptr) = ComputationQuerySpecQueryDefinitionReportQueryForecast{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ComputationQuerySpecQueryDefinitionReportQueryForecast

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ComputationQuerySpecQueryDefinitionReportQueryForecast{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ComputationQuerySpecQueryDefinitionReportQueryForecast)(ptr) = obj
		} else {
			*(*ComputationQuerySpecQueryDefinitionReportQueryForecast)(ptr) = ComputationQuerySpecQueryDefinitionReportQueryForecast{}
		}
	default:
		iter.ReportError("decode ComputationQuerySpecQueryDefinitionReportQueryForecast", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ComputationUsageSpecForecastCodec struct {
}

func (ComputationUsageSpecForecastCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ComputationUsageSpecForecast)(ptr) == nil
}

func (ComputationUsageSpecForecastCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ComputationUsageSpecForecast)(ptr)
	var objs []ComputationUsageSpecForecast
	if obj != nil {
		objs = []ComputationUsageSpecForecast{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ComputationUsageSpecForecast{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ComputationUsageSpecForecastCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ComputationUsageSpecForecast)(ptr) = ComputationUsageSpecForecast{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ComputationUsageSpecForecast

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ComputationUsageSpecForecast{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ComputationUsageSpecForecast)(ptr) = objs[0]
			} else {
				*(*ComputationUsageSpecForecast)(ptr) = ComputationUsageSpecForecast{}
			}
		} else {
			*(*ComputationUsageSpecForecast)(ptr) = ComputationUsageSpecForecast{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ComputationUsageSpecForecast

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ComputationUsageSpecForecast{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ComputationUsageSpecForecast)(ptr) = obj
		} else {
			*(*ComputationUsageSpecForecast)(ptr) = ComputationUsageSpecForecast{}
		}
	default:
		iter.ReportError("decode ComputationUsageSpecForecast", "unexpected JSON type")
	}
}
