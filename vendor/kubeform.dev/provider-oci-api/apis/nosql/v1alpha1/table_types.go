/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Table struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TableSpec   `json:"spec,omitempty"`
	Status            TableStatus `json:"status,omitempty"`
}

type TableSpecSchemaColumns struct {
	// +optional
	DefaultValue *string `json:"defaultValue,omitempty" tf:"default_value"`
	// +optional
	IsNullable *bool `json:"isNullable,omitempty" tf:"is_nullable"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type TableSpecSchema struct {
	// +optional
	Columns []TableSpecSchemaColumns `json:"columns,omitempty" tf:"columns"`
	// +optional
	PrimaryKey []string `json:"primaryKey,omitempty" tf:"primary_key"`
	// +optional
	ShardKey []string `json:"shardKey,omitempty" tf:"shard_key"`
	// +optional
	Ttl *int64 `json:"ttl,omitempty" tf:"ttl"`
}

type TableSpecTableLimits struct {
	MaxReadUnits    *int64 `json:"maxReadUnits" tf:"max_read_units"`
	MaxStorageInGbs *int64 `json:"maxStorageInGbs" tf:"max_storage_in_gbs"`
	MaxWriteUnits   *int64 `json:"maxWriteUnits" tf:"max_write_units"`
}

type TableSpec struct {
	State *TableSpecResource `json:"state,omitempty" tf:"-"`

	Resource TableSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type TableSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	CompartmentID *string `json:"compartmentID" tf:"compartment_id"`
	DdlStatement  *string `json:"ddlStatement" tf:"ddl_statement"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	IsAutoReclaimable *bool `json:"isAutoReclaimable,omitempty" tf:"is_auto_reclaimable"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	Name             *string `json:"name" tf:"name"`
	// +optional
	Schema *TableSpecSchema `json:"schema,omitempty" tf:"schema"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	SystemTags  map[string]string     `json:"systemTags,omitempty" tf:"system_tags"`
	TableLimits *TableSpecTableLimits `json:"tableLimits" tf:"table_limits"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeOfExpiration *string `json:"timeOfExpiration,omitempty" tf:"time_of_expiration"`
	// +optional
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated"`
}

type TableStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// TableList is a list of Tables
type TableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Table CRD objects
	Items []Table `json:"items,omitempty"`
}
