/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Bucket struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BucketSpec   `json:"spec,omitempty"`
	Status            BucketStatus `json:"status,omitempty"`
}

type BucketSpecRetentionRulesDuration struct {
	TimeAmount *string `json:"timeAmount" tf:"time_amount"`
	TimeUnit   *string `json:"timeUnit" tf:"time_unit"`
}

type BucketSpecRetentionRules struct {
	DisplayName *string `json:"displayName" tf:"display_name"`
	// +optional
	Duration *BucketSpecRetentionRulesDuration `json:"duration,omitempty" tf:"duration"`
	// +optional
	RetentionRuleID *string `json:"retentionRuleID,omitempty" tf:"retention_rule_id"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeModified *string `json:"timeModified,omitempty" tf:"time_modified"`
	// +optional
	TimeRuleLocked *string `json:"timeRuleLocked,omitempty" tf:"time_rule_locked"`
}

type BucketSpec struct {
	State *BucketSpecResource `json:"state,omitempty" tf:"-"`

	Resource BucketSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type BucketSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AccessType *string `json:"accessType,omitempty" tf:"access_type"`
	// +optional
	ApproximateCount *string `json:"approximateCount,omitempty" tf:"approximate_count"`
	// +optional
	ApproximateSize *string `json:"approximateSize,omitempty" tf:"approximate_size"`
	// +optional
	AutoTiering *string `json:"autoTiering,omitempty" tf:"auto_tiering"`
	// +optional
	BucketID      *string `json:"bucketID,omitempty" tf:"bucket_id"`
	CompartmentID *string `json:"compartmentID" tf:"compartment_id"`
	// +optional
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	Etag *string `json:"etag,omitempty" tf:"etag"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	IsReadOnly *bool `json:"isReadOnly,omitempty" tf:"is_read_only"`
	// +optional
	KmsKeyID *string `json:"kmsKeyID,omitempty" tf:"kms_key_id"`
	// +optional
	Metadata  map[string]string `json:"metadata,omitempty" tf:"metadata"`
	Name      *string           `json:"name" tf:"name"`
	Namespace *string           `json:"namespace" tf:"namespace"`
	// +optional
	ObjectEventsEnabled *bool `json:"objectEventsEnabled,omitempty" tf:"object_events_enabled"`
	// +optional
	ObjectLifecyclePolicyEtag *string `json:"objectLifecyclePolicyEtag,omitempty" tf:"object_lifecycle_policy_etag"`
	// +optional
	ReplicationEnabled *bool `json:"replicationEnabled,omitempty" tf:"replication_enabled"`
	// +optional
	// +kubebuilder:validation:MinItems=1
	RetentionRules []BucketSpecRetentionRules `json:"retentionRules,omitempty" tf:"retention_rules"`
	// +optional
	StorageTier *string `json:"storageTier,omitempty" tf:"storage_tier"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	Versioning *string `json:"versioning,omitempty" tf:"versioning"`
}

type BucketStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// BucketList is a list of Buckets
type BucketList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Bucket CRD objects
	Items []Bucket `json:"items,omitempty"`
}
