/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecRetentionRulesDuration{}).Type1()):               BucketSpecRetentionRulesDurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ObjectSpecSourceURIDetails{}).Type1()):                     ObjectSpecSourceURIDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ObjectLifecyclePolicySpecRulesObjectNameFilter{}).Type1()): ObjectLifecyclePolicySpecRulesObjectNameFilterCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecRetentionRulesDuration{}).Type1()):               BucketSpecRetentionRulesDurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ObjectSpecSourceURIDetails{}).Type1()):                     ObjectSpecSourceURIDetailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ObjectLifecyclePolicySpecRulesObjectNameFilter{}).Type1()): ObjectLifecyclePolicySpecRulesObjectNameFilterCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type BucketSpecRetentionRulesDurationCodec struct {
}

func (BucketSpecRetentionRulesDurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BucketSpecRetentionRulesDuration)(ptr) == nil
}

func (BucketSpecRetentionRulesDurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BucketSpecRetentionRulesDuration)(ptr)
	var objs []BucketSpecRetentionRulesDuration
	if obj != nil {
		objs = []BucketSpecRetentionRulesDuration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecRetentionRulesDuration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BucketSpecRetentionRulesDurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BucketSpecRetentionRulesDuration)(ptr) = BucketSpecRetentionRulesDuration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BucketSpecRetentionRulesDuration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecRetentionRulesDuration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BucketSpecRetentionRulesDuration)(ptr) = objs[0]
			} else {
				*(*BucketSpecRetentionRulesDuration)(ptr) = BucketSpecRetentionRulesDuration{}
			}
		} else {
			*(*BucketSpecRetentionRulesDuration)(ptr) = BucketSpecRetentionRulesDuration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BucketSpecRetentionRulesDuration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BucketSpecRetentionRulesDuration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BucketSpecRetentionRulesDuration)(ptr) = obj
		} else {
			*(*BucketSpecRetentionRulesDuration)(ptr) = BucketSpecRetentionRulesDuration{}
		}
	default:
		iter.ReportError("decode BucketSpecRetentionRulesDuration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ObjectSpecSourceURIDetailsCodec struct {
}

func (ObjectSpecSourceURIDetailsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ObjectSpecSourceURIDetails)(ptr) == nil
}

func (ObjectSpecSourceURIDetailsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ObjectSpecSourceURIDetails)(ptr)
	var objs []ObjectSpecSourceURIDetails
	if obj != nil {
		objs = []ObjectSpecSourceURIDetails{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ObjectSpecSourceURIDetails{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ObjectSpecSourceURIDetailsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ObjectSpecSourceURIDetails)(ptr) = ObjectSpecSourceURIDetails{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ObjectSpecSourceURIDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ObjectSpecSourceURIDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ObjectSpecSourceURIDetails)(ptr) = objs[0]
			} else {
				*(*ObjectSpecSourceURIDetails)(ptr) = ObjectSpecSourceURIDetails{}
			}
		} else {
			*(*ObjectSpecSourceURIDetails)(ptr) = ObjectSpecSourceURIDetails{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ObjectSpecSourceURIDetails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ObjectSpecSourceURIDetails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ObjectSpecSourceURIDetails)(ptr) = obj
		} else {
			*(*ObjectSpecSourceURIDetails)(ptr) = ObjectSpecSourceURIDetails{}
		}
	default:
		iter.ReportError("decode ObjectSpecSourceURIDetails", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ObjectLifecyclePolicySpecRulesObjectNameFilterCodec struct {
}

func (ObjectLifecyclePolicySpecRulesObjectNameFilterCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ObjectLifecyclePolicySpecRulesObjectNameFilter)(ptr) == nil
}

func (ObjectLifecyclePolicySpecRulesObjectNameFilterCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ObjectLifecyclePolicySpecRulesObjectNameFilter)(ptr)
	var objs []ObjectLifecyclePolicySpecRulesObjectNameFilter
	if obj != nil {
		objs = []ObjectLifecyclePolicySpecRulesObjectNameFilter{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ObjectLifecyclePolicySpecRulesObjectNameFilter{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ObjectLifecyclePolicySpecRulesObjectNameFilterCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ObjectLifecyclePolicySpecRulesObjectNameFilter)(ptr) = ObjectLifecyclePolicySpecRulesObjectNameFilter{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ObjectLifecyclePolicySpecRulesObjectNameFilter

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ObjectLifecyclePolicySpecRulesObjectNameFilter{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ObjectLifecyclePolicySpecRulesObjectNameFilter)(ptr) = objs[0]
			} else {
				*(*ObjectLifecyclePolicySpecRulesObjectNameFilter)(ptr) = ObjectLifecyclePolicySpecRulesObjectNameFilter{}
			}
		} else {
			*(*ObjectLifecyclePolicySpecRulesObjectNameFilter)(ptr) = ObjectLifecyclePolicySpecRulesObjectNameFilter{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ObjectLifecyclePolicySpecRulesObjectNameFilter

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ObjectLifecyclePolicySpecRulesObjectNameFilter{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ObjectLifecyclePolicySpecRulesObjectNameFilter)(ptr) = obj
		} else {
			*(*ObjectLifecyclePolicySpecRulesObjectNameFilter)(ptr) = ObjectLifecyclePolicySpecRulesObjectNameFilter{}
		}
	default:
		iter.ReportError("decode ObjectLifecyclePolicySpecRulesObjectNameFilter", "unexpected JSON type")
	}
}
