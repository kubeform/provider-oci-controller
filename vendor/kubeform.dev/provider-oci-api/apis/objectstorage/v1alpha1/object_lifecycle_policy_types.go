/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ObjectLifecyclePolicy struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ObjectLifecyclePolicySpec   `json:"spec,omitempty"`
	Status            ObjectLifecyclePolicyStatus `json:"status,omitempty"`
}

type ObjectLifecyclePolicySpecRulesObjectNameFilter struct {
	// +optional
	ExclusionPatterns []string `json:"exclusionPatterns,omitempty" tf:"exclusion_patterns"`
	// +optional
	InclusionPatterns []string `json:"inclusionPatterns,omitempty" tf:"inclusion_patterns"`
	// +optional
	InclusionPrefixes []string `json:"inclusionPrefixes,omitempty" tf:"inclusion_prefixes"`
}

type ObjectLifecyclePolicySpecRules struct {
	Action    *string `json:"action" tf:"action"`
	IsEnabled *bool   `json:"isEnabled" tf:"is_enabled"`
	Name      *string `json:"name" tf:"name"`
	// +optional
	ObjectNameFilter *ObjectLifecyclePolicySpecRulesObjectNameFilter `json:"objectNameFilter,omitempty" tf:"object_name_filter"`
	// +optional
	Target     *string `json:"target,omitempty" tf:"target"`
	TimeAmount *string `json:"timeAmount" tf:"time_amount"`
	TimeUnit   *string `json:"timeUnit" tf:"time_unit"`
}

type ObjectLifecyclePolicySpec struct {
	State *ObjectLifecyclePolicySpecResource `json:"state,omitempty" tf:"-"`

	Resource ObjectLifecyclePolicySpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type ObjectLifecyclePolicySpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	Bucket    *string `json:"bucket" tf:"bucket"`
	Namespace *string `json:"namespace" tf:"namespace"`
	// +optional
	Rules []ObjectLifecyclePolicySpecRules `json:"rules,omitempty" tf:"rules"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
}

type ObjectLifecyclePolicyStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ObjectLifecyclePolicyList is a list of ObjectLifecyclePolicys
type ObjectLifecyclePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ObjectLifecyclePolicy CRD objects
	Items []ObjectLifecyclePolicy `json:"items,omitempty"`
}
