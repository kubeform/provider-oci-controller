/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Object struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ObjectSpec   `json:"spec,omitempty"`
	Status            ObjectStatus `json:"status,omitempty"`
}

type ObjectSpecSourceURIDetails struct {
	Bucket *string `json:"bucket" tf:"bucket"`
	// +optional
	DestinationObjectIfMatchEtag *string `json:"destinationObjectIfMatchEtag,omitempty" tf:"destination_object_if_match_etag"`
	// +optional
	DestinationObjectIfNoneMatchEtag *string `json:"destinationObjectIfNoneMatchEtag,omitempty" tf:"destination_object_if_none_match_etag"`
	Namespace                        *string `json:"namespace" tf:"namespace"`
	Object                           *string `json:"object" tf:"object"`
	Region                           *string `json:"region" tf:"region"`
	// +optional
	SourceObjectIfMatchEtag *string `json:"sourceObjectIfMatchEtag,omitempty" tf:"source_object_if_match_etag"`
	// +optional
	SourceVersionID *string `json:"sourceVersionID,omitempty" tf:"source_version_id"`
}

type ObjectSpec struct {
	State *ObjectSpecResource `json:"state,omitempty" tf:"-"`

	Resource ObjectSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type ObjectSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	Bucket *string `json:"bucket" tf:"bucket"`
	// +optional
	CacheControl *string `json:"cacheControl,omitempty" tf:"cache_control"`
	// +optional
	Content *string `json:"content,omitempty" tf:"content"`
	// +optional
	ContentDisposition *string `json:"contentDisposition,omitempty" tf:"content_disposition"`
	// +optional
	ContentEncoding *string `json:"contentEncoding,omitempty" tf:"content_encoding"`
	// +optional
	ContentLanguage *string `json:"contentLanguage,omitempty" tf:"content_language"`
	// +optional
	ContentLength *string `json:"contentLength,omitempty" tf:"content_length"`
	// +optional
	ContentMd5 *string `json:"contentMd5,omitempty" tf:"content_md5"`
	// +optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type"`
	// +optional
	DeleteAllObjectVersions *bool `json:"deleteAllObjectVersions,omitempty" tf:"delete_all_object_versions"`
	// +optional
	Metadata  map[string]string `json:"metadata,omitempty" tf:"metadata"`
	Namespace *string           `json:"namespace" tf:"namespace"`
	Object    *string           `json:"object" tf:"object"`
	// +optional
	Source *string `json:"source,omitempty" tf:"source"`
	// +optional
	SourceURIDetails *ObjectSpecSourceURIDetails `json:"sourceURIDetails,omitempty" tf:"source_uri_details"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	StorageTier *string `json:"storageTier,omitempty" tf:"storage_tier"`
	// +optional
	VersionID *string `json:"versionID,omitempty" tf:"version_id"`
	// +optional
	WorkRequestID *string `json:"workRequestID,omitempty" tf:"work_request_id"`
}

type ObjectStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ObjectList is a list of Objects
type ObjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Object CRD objects
	Items []Object `json:"items,omitempty"`
}
