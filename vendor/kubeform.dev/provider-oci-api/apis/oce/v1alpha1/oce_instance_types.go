/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type OceInstance struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OceInstanceSpec   `json:"spec,omitempty"`
	Status            OceInstanceStatus `json:"status,omitempty"`
}

type OceInstanceSpec struct {
	State *OceInstanceSpecResource `json:"state,omitempty" tf:"-"`

	Resource OceInstanceSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`
}

type OceInstanceSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	AdminEmail    *string `json:"adminEmail" tf:"admin_email"`
	CompartmentID *string `json:"compartmentID" tf:"compartment_id"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	Guid            *string `json:"guid,omitempty" tf:"guid"`
	IdcsAccessToken *string `json:"-" sensitive:"true" tf:"idcs_access_token"`
	// +optional
	IdcsTenancy *string `json:"idcsTenancy,omitempty" tf:"idcs_tenancy"`
	// +optional
	InstanceAccessType *string `json:"instanceAccessType,omitempty" tf:"instance_access_type"`
	// +optional
	InstanceLicenseType *string `json:"instanceLicenseType,omitempty" tf:"instance_license_type"`
	// +optional
	InstanceUsageType      *string `json:"instanceUsageType,omitempty" tf:"instance_usage_type"`
	Name                   *string `json:"name" tf:"name"`
	ObjectStorageNamespace *string `json:"objectStorageNamespace" tf:"object_storage_namespace"`
	// +optional
	Service map[string]string `json:"service,omitempty" tf:"service"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	StateMessage *string `json:"stateMessage,omitempty" tf:"state_message"`
	// +optional
	SystemTags  map[string]string `json:"systemTags,omitempty" tf:"system_tags"`
	TenancyID   *string           `json:"tenancyID" tf:"tenancy_id"`
	TenancyName *string           `json:"tenancyName" tf:"tenancy_name"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated"`
	// +optional
	UpgradeSchedule *string `json:"upgradeSchedule,omitempty" tf:"upgrade_schedule"`
	// +optional
	WafPrimaryDomain *string `json:"wafPrimaryDomain,omitempty" tf:"waf_primary_domain"`
}

type OceInstanceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// OceInstanceList is a list of OceInstances
type OceInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of OceInstance CRD objects
	Items []OceInstance `json:"items,omitempty"`
}
