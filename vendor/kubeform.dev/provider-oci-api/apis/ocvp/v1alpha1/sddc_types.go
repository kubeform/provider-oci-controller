/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Sddc struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SddcSpec   `json:"spec,omitempty"`
	Status            SddcStatus `json:"status,omitempty"`
}

type SddcSpecHcxOnPremLicenses struct {
	// +optional
	ActivationKey *string `json:"activationKey,omitempty" tf:"activation_key"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	SystemName *string `json:"systemName,omitempty" tf:"system_name"`
}

type SddcSpec struct {
	State *SddcSpecResource `json:"state,omitempty" tf:"-"`

	Resource SddcSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type SddcSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	ActualEsxiHostsCount      *int64  `json:"actualEsxiHostsCount,omitempty" tf:"actual_esxi_hosts_count"`
	CompartmentID             *string `json:"compartmentID" tf:"compartment_id"`
	ComputeAvailabilityDomain *string `json:"computeAvailabilityDomain" tf:"compute_availability_domain"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	DisplayName    *string `json:"displayName,omitempty" tf:"display_name"`
	EsxiHostsCount *int64  `json:"esxiHostsCount" tf:"esxi_hosts_count"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	HcxAction *string `json:"hcxAction,omitempty" tf:"hcx_action"`
	// +optional
	HcxFqdn *string `json:"hcxFqdn,omitempty" tf:"hcx_fqdn"`
	// +optional
	HcxInitialPassword *string `json:"hcxInitialPassword,omitempty" tf:"hcx_initial_password"`
	// +optional
	HcxOnPremKey *string `json:"hcxOnPremKey,omitempty" tf:"hcx_on_prem_key"`
	// +optional
	HcxOnPremLicenses []SddcSpecHcxOnPremLicenses `json:"hcxOnPremLicenses,omitempty" tf:"hcx_on_prem_licenses"`
	// +optional
	HcxPrivateIPID *string `json:"hcxPrivateIPID,omitempty" tf:"hcx_private_ip_id"`
	// +optional
	HcxVLANID *string `json:"hcxVLANID,omitempty" tf:"hcx_vlan_id"`
	// +optional
	InitialSku *string `json:"initialSku,omitempty" tf:"initial_sku"`
	// +optional
	InstanceDisplayNamePrefix *string `json:"instanceDisplayNamePrefix,omitempty" tf:"instance_display_name_prefix"`
	// +optional
	IsHcxEnabled *bool `json:"isHcxEnabled,omitempty" tf:"is_hcx_enabled"`
	// +optional
	IsHcxEnterpriseEnabled *bool `json:"isHcxEnterpriseEnabled,omitempty" tf:"is_hcx_enterprise_enabled"`
	// +optional
	IsHcxPendingDowngrade *bool   `json:"isHcxPendingDowngrade,omitempty" tf:"is_hcx_pending_downgrade"`
	NsxEdgeUplink1vlanID  *string `json:"nsxEdgeUplink1vlanID" tf:"nsx_edge_uplink1vlan_id"`
	NsxEdgeUplink2vlanID  *string `json:"nsxEdgeUplink2vlanID" tf:"nsx_edge_uplink2vlan_id"`
	// +optional
	NsxEdgeUplinkIPID *string `json:"nsxEdgeUplinkIPID,omitempty" tf:"nsx_edge_uplink_ip_id"`
	NsxEdgeVtepVLANID *string `json:"nsxEdgeVtepVLANID" tf:"nsx_edge_vtep_vlan_id"`
	// +optional
	NsxManagerFqdn *string `json:"nsxManagerFqdn,omitempty" tf:"nsx_manager_fqdn"`
	// +optional
	NsxManagerInitialPassword *string `json:"nsxManagerInitialPassword,omitempty" tf:"nsx_manager_initial_password"`
	// +optional
	NsxManagerPrivateIPID *string `json:"nsxManagerPrivateIPID,omitempty" tf:"nsx_manager_private_ip_id"`
	// +optional
	NsxManagerUsername *string `json:"nsxManagerUsername,omitempty" tf:"nsx_manager_username"`
	// +optional
	NsxOverlaySegmentName *string `json:"nsxOverlaySegmentName,omitempty" tf:"nsx_overlay_segment_name"`
	NsxVtepVLANID         *string `json:"nsxVtepVLANID" tf:"nsx_vtep_vlan_id"`
	ProvisioningSubnetID  *string `json:"provisioningSubnetID" tf:"provisioning_subnet_id"`
	// +optional
	ProvisioningVLANID *string `json:"provisioningVLANID,omitempty" tf:"provisioning_vlan_id"`
	// +optional
	RefreshHcxLicenseStatus *bool `json:"refreshHcxLicenseStatus,omitempty" tf:"refresh_hcx_license_status"`
	// +optional
	ReplicationVLANID *string `json:"replicationVLANID,omitempty" tf:"replication_vlan_id"`
	// +optional
	ReservingHcxOnPremiseLicenseKeys []string `json:"reservingHcxOnPremiseLicenseKeys,omitempty" tf:"reserving_hcx_on_premise_license_keys"`
	SshAuthorizedKeys                *string  `json:"sshAuthorizedKeys" tf:"ssh_authorized_keys"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeHcxBillingCycleEnd *string `json:"timeHcxBillingCycleEnd,omitempty" tf:"time_hcx_billing_cycle_end"`
	// +optional
	TimeHcxLicenseStatusUpdated *string `json:"timeHcxLicenseStatusUpdated,omitempty" tf:"time_hcx_license_status_updated"`
	// +optional
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated"`
	// +optional
	VcenterFqdn *string `json:"vcenterFqdn,omitempty" tf:"vcenter_fqdn"`
	// +optional
	VcenterInitialPassword *string `json:"vcenterInitialPassword,omitempty" tf:"vcenter_initial_password"`
	// +optional
	VcenterPrivateIPID *string `json:"vcenterPrivateIPID,omitempty" tf:"vcenter_private_ip_id"`
	// +optional
	VcenterUsername       *string `json:"vcenterUsername,omitempty" tf:"vcenter_username"`
	VmotionVLANID         *string `json:"vmotionVLANID" tf:"vmotion_vlan_id"`
	VmwareSoftwareVersion *string `json:"vmwareSoftwareVersion" tf:"vmware_software_version"`
	VsanVLANID            *string `json:"vsanVLANID" tf:"vsan_vlan_id"`
	VsphereVLANID         *string `json:"vsphereVLANID" tf:"vsphere_vlan_id"`
	// +optional
	WorkloadNetworkCIDR *string `json:"workloadNetworkCIDR,omitempty" tf:"workload_network_cidr"`
}

type SddcStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// SddcList is a list of Sddcs
type SddcList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Sddc CRD objects
	Items []Sddc `json:"items,omitempty"`
}
