//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by deepcopy-gen. DO NOT EDIT.

package v1alpha1

import (
	apiv1alpha1 "kubeform.dev/apimachinery/api/v1alpha1"

	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	apiv1 "kmodules.xyz/client-go/api/v1"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseInsight) DeepCopyInto(out *DatabaseInsight) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseInsight.
func (in *DatabaseInsight) DeepCopy() *DatabaseInsight {
	if in == nil {
		return nil
	}
	out := new(DatabaseInsight)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseInsight) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseInsightList) DeepCopyInto(out *DatabaseInsightList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DatabaseInsight, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseInsightList.
func (in *DatabaseInsightList) DeepCopy() *DatabaseInsightList {
	if in == nil {
		return nil
	}
	out := new(DatabaseInsightList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseInsightList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseInsightSpec) DeepCopyInto(out *DatabaseInsightSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(DatabaseInsightSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	if in.BackendRef != nil {
		in, out := &in.BackendRef, &out.BackendRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseInsightSpec.
func (in *DatabaseInsightSpec) DeepCopy() *DatabaseInsightSpec {
	if in == nil {
		return nil
	}
	out := new(DatabaseInsightSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseInsightSpecResource) DeepCopyInto(out *DatabaseInsightSpecResource) {
	*out = *in
	if in.Timeouts != nil {
		in, out := &in.Timeouts, &out.Timeouts
		*out = new(apiv1alpha1.ResourceTimeout)
		(*in).DeepCopyInto(*out)
	}
	if in.CompartmentID != nil {
		in, out := &in.CompartmentID, &out.CompartmentID
		*out = new(string)
		**out = **in
	}
	if in.DatabaseDisplayName != nil {
		in, out := &in.DatabaseDisplayName, &out.DatabaseDisplayName
		*out = new(string)
		**out = **in
	}
	if in.DatabaseID != nil {
		in, out := &in.DatabaseID, &out.DatabaseID
		*out = new(string)
		**out = **in
	}
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.DatabaseType != nil {
		in, out := &in.DatabaseType, &out.DatabaseType
		*out = new(string)
		**out = **in
	}
	if in.DatabaseVersion != nil {
		in, out := &in.DatabaseVersion, &out.DatabaseVersion
		*out = new(string)
		**out = **in
	}
	if in.DefinedTags != nil {
		in, out := &in.DefinedTags, &out.DefinedTags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.EnterpriseManagerBridgeID != nil {
		in, out := &in.EnterpriseManagerBridgeID, &out.EnterpriseManagerBridgeID
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseManagerEntityDisplayName != nil {
		in, out := &in.EnterpriseManagerEntityDisplayName, &out.EnterpriseManagerEntityDisplayName
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseManagerEntityIdentifier != nil {
		in, out := &in.EnterpriseManagerEntityIdentifier, &out.EnterpriseManagerEntityIdentifier
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseManagerEntityName != nil {
		in, out := &in.EnterpriseManagerEntityName, &out.EnterpriseManagerEntityName
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseManagerEntityType != nil {
		in, out := &in.EnterpriseManagerEntityType, &out.EnterpriseManagerEntityType
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseManagerIdentifier != nil {
		in, out := &in.EnterpriseManagerIdentifier, &out.EnterpriseManagerIdentifier
		*out = new(string)
		**out = **in
	}
	if in.EntitySource != nil {
		in, out := &in.EntitySource, &out.EntitySource
		*out = new(string)
		**out = **in
	}
	if in.ExadataInsightID != nil {
		in, out := &in.ExadataInsightID, &out.ExadataInsightID
		*out = new(string)
		**out = **in
	}
	if in.FreeformTags != nil {
		in, out := &in.FreeformTags, &out.FreeformTags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.LifecycleDetails != nil {
		in, out := &in.LifecycleDetails, &out.LifecycleDetails
		*out = new(string)
		**out = **in
	}
	if in.ProcessorCount != nil {
		in, out := &in.ProcessorCount, &out.ProcessorCount
		*out = new(int64)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.SystemTags != nil {
		in, out := &in.SystemTags, &out.SystemTags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.TimeCreated != nil {
		in, out := &in.TimeCreated, &out.TimeCreated
		*out = new(string)
		**out = **in
	}
	if in.TimeUpdated != nil {
		in, out := &in.TimeUpdated, &out.TimeUpdated
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseInsightSpecResource.
func (in *DatabaseInsightSpecResource) DeepCopy() *DatabaseInsightSpecResource {
	if in == nil {
		return nil
	}
	out := new(DatabaseInsightSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseInsightStatus) DeepCopyInto(out *DatabaseInsightStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]apiv1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseInsightStatus.
func (in *DatabaseInsightStatus) DeepCopy() *DatabaseInsightStatus {
	if in == nil {
		return nil
	}
	out := new(DatabaseInsightStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnterpriseManagerBridge) DeepCopyInto(out *EnterpriseManagerBridge) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnterpriseManagerBridge.
func (in *EnterpriseManagerBridge) DeepCopy() *EnterpriseManagerBridge {
	if in == nil {
		return nil
	}
	out := new(EnterpriseManagerBridge)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *EnterpriseManagerBridge) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnterpriseManagerBridgeList) DeepCopyInto(out *EnterpriseManagerBridgeList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]EnterpriseManagerBridge, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnterpriseManagerBridgeList.
func (in *EnterpriseManagerBridgeList) DeepCopy() *EnterpriseManagerBridgeList {
	if in == nil {
		return nil
	}
	out := new(EnterpriseManagerBridgeList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *EnterpriseManagerBridgeList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnterpriseManagerBridgeSpec) DeepCopyInto(out *EnterpriseManagerBridgeSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(EnterpriseManagerBridgeSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	if in.BackendRef != nil {
		in, out := &in.BackendRef, &out.BackendRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnterpriseManagerBridgeSpec.
func (in *EnterpriseManagerBridgeSpec) DeepCopy() *EnterpriseManagerBridgeSpec {
	if in == nil {
		return nil
	}
	out := new(EnterpriseManagerBridgeSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnterpriseManagerBridgeSpecResource) DeepCopyInto(out *EnterpriseManagerBridgeSpecResource) {
	*out = *in
	if in.Timeouts != nil {
		in, out := &in.Timeouts, &out.Timeouts
		*out = new(apiv1alpha1.ResourceTimeout)
		(*in).DeepCopyInto(*out)
	}
	if in.CompartmentID != nil {
		in, out := &in.CompartmentID, &out.CompartmentID
		*out = new(string)
		**out = **in
	}
	if in.DefinedTags != nil {
		in, out := &in.DefinedTags, &out.DefinedTags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.FreeformTags != nil {
		in, out := &in.FreeformTags, &out.FreeformTags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.LifecycleDetails != nil {
		in, out := &in.LifecycleDetails, &out.LifecycleDetails
		*out = new(string)
		**out = **in
	}
	if in.ObjectStorageBucketName != nil {
		in, out := &in.ObjectStorageBucketName, &out.ObjectStorageBucketName
		*out = new(string)
		**out = **in
	}
	if in.ObjectStorageBucketStatusDetails != nil {
		in, out := &in.ObjectStorageBucketStatusDetails, &out.ObjectStorageBucketStatusDetails
		*out = new(string)
		**out = **in
	}
	if in.ObjectStorageNamespaceName != nil {
		in, out := &in.ObjectStorageNamespaceName, &out.ObjectStorageNamespaceName
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.SystemTags != nil {
		in, out := &in.SystemTags, &out.SystemTags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.TimeCreated != nil {
		in, out := &in.TimeCreated, &out.TimeCreated
		*out = new(string)
		**out = **in
	}
	if in.TimeUpdated != nil {
		in, out := &in.TimeUpdated, &out.TimeUpdated
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnterpriseManagerBridgeSpecResource.
func (in *EnterpriseManagerBridgeSpecResource) DeepCopy() *EnterpriseManagerBridgeSpecResource {
	if in == nil {
		return nil
	}
	out := new(EnterpriseManagerBridgeSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnterpriseManagerBridgeStatus) DeepCopyInto(out *EnterpriseManagerBridgeStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]apiv1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnterpriseManagerBridgeStatus.
func (in *EnterpriseManagerBridgeStatus) DeepCopy() *EnterpriseManagerBridgeStatus {
	if in == nil {
		return nil
	}
	out := new(EnterpriseManagerBridgeStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExadataInsight) DeepCopyInto(out *ExadataInsight) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExadataInsight.
func (in *ExadataInsight) DeepCopy() *ExadataInsight {
	if in == nil {
		return nil
	}
	out := new(ExadataInsight)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ExadataInsight) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExadataInsightList) DeepCopyInto(out *ExadataInsightList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ExadataInsight, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExadataInsightList.
func (in *ExadataInsightList) DeepCopy() *ExadataInsightList {
	if in == nil {
		return nil
	}
	out := new(ExadataInsightList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ExadataInsightList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExadataInsightSpec) DeepCopyInto(out *ExadataInsightSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(ExadataInsightSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	if in.BackendRef != nil {
		in, out := &in.BackendRef, &out.BackendRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExadataInsightSpec.
func (in *ExadataInsightSpec) DeepCopy() *ExadataInsightSpec {
	if in == nil {
		return nil
	}
	out := new(ExadataInsightSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExadataInsightSpecResource) DeepCopyInto(out *ExadataInsightSpecResource) {
	*out = *in
	if in.Timeouts != nil {
		in, out := &in.Timeouts, &out.Timeouts
		*out = new(apiv1alpha1.ResourceTimeout)
		(*in).DeepCopyInto(*out)
	}
	if in.CompartmentID != nil {
		in, out := &in.CompartmentID, &out.CompartmentID
		*out = new(string)
		**out = **in
	}
	if in.DefinedTags != nil {
		in, out := &in.DefinedTags, &out.DefinedTags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.EnterpriseManagerBridgeID != nil {
		in, out := &in.EnterpriseManagerBridgeID, &out.EnterpriseManagerBridgeID
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseManagerEntityDisplayName != nil {
		in, out := &in.EnterpriseManagerEntityDisplayName, &out.EnterpriseManagerEntityDisplayName
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseManagerEntityIdentifier != nil {
		in, out := &in.EnterpriseManagerEntityIdentifier, &out.EnterpriseManagerEntityIdentifier
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseManagerEntityName != nil {
		in, out := &in.EnterpriseManagerEntityName, &out.EnterpriseManagerEntityName
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseManagerEntityType != nil {
		in, out := &in.EnterpriseManagerEntityType, &out.EnterpriseManagerEntityType
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseManagerIdentifier != nil {
		in, out := &in.EnterpriseManagerIdentifier, &out.EnterpriseManagerIdentifier
		*out = new(string)
		**out = **in
	}
	if in.EntitySource != nil {
		in, out := &in.EntitySource, &out.EntitySource
		*out = new(string)
		**out = **in
	}
	if in.ExadataDisplayName != nil {
		in, out := &in.ExadataDisplayName, &out.ExadataDisplayName
		*out = new(string)
		**out = **in
	}
	if in.ExadataName != nil {
		in, out := &in.ExadataName, &out.ExadataName
		*out = new(string)
		**out = **in
	}
	if in.ExadataRackType != nil {
		in, out := &in.ExadataRackType, &out.ExadataRackType
		*out = new(string)
		**out = **in
	}
	if in.ExadataType != nil {
		in, out := &in.ExadataType, &out.ExadataType
		*out = new(string)
		**out = **in
	}
	if in.FreeformTags != nil {
		in, out := &in.FreeformTags, &out.FreeformTags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.IsAutoSyncEnabled != nil {
		in, out := &in.IsAutoSyncEnabled, &out.IsAutoSyncEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsVirtualizedExadata != nil {
		in, out := &in.IsVirtualizedExadata, &out.IsVirtualizedExadata
		*out = new(bool)
		**out = **in
	}
	if in.LifecycleDetails != nil {
		in, out := &in.LifecycleDetails, &out.LifecycleDetails
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.SystemTags != nil {
		in, out := &in.SystemTags, &out.SystemTags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.TimeCreated != nil {
		in, out := &in.TimeCreated, &out.TimeCreated
		*out = new(string)
		**out = **in
	}
	if in.TimeUpdated != nil {
		in, out := &in.TimeUpdated, &out.TimeUpdated
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExadataInsightSpecResource.
func (in *ExadataInsightSpecResource) DeepCopy() *ExadataInsightSpecResource {
	if in == nil {
		return nil
	}
	out := new(ExadataInsightSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExadataInsightStatus) DeepCopyInto(out *ExadataInsightStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]apiv1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExadataInsightStatus.
func (in *ExadataInsightStatus) DeepCopy() *ExadataInsightStatus {
	if in == nil {
		return nil
	}
	out := new(ExadataInsightStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostInsight) DeepCopyInto(out *HostInsight) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostInsight.
func (in *HostInsight) DeepCopy() *HostInsight {
	if in == nil {
		return nil
	}
	out := new(HostInsight)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *HostInsight) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostInsightList) DeepCopyInto(out *HostInsightList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]HostInsight, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostInsightList.
func (in *HostInsightList) DeepCopy() *HostInsightList {
	if in == nil {
		return nil
	}
	out := new(HostInsightList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *HostInsightList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostInsightSpec) DeepCopyInto(out *HostInsightSpec) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(HostInsightSpecResource)
		(*in).DeepCopyInto(*out)
	}
	in.Resource.DeepCopyInto(&out.Resource)
	out.ProviderRef = in.ProviderRef
	if in.BackendRef != nil {
		in, out := &in.BackendRef, &out.BackendRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostInsightSpec.
func (in *HostInsightSpec) DeepCopy() *HostInsightSpec {
	if in == nil {
		return nil
	}
	out := new(HostInsightSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostInsightSpecResource) DeepCopyInto(out *HostInsightSpecResource) {
	*out = *in
	if in.Timeouts != nil {
		in, out := &in.Timeouts, &out.Timeouts
		*out = new(apiv1alpha1.ResourceTimeout)
		(*in).DeepCopyInto(*out)
	}
	if in.CompartmentID != nil {
		in, out := &in.CompartmentID, &out.CompartmentID
		*out = new(string)
		**out = **in
	}
	if in.DefinedTags != nil {
		in, out := &in.DefinedTags, &out.DefinedTags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.EnterpriseManagerBridgeID != nil {
		in, out := &in.EnterpriseManagerBridgeID, &out.EnterpriseManagerBridgeID
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseManagerEntityDisplayName != nil {
		in, out := &in.EnterpriseManagerEntityDisplayName, &out.EnterpriseManagerEntityDisplayName
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseManagerEntityIdentifier != nil {
		in, out := &in.EnterpriseManagerEntityIdentifier, &out.EnterpriseManagerEntityIdentifier
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseManagerEntityName != nil {
		in, out := &in.EnterpriseManagerEntityName, &out.EnterpriseManagerEntityName
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseManagerEntityType != nil {
		in, out := &in.EnterpriseManagerEntityType, &out.EnterpriseManagerEntityType
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseManagerIdentifier != nil {
		in, out := &in.EnterpriseManagerIdentifier, &out.EnterpriseManagerIdentifier
		*out = new(string)
		**out = **in
	}
	if in.EntitySource != nil {
		in, out := &in.EntitySource, &out.EntitySource
		*out = new(string)
		**out = **in
	}
	if in.ExadataInsightID != nil {
		in, out := &in.ExadataInsightID, &out.ExadataInsightID
		*out = new(string)
		**out = **in
	}
	if in.FreeformTags != nil {
		in, out := &in.FreeformTags, &out.FreeformTags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.HostDisplayName != nil {
		in, out := &in.HostDisplayName, &out.HostDisplayName
		*out = new(string)
		**out = **in
	}
	if in.HostName != nil {
		in, out := &in.HostName, &out.HostName
		*out = new(string)
		**out = **in
	}
	if in.HostType != nil {
		in, out := &in.HostType, &out.HostType
		*out = new(string)
		**out = **in
	}
	if in.LifecycleDetails != nil {
		in, out := &in.LifecycleDetails, &out.LifecycleDetails
		*out = new(string)
		**out = **in
	}
	if in.ManagementAgentID != nil {
		in, out := &in.ManagementAgentID, &out.ManagementAgentID
		*out = new(string)
		**out = **in
	}
	if in.PlatformName != nil {
		in, out := &in.PlatformName, &out.PlatformName
		*out = new(string)
		**out = **in
	}
	if in.PlatformType != nil {
		in, out := &in.PlatformType, &out.PlatformType
		*out = new(string)
		**out = **in
	}
	if in.PlatformVersion != nil {
		in, out := &in.PlatformVersion, &out.PlatformVersion
		*out = new(string)
		**out = **in
	}
	if in.ProcessorCount != nil {
		in, out := &in.ProcessorCount, &out.ProcessorCount
		*out = new(int64)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.SystemTags != nil {
		in, out := &in.SystemTags, &out.SystemTags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.TimeCreated != nil {
		in, out := &in.TimeCreated, &out.TimeCreated
		*out = new(string)
		**out = **in
	}
	if in.TimeUpdated != nil {
		in, out := &in.TimeUpdated, &out.TimeUpdated
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostInsightSpecResource.
func (in *HostInsightSpecResource) DeepCopy() *HostInsightSpecResource {
	if in == nil {
		return nil
	}
	out := new(HostInsightSpecResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostInsightStatus) DeepCopyInto(out *HostInsightStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]apiv1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostInsightStatus.
func (in *HostInsightStatus) DeepCopy() *HostInsightStatus {
	if in == nil {
		return nil
	}
	out := new(HostInsightStatus)
	in.DeepCopyInto(out)
	return out
}
