/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ProfileSpecLevelsConfiguration{}).Type1()):    ProfileSpecLevelsConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ProfileSpecTargetCompartments{}).Type1()):     ProfileSpecTargetCompartmentsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ProfileSpecTargetTags{}).Type1()):             ProfileSpecTargetTagsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(RecommendationSpecSupportedLevels{}).Type1()): RecommendationSpecSupportedLevelsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ResourceActionSpecAction{}).Type1()):          ResourceActionSpecActionCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ProfileSpecLevelsConfiguration{}).Type1()):    ProfileSpecLevelsConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ProfileSpecTargetCompartments{}).Type1()):     ProfileSpecTargetCompartmentsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ProfileSpecTargetTags{}).Type1()):             ProfileSpecTargetTagsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(RecommendationSpecSupportedLevels{}).Type1()): RecommendationSpecSupportedLevelsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ResourceActionSpecAction{}).Type1()):          ResourceActionSpecActionCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type ProfileSpecLevelsConfigurationCodec struct {
}

func (ProfileSpecLevelsConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ProfileSpecLevelsConfiguration)(ptr) == nil
}

func (ProfileSpecLevelsConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ProfileSpecLevelsConfiguration)(ptr)
	var objs []ProfileSpecLevelsConfiguration
	if obj != nil {
		objs = []ProfileSpecLevelsConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ProfileSpecLevelsConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ProfileSpecLevelsConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ProfileSpecLevelsConfiguration)(ptr) = ProfileSpecLevelsConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ProfileSpecLevelsConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ProfileSpecLevelsConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ProfileSpecLevelsConfiguration)(ptr) = objs[0]
			} else {
				*(*ProfileSpecLevelsConfiguration)(ptr) = ProfileSpecLevelsConfiguration{}
			}
		} else {
			*(*ProfileSpecLevelsConfiguration)(ptr) = ProfileSpecLevelsConfiguration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ProfileSpecLevelsConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ProfileSpecLevelsConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ProfileSpecLevelsConfiguration)(ptr) = obj
		} else {
			*(*ProfileSpecLevelsConfiguration)(ptr) = ProfileSpecLevelsConfiguration{}
		}
	default:
		iter.ReportError("decode ProfileSpecLevelsConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ProfileSpecTargetCompartmentsCodec struct {
}

func (ProfileSpecTargetCompartmentsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ProfileSpecTargetCompartments)(ptr) == nil
}

func (ProfileSpecTargetCompartmentsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ProfileSpecTargetCompartments)(ptr)
	var objs []ProfileSpecTargetCompartments
	if obj != nil {
		objs = []ProfileSpecTargetCompartments{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ProfileSpecTargetCompartments{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ProfileSpecTargetCompartmentsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ProfileSpecTargetCompartments)(ptr) = ProfileSpecTargetCompartments{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ProfileSpecTargetCompartments

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ProfileSpecTargetCompartments{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ProfileSpecTargetCompartments)(ptr) = objs[0]
			} else {
				*(*ProfileSpecTargetCompartments)(ptr) = ProfileSpecTargetCompartments{}
			}
		} else {
			*(*ProfileSpecTargetCompartments)(ptr) = ProfileSpecTargetCompartments{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ProfileSpecTargetCompartments

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ProfileSpecTargetCompartments{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ProfileSpecTargetCompartments)(ptr) = obj
		} else {
			*(*ProfileSpecTargetCompartments)(ptr) = ProfileSpecTargetCompartments{}
		}
	default:
		iter.ReportError("decode ProfileSpecTargetCompartments", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ProfileSpecTargetTagsCodec struct {
}

func (ProfileSpecTargetTagsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ProfileSpecTargetTags)(ptr) == nil
}

func (ProfileSpecTargetTagsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ProfileSpecTargetTags)(ptr)
	var objs []ProfileSpecTargetTags
	if obj != nil {
		objs = []ProfileSpecTargetTags{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ProfileSpecTargetTags{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ProfileSpecTargetTagsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ProfileSpecTargetTags)(ptr) = ProfileSpecTargetTags{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ProfileSpecTargetTags

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ProfileSpecTargetTags{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ProfileSpecTargetTags)(ptr) = objs[0]
			} else {
				*(*ProfileSpecTargetTags)(ptr) = ProfileSpecTargetTags{}
			}
		} else {
			*(*ProfileSpecTargetTags)(ptr) = ProfileSpecTargetTags{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ProfileSpecTargetTags

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ProfileSpecTargetTags{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ProfileSpecTargetTags)(ptr) = obj
		} else {
			*(*ProfileSpecTargetTags)(ptr) = ProfileSpecTargetTags{}
		}
	default:
		iter.ReportError("decode ProfileSpecTargetTags", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type RecommendationSpecSupportedLevelsCodec struct {
}

func (RecommendationSpecSupportedLevelsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*RecommendationSpecSupportedLevels)(ptr) == nil
}

func (RecommendationSpecSupportedLevelsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*RecommendationSpecSupportedLevels)(ptr)
	var objs []RecommendationSpecSupportedLevels
	if obj != nil {
		objs = []RecommendationSpecSupportedLevels{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(RecommendationSpecSupportedLevels{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (RecommendationSpecSupportedLevelsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*RecommendationSpecSupportedLevels)(ptr) = RecommendationSpecSupportedLevels{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []RecommendationSpecSupportedLevels

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(RecommendationSpecSupportedLevels{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*RecommendationSpecSupportedLevels)(ptr) = objs[0]
			} else {
				*(*RecommendationSpecSupportedLevels)(ptr) = RecommendationSpecSupportedLevels{}
			}
		} else {
			*(*RecommendationSpecSupportedLevels)(ptr) = RecommendationSpecSupportedLevels{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj RecommendationSpecSupportedLevels

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(RecommendationSpecSupportedLevels{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*RecommendationSpecSupportedLevels)(ptr) = obj
		} else {
			*(*RecommendationSpecSupportedLevels)(ptr) = RecommendationSpecSupportedLevels{}
		}
	default:
		iter.ReportError("decode RecommendationSpecSupportedLevels", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ResourceActionSpecActionCodec struct {
}

func (ResourceActionSpecActionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ResourceActionSpecAction)(ptr) == nil
}

func (ResourceActionSpecActionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ResourceActionSpecAction)(ptr)
	var objs []ResourceActionSpecAction
	if obj != nil {
		objs = []ResourceActionSpecAction{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ResourceActionSpecAction{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ResourceActionSpecActionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ResourceActionSpecAction)(ptr) = ResourceActionSpecAction{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ResourceActionSpecAction

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ResourceActionSpecAction{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ResourceActionSpecAction)(ptr) = objs[0]
			} else {
				*(*ResourceActionSpecAction)(ptr) = ResourceActionSpecAction{}
			}
		} else {
			*(*ResourceActionSpecAction)(ptr) = ResourceActionSpecAction{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ResourceActionSpecAction

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ResourceActionSpecAction{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ResourceActionSpecAction)(ptr) = obj
		} else {
			*(*ResourceActionSpecAction)(ptr) = ResourceActionSpecAction{}
		}
	default:
		iter.ReportError("decode ResourceActionSpecAction", "unexpected JSON type")
	}
}
