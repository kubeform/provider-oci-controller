/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Profile struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProfileSpec   `json:"spec,omitempty"`
	Status            ProfileStatus `json:"status,omitempty"`
}

type ProfileSpecLevelsConfigurationItems struct {
	// +optional
	Level *string `json:"level,omitempty" tf:"level"`
	// +optional
	RecommendationID *string `json:"recommendationID,omitempty" tf:"recommendation_id"`
}

type ProfileSpecLevelsConfiguration struct {
	// +optional
	Items []ProfileSpecLevelsConfigurationItems `json:"items,omitempty" tf:"items"`
}

type ProfileSpecTargetCompartments struct {
	Items []string `json:"items" tf:"items"`
}

type ProfileSpecTargetTagsItems struct {
	TagDefinitionName *string `json:"tagDefinitionName" tf:"tag_definition_name"`
	TagNamespaceName  *string `json:"tagNamespaceName" tf:"tag_namespace_name"`
	TagValueType      *string `json:"tagValueType" tf:"tag_value_type"`
	// +optional
	TagValues []string `json:"tagValues,omitempty" tf:"tag_values"`
}

type ProfileSpecTargetTags struct {
	Items []ProfileSpecTargetTagsItems `json:"items" tf:"items"`
}

type ProfileSpec struct {
	State *ProfileSpecResource `json:"state,omitempty" tf:"-"`

	Resource ProfileSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type ProfileSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	CompartmentID *string `json:"compartmentID" tf:"compartment_id"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	Description *string           `json:"description" tf:"description"`
	// +optional
	FreeformTags        map[string]string               `json:"freeformTags,omitempty" tf:"freeform_tags"`
	LevelsConfiguration *ProfileSpecLevelsConfiguration `json:"levelsConfiguration" tf:"levels_configuration"`
	Name                *string                         `json:"name" tf:"name"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TargetCompartments *ProfileSpecTargetCompartments `json:"targetCompartments,omitempty" tf:"target_compartments"`
	// +optional
	TargetTags *ProfileSpecTargetTags `json:"targetTags,omitempty" tf:"target_tags"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated"`
}

type ProfileStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ProfileList is a list of Profiles
type ProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Profile CRD objects
	Items []Profile `json:"items,omitempty"`
}
