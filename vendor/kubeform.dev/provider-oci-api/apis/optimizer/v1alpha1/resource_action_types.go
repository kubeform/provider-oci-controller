/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ResourceAction struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ResourceActionSpec   `json:"spec,omitempty"`
	Status            ResourceActionStatus `json:"status,omitempty"`
}

type ResourceActionSpecAction struct {
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
}

type ResourceActionSpec struct {
	State *ResourceActionSpecResource `json:"state,omitempty" tf:"-"`

	Resource ResourceActionSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ResourceActionSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Action *ResourceActionSpecAction `json:"action,omitempty" tf:"action"`
	// +optional
	CategoryID *string `json:"categoryID,omitempty" tf:"category_id"`
	// +optional
	CompartmentID *string `json:"compartmentID,omitempty" tf:"compartment_id"`
	// +optional
	CompartmentName *string `json:"compartmentName,omitempty" tf:"compartment_name"`
	// +optional
	EstimatedCostSaving *float64 `json:"estimatedCostSaving,omitempty" tf:"estimated_cost_saving"`
	// +optional
	ExtendedMetadata map[string]string `json:"extendedMetadata,omitempty" tf:"extended_metadata"`
	// +optional
	Metadata map[string]string `json:"metadata,omitempty" tf:"metadata"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	RecommendationID *string `json:"recommendationID,omitempty" tf:"recommendation_id"`
	ResourceActionID *string `json:"resourceActionID" tf:"resource_action_id"`
	// +optional
	ResourceID *string `json:"resourceID,omitempty" tf:"resource_id"`
	// +optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type"`
	// +optional
	State  *string `json:"state,omitempty" tf:"state"`
	Status *string `json:"status" tf:"status"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeStatusBegin *string `json:"timeStatusBegin,omitempty" tf:"time_status_begin"`
	// +optional
	TimeStatusEnd *string `json:"timeStatusEnd,omitempty" tf:"time_status_end"`
	// +optional
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated"`
}

type ResourceActionStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ResourceActionList is a list of ResourceActions
type ResourceActionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ResourceAction CRD objects
	Items []ResourceAction `json:"items,omitempty"`
}
