/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ManagedInstance struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagedInstanceSpec   `json:"spec,omitempty"`
	Status            ManagedInstanceStatus `json:"status,omitempty"`
}

type ManagedInstanceSpecAutonomous struct {
	// +optional
	IsAutoUpdateEnabled *bool `json:"isAutoUpdateEnabled,omitempty" tf:"is_auto_update_enabled"`
}

type ManagedInstanceSpecChildSoftwareSources struct {
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
}

type ManagedInstanceSpecManagedInstanceGroups struct {
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
}

type ManagedInstanceSpecParentSoftwareSource struct {
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
}

type ManagedInstanceSpec struct {
	State *ManagedInstanceSpecResource `json:"state,omitempty" tf:"-"`

	Resource ManagedInstanceSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ManagedInstanceSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Autonomous *ManagedInstanceSpecAutonomous `json:"autonomous,omitempty" tf:"autonomous"`
	// +optional
	BugUpdatesAvailable *int64 `json:"bugUpdatesAvailable,omitempty" tf:"bug_updates_available"`
	// +optional
	ChildSoftwareSources []ManagedInstanceSpecChildSoftwareSources `json:"childSoftwareSources,omitempty" tf:"child_software_sources"`
	// +optional
	CompartmentID *string `json:"compartmentID,omitempty" tf:"compartment_id"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	EnhancementUpdatesAvailable *int64 `json:"enhancementUpdatesAvailable,omitempty" tf:"enhancement_updates_available"`
	// +optional
	IsDataCollectionAuthorized *bool `json:"isDataCollectionAuthorized,omitempty" tf:"is_data_collection_authorized"`
	// +optional
	IsRebootRequired *bool `json:"isRebootRequired,omitempty" tf:"is_reboot_required"`
	// +optional
	KspliceEffectiveKernelVersion *string `json:"kspliceEffectiveKernelVersion,omitempty" tf:"ksplice_effective_kernel_version"`
	// +optional
	LastBoot *string `json:"lastBoot,omitempty" tf:"last_boot"`
	// +optional
	LastCheckin *string `json:"lastCheckin,omitempty" tf:"last_checkin"`
	// +optional
	ManagedInstanceGroups []ManagedInstanceSpecManagedInstanceGroups `json:"managedInstanceGroups,omitempty" tf:"managed_instance_groups"`
	ManagedInstanceID     *string                                    `json:"managedInstanceID" tf:"managed_instance_id"`
	// +optional
	NotificationTopicID *string `json:"notificationTopicID,omitempty" tf:"notification_topic_id"`
	// +optional
	OsFamily *string `json:"osFamily,omitempty" tf:"os_family"`
	// +optional
	OsKernelVersion *string `json:"osKernelVersion,omitempty" tf:"os_kernel_version"`
	// +optional
	OsName *string `json:"osName,omitempty" tf:"os_name"`
	// +optional
	OsVersion *string `json:"osVersion,omitempty" tf:"os_version"`
	// +optional
	OtherUpdatesAvailable *int64 `json:"otherUpdatesAvailable,omitempty" tf:"other_updates_available"`
	// +optional
	ParentSoftwareSource *ManagedInstanceSpecParentSoftwareSource `json:"parentSoftwareSource,omitempty" tf:"parent_software_source"`
	// +optional
	ScheduledJobCount *int64 `json:"scheduledJobCount,omitempty" tf:"scheduled_job_count"`
	// +optional
	SecurityUpdatesAvailable *int64 `json:"securityUpdatesAvailable,omitempty" tf:"security_updates_available"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	UpdatesAvailable *int64 `json:"updatesAvailable,omitempty" tf:"updates_available"`
	// +optional
	WorkRequestCount *int64 `json:"workRequestCount,omitempty" tf:"work_request_count"`
}

type ManagedInstanceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ManagedInstanceList is a list of ManagedInstances
type ManagedInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ManagedInstance CRD objects
	Items []ManagedInstance `json:"items,omitempty"`
}
