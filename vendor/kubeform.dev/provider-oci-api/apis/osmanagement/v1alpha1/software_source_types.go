/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type SoftwareSource struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SoftwareSourceSpec   `json:"spec,omitempty"`
	Status            SoftwareSourceStatus `json:"status,omitempty"`
}

type SoftwareSourceSpecAssociatedManagedInstances struct {
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
}

type SoftwareSourceSpec struct {
	State *SoftwareSourceSpecResource `json:"state,omitempty" tf:"-"`

	Resource SoftwareSourceSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type SoftwareSourceSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	ArchType *string `json:"archType" tf:"arch_type"`
	// +optional
	AssociatedManagedInstances []SoftwareSourceSpecAssociatedManagedInstances `json:"associatedManagedInstances,omitempty" tf:"associated_managed_instances"`
	// +optional
	ChecksumType  *string `json:"checksumType,omitempty" tf:"checksum_type"`
	CompartmentID *string `json:"compartmentID" tf:"compartment_id"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	DisplayName *string `json:"displayName" tf:"display_name"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	GpgKeyFingerprint *string `json:"gpgKeyFingerprint,omitempty" tf:"gpg_key_fingerprint"`
	// +optional
	GpgKeyID *string `json:"gpgKeyID,omitempty" tf:"gpg_key_id"`
	// +optional
	GpgKeyURL *string `json:"gpgKeyURL,omitempty" tf:"gpg_key_url"`
	// +optional
	MaintainerEmail *string `json:"maintainerEmail,omitempty" tf:"maintainer_email"`
	// +optional
	MaintainerName *string `json:"maintainerName,omitempty" tf:"maintainer_name"`
	// +optional
	MaintainerPhone *string `json:"maintainerPhone,omitempty" tf:"maintainer_phone"`
	// +optional
	Packages *int64 `json:"packages,omitempty" tf:"packages"`
	// +optional
	ParentID *string `json:"parentID,omitempty" tf:"parent_id"`
	// +optional
	ParentName *string `json:"parentName,omitempty" tf:"parent_name"`
	// +optional
	RepoType *string `json:"repoType,omitempty" tf:"repo_type"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
}

type SoftwareSourceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// SoftwareSourceList is a list of SoftwareSources
type SoftwareSourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of SoftwareSource CRD objects
	Items []SoftwareSource `json:"items,omitempty"`
}
