/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type StreamPool struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StreamPoolSpec   `json:"spec,omitempty"`
	Status            StreamPoolStatus `json:"status,omitempty"`
}

type StreamPoolSpecCustomEncryptionKey struct {
	// +optional
	KeyState *string `json:"keyState,omitempty" tf:"key_state"`
	KmsKeyID *string `json:"kmsKeyID" tf:"kms_key_id"`
}

type StreamPoolSpecKafkaSettings struct {
	// +optional
	AutoCreateTopicsEnable *bool `json:"autoCreateTopicsEnable,omitempty" tf:"auto_create_topics_enable"`
	// +optional
	BootstrapServers *string `json:"bootstrapServers,omitempty" tf:"bootstrap_servers"`
	// +optional
	LogRetentionHours *int64 `json:"logRetentionHours,omitempty" tf:"log_retention_hours"`
	// +optional
	NumPartitions *int64 `json:"numPartitions,omitempty" tf:"num_partitions"`
}

type StreamPoolSpecPrivateEndpointSettings struct {
	// +optional
	NsgIDS []string `json:"nsgIDS,omitempty" tf:"nsg_ids"`
	// +optional
	PrivateEndpointIP *string `json:"privateEndpointIP,omitempty" tf:"private_endpoint_ip"`
	// +optional
	SubnetID *string `json:"subnetID,omitempty" tf:"subnet_id"`
}

type StreamPoolSpec struct {
	State *StreamPoolSpecResource `json:"state,omitempty" tf:"-"`

	Resource StreamPoolSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type StreamPoolSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	CompartmentID *string `json:"compartmentID" tf:"compartment_id"`
	// +optional
	CustomEncryptionKey *StreamPoolSpecCustomEncryptionKey `json:"customEncryptionKey,omitempty" tf:"custom_encryption_key"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	EndpointFqdn *string `json:"endpointFqdn,omitempty" tf:"endpoint_fqdn"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	// +optional
	IsPrivate *bool `json:"isPrivate,omitempty" tf:"is_private"`
	// +optional
	KafkaSettings *StreamPoolSpecKafkaSettings `json:"kafkaSettings,omitempty" tf:"kafka_settings"`
	// +optional
	LifecycleStateDetails *string `json:"lifecycleStateDetails,omitempty" tf:"lifecycle_state_details"`
	Name                  *string `json:"name" tf:"name"`
	// +optional
	PrivateEndpointSettings *StreamPoolSpecPrivateEndpointSettings `json:"privateEndpointSettings,omitempty" tf:"private_endpoint_settings"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
}

type StreamPoolStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// StreamPoolList is a list of StreamPools
type StreamPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of StreamPool CRD objects
	Items []StreamPool `json:"items,omitempty"`
}
