/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Secret struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecretSpec   `json:"spec,omitempty"`
	Status            SecretStatus `json:"status,omitempty"`
}

type SecretSpecSecretContent struct {
	Content     *string `json:"content" tf:"content"`
	ContentType *string `json:"contentType" tf:"content_type"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Stage *string `json:"stage,omitempty" tf:"stage"`
}

type SecretSpecSecretRules struct {
	// +optional
	IsEnforcedOnDeletedSecretVersions *bool `json:"isEnforcedOnDeletedSecretVersions,omitempty" tf:"is_enforced_on_deleted_secret_versions"`
	// +optional
	IsSecretContentRetrievalBlockedOnExpiry *bool   `json:"isSecretContentRetrievalBlockedOnExpiry,omitempty" tf:"is_secret_content_retrieval_blocked_on_expiry"`
	RuleType                                *string `json:"ruleType" tf:"rule_type"`
	// +optional
	SecretVersionExpiryInterval *string `json:"secretVersionExpiryInterval,omitempty" tf:"secret_version_expiry_interval"`
	// +optional
	TimeOfAbsoluteExpiry *string `json:"timeOfAbsoluteExpiry,omitempty" tf:"time_of_absolute_expiry"`
}

type SecretSpec struct {
	State *SecretSpecResource `json:"state,omitempty" tf:"-"`

	Resource SecretSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type SecretSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	CompartmentID *string `json:"compartmentID" tf:"compartment_id"`
	// +optional
	CurrentVersionNumber *string `json:"currentVersionNumber,omitempty" tf:"current_version_number"`
	// +optional
	DefinedTags map[string]string `json:"definedTags,omitempty" tf:"defined_tags"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	FreeformTags map[string]string `json:"freeformTags,omitempty" tf:"freeform_tags"`
	KeyID        *string           `json:"keyID" tf:"key_id"`
	// +optional
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details"`
	// +optional
	Metadata      map[string]string        `json:"metadata,omitempty" tf:"metadata"`
	SecretContent *SecretSpecSecretContent `json:"secretContent" tf:"secret_content"`
	SecretName    *string                  `json:"secretName" tf:"secret_name"`
	// +optional
	SecretRules []SecretSpecSecretRules `json:"secretRules,omitempty" tf:"secret_rules"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created"`
	// +optional
	TimeOfCurrentVersionExpiry *string `json:"timeOfCurrentVersionExpiry,omitempty" tf:"time_of_current_version_expiry"`
	// +optional
	TimeOfDeletion *string `json:"timeOfDeletion,omitempty" tf:"time_of_deletion"`
	VaultID        *string `json:"vaultID" tf:"vault_id"`
}

type SecretStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// SecretList is a list of Secrets
type SecretList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Secret CRD objects
	Items []Secret `json:"items,omitempty"`
}
