/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecAgentSettings{}).Type1()):                                             ScanningHostScanRecipeSpecAgentSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration{}).Type1()):                           ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings{}).Type1()):       ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings{}).Type1()): ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecPortSettings{}).Type1()):                                              ScanningHostScanRecipeSpecPortSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecSchedule{}).Type1()):                                                  ScanningHostScanRecipeSpecScheduleCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecAgentSettings{}).Type1()):                                             ScanningHostScanRecipeSpecAgentSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration{}).Type1()):                           ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings{}).Type1()):       ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings{}).Type1()): ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecPortSettings{}).Type1()):                                              ScanningHostScanRecipeSpecPortSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecSchedule{}).Type1()):                                                  ScanningHostScanRecipeSpecScheduleCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type ScanningHostScanRecipeSpecAgentSettingsCodec struct {
}

func (ScanningHostScanRecipeSpecAgentSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ScanningHostScanRecipeSpecAgentSettings)(ptr) == nil
}

func (ScanningHostScanRecipeSpecAgentSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ScanningHostScanRecipeSpecAgentSettings)(ptr)
	var objs []ScanningHostScanRecipeSpecAgentSettings
	if obj != nil {
		objs = []ScanningHostScanRecipeSpecAgentSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecAgentSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ScanningHostScanRecipeSpecAgentSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ScanningHostScanRecipeSpecAgentSettings)(ptr) = ScanningHostScanRecipeSpecAgentSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ScanningHostScanRecipeSpecAgentSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecAgentSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ScanningHostScanRecipeSpecAgentSettings)(ptr) = objs[0]
			} else {
				*(*ScanningHostScanRecipeSpecAgentSettings)(ptr) = ScanningHostScanRecipeSpecAgentSettings{}
			}
		} else {
			*(*ScanningHostScanRecipeSpecAgentSettings)(ptr) = ScanningHostScanRecipeSpecAgentSettings{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ScanningHostScanRecipeSpecAgentSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecAgentSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ScanningHostScanRecipeSpecAgentSettings)(ptr) = obj
		} else {
			*(*ScanningHostScanRecipeSpecAgentSettings)(ptr) = ScanningHostScanRecipeSpecAgentSettings{}
		}
	default:
		iter.ReportError("decode ScanningHostScanRecipeSpecAgentSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCodec struct {
}

func (ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration)(ptr) == nil
}

func (ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration)(ptr)
	var objs []ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration
	if obj != nil {
		objs = []ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration)(ptr) = ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration)(ptr) = objs[0]
			} else {
				*(*ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration)(ptr) = ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration{}
			}
		} else {
			*(*ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration)(ptr) = ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration)(ptr) = obj
		} else {
			*(*ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration)(ptr) = ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration{}
		}
	default:
		iter.ReportError("decode ScanningHostScanRecipeSpecAgentSettingsAgentConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettingsCodec struct {
}

func (ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings)(ptr) == nil
}

func (ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings)(ptr)
	var objs []ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings
	if obj != nil {
		objs = []ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings)(ptr) = ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings)(ptr) = objs[0]
			} else {
				*(*ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings)(ptr) = ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings{}
			}
		} else {
			*(*ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings)(ptr) = ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings)(ptr) = obj
		} else {
			*(*ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings)(ptr) = ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings{}
		}
	default:
		iter.ReportError("decode ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationCisBenchmarkSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettingsCodec struct {
}

func (ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings)(ptr) == nil
}

func (ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings)(ptr)
	var objs []ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings
	if obj != nil {
		objs = []ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings)(ptr) = ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings)(ptr) = objs[0]
			} else {
				*(*ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings)(ptr) = ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings{}
			}
		} else {
			*(*ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings)(ptr) = ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings)(ptr) = obj
		} else {
			*(*ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings)(ptr) = ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings{}
		}
	default:
		iter.ReportError("decode ScanningHostScanRecipeSpecAgentSettingsAgentConfigurationEndpointProtectionSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ScanningHostScanRecipeSpecPortSettingsCodec struct {
}

func (ScanningHostScanRecipeSpecPortSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ScanningHostScanRecipeSpecPortSettings)(ptr) == nil
}

func (ScanningHostScanRecipeSpecPortSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ScanningHostScanRecipeSpecPortSettings)(ptr)
	var objs []ScanningHostScanRecipeSpecPortSettings
	if obj != nil {
		objs = []ScanningHostScanRecipeSpecPortSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecPortSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ScanningHostScanRecipeSpecPortSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ScanningHostScanRecipeSpecPortSettings)(ptr) = ScanningHostScanRecipeSpecPortSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ScanningHostScanRecipeSpecPortSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecPortSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ScanningHostScanRecipeSpecPortSettings)(ptr) = objs[0]
			} else {
				*(*ScanningHostScanRecipeSpecPortSettings)(ptr) = ScanningHostScanRecipeSpecPortSettings{}
			}
		} else {
			*(*ScanningHostScanRecipeSpecPortSettings)(ptr) = ScanningHostScanRecipeSpecPortSettings{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ScanningHostScanRecipeSpecPortSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecPortSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ScanningHostScanRecipeSpecPortSettings)(ptr) = obj
		} else {
			*(*ScanningHostScanRecipeSpecPortSettings)(ptr) = ScanningHostScanRecipeSpecPortSettings{}
		}
	default:
		iter.ReportError("decode ScanningHostScanRecipeSpecPortSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ScanningHostScanRecipeSpecScheduleCodec struct {
}

func (ScanningHostScanRecipeSpecScheduleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ScanningHostScanRecipeSpecSchedule)(ptr) == nil
}

func (ScanningHostScanRecipeSpecScheduleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ScanningHostScanRecipeSpecSchedule)(ptr)
	var objs []ScanningHostScanRecipeSpecSchedule
	if obj != nil {
		objs = []ScanningHostScanRecipeSpecSchedule{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecSchedule{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ScanningHostScanRecipeSpecScheduleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ScanningHostScanRecipeSpecSchedule)(ptr) = ScanningHostScanRecipeSpecSchedule{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ScanningHostScanRecipeSpecSchedule

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecSchedule{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ScanningHostScanRecipeSpecSchedule)(ptr) = objs[0]
			} else {
				*(*ScanningHostScanRecipeSpecSchedule)(ptr) = ScanningHostScanRecipeSpecSchedule{}
			}
		} else {
			*(*ScanningHostScanRecipeSpecSchedule)(ptr) = ScanningHostScanRecipeSpecSchedule{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ScanningHostScanRecipeSpecSchedule

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScanningHostScanRecipeSpecSchedule{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ScanningHostScanRecipeSpecSchedule)(ptr) = obj
		} else {
			*(*ScanningHostScanRecipeSpecSchedule)(ptr) = ScanningHostScanRecipeSpecSchedule{}
		}
	default:
		iter.ReportError("decode ScanningHostScanRecipeSpecSchedule", "unexpected JSON type")
	}
}
